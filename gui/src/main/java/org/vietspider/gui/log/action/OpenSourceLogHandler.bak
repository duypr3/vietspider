/***************************************************************************
 * Copyright 2001-2009 The VietSpider         All rights reserved.  		 *
 **************************************************************************/
package org.vietspider.gui.log.action;

import org.eclipse.swt.custom.CTabFolder;
import org.eclipse.swt.widgets.Combo;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.List;
import org.eclipse.swt.widgets.Spinner;
import org.eclipse.swt.widgets.TabFolder;
import org.vietspider.client.common.ClientConnector2;
import org.vietspider.client.common.ZipRatioWorker;
import org.vietspider.client.common.source.SourcesClientHandler;
import org.vietspider.gui.log.LogViewer2;
import org.vietspider.model.Source;
import org.vietspider.model.SourceUtils;
import org.vietspider.ui.services.ClientLog;
import org.vietspider.ui.widget.ImageHyperlink;

/** 
 * Author : Nhu Dinh Thuan
 *          nhudinhthuan@yahoo.com
 * Oct 17, 2009  
 */
public class OpenSourceLogHandler {
   
  private LogViewer2 viewer;
  
  private Spinner spinPage;
  private List listDate;
  private ImageHyperlink butGo;
  
  private String group;
  private String category;
  private String name;
  private String date;
  
  private ZipRatioWorker worker;
  
  public OpenSourceLogHandler(LogViewer2 _viewer, String _group, String _category, String _name) {
    this.viewer = _viewer;
    
    this.group = _group;
    this.category = _category;
    this.name = _name;
    
    spinPage = viewer.getSpinPage(); 
    butGo = viewer.getButGo();
    listDate = viewer.getListDate();
    
    worker = new ZipRatioWorker() {

      private String file;
      @Override
      public void abort() {
        ClientConnector2.currentInstance().abort();
      }

      @Override
      public void before() {
      }

      @Override
      public void execute() {
        try {
          SourcesClientHandler  client = new SourcesClientHandler(group);
          Source source = client.loadSource(category, name, 0);
          file = SourceUtils.getCodeName(source);
        } catch (Exception e) {
          ClientLog.getInstance().setMessage(null, e);
        }
      }

      @Override
      public void after() {
        if(file.length() < 5) return;
        
        listDate.setEnabled(false);
        listDate.setEnabled(false);
        butGo.setEnabled(false);
        spinPage.setMaximum(0);
        spinPage.setMinimum(0);
        spinPage.setSelection(0);

        Composite tab = viewer.getTab();
        if(tab instanceof CTabFolder) {
          ((CTabFolder)tab).setSelection(1);
        } else {
          ((TabFolder)tab).setSelection(1);
        }
        Combo cboDate = viewer.getCboSourceDate();
        for(int i = 0; i < cboDate.getItemCount(); i++) {
          if(cboDate.getItem(i).equals(date)) {
            cboDate.select(i);
            break;
          }
        }
        
        viewer.setLogType((short)2);
        
        file = file.substring(4, file.length());
        List list = viewer.getListSources();
        list.setSelection(new String[]{file});
        spinPage.setSelection(1);
        new LoadPageLogHandler(viewer, true);
      }
    };

//    statusBar.showProgressBar();
//    ProgressExecutor loading = new ProgressExecutor(statusBar.getProgressBar(), worker);
//    loading.open();
  }
  
  public ZipRatioWorker getWorker() { return worker; }
  
}
