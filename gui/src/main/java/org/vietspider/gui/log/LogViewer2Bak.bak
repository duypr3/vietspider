/***************************************************************************
 * Copyright 2001-2010 The VietSpider         All rights reserved.  		 *
 **************************************************************************/
package org.vietspider.gui.log;

import java.io.File;
import java.io.FileFilter;

import org.eclipse.swt.SWT;
import org.eclipse.swt.custom.SashForm;
import org.eclipse.swt.custom.ScrolledComposite;
import org.eclipse.swt.events.ControlAdapter;
import org.eclipse.swt.events.ControlEvent;
import org.eclipse.swt.events.KeyAdapter;
import org.eclipse.swt.events.KeyEvent;
import org.eclipse.swt.events.ModifyEvent;
import org.eclipse.swt.events.ModifyListener;
import org.eclipse.swt.events.MouseAdapter;
import org.eclipse.swt.events.MouseEvent;
import org.eclipse.swt.events.SelectionAdapter;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.graphics.Color;
import org.eclipse.swt.graphics.Cursor;
import org.eclipse.swt.graphics.Point;
import org.eclipse.swt.graphics.Rectangle;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Combo;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Event;
import org.eclipse.swt.widgets.List;
import org.eclipse.swt.widgets.Listener;
import org.eclipse.swt.widgets.Menu;
import org.eclipse.swt.widgets.TabFolder;
import org.eclipse.swt.widgets.TabItem;
import org.eclipse.swt.widgets.TableItem;
import org.eclipse.ui.forms.widgets.FormText;
import org.eclipse.ui.forms.widgets.FormToolkit;
import org.vietspider.chars.CharsUtil;
import org.vietspider.client.ClientPlugin;
import org.vietspider.common.Application;
import org.vietspider.common.io.DataReader;
import org.vietspider.common.util.Worker;
import org.vietspider.gui.browser.StatusBar;
import org.vietspider.gui.creator.Creator;
import org.vietspider.gui.monitor.DataMonitor;
import org.vietspider.gui.monitor.MonitorStatusBar;
import org.vietspider.gui.workspace.Workspace;
import org.vietspider.ui.services.ClientLog;
import org.vietspider.ui.widget.ApplicationFactory;
import org.vietspider.ui.widget.UIDATA;
import org.vietspider.ui.widget.action.HyperlinkAdapter;
import org.vietspider.ui.widget.action.HyperlinkEvent;
import org.vietspider.ui.widget.images.ToolbarResource;

/** 
 * Author : Nhu Dinh Thuan
 *          nhudinhthuan@yahoo.com
 * Nov 15, 2010  
 */
public class LogViewer2Bak extends DataMonitor {

  private FormText rtext;
  private ScrolledComposite scrolled;

  protected Combo cboFilter;

  protected Combo cboCommonType;

  protected Combo cboSourceDate;
  protected List listSources;

  protected StatusBar statusBar;

  private TabFolder tab;

  private short logType = 1;

  public LogViewer2Bak(Composite parent, Workspace workspace) {
    super(parent, workspace);

    String clazzName  = "org.vietspider.gui.monitor.Monitor";
    ApplicationFactory factory = new ApplicationFactory(this, "Monitor", clazzName);

    GridLayout gridLayout = new GridLayout(1, false);
    gridLayout.marginHeight = 0;
    gridLayout.horizontalSpacing = 0;
    gridLayout.verticalSpacing = 0;
    gridLayout.marginWidth = 0;
    setLayout(gridLayout);

    SashForm sashMain = new SashForm(this, SWT.HORIZONTAL);
    GridData gridData = new GridData(GridData.FILL_BOTH);
    sashMain.setLayoutData(gridData);
    sashMain.setBackground(getDisplay().getSystemColor(SWT.COLOR_WIDGET_BACKGROUND));

    Composite leftComposite = new Composite(sashMain, SWT.NONE);
    gridLayout = new GridLayout(1, false);
    gridLayout.marginHeight = 0;
    gridLayout.horizontalSpacing = 0;
    gridLayout.verticalSpacing = 5;
    gridLayout.marginWidth = 0;
    leftComposite.setLayout(gridLayout);

    Menu menu1 = new Menu(getShell(), SWT.POP_UP);
    factory.createMenuItem(menu1,"menuMonitor",new SelectionAdapter(){
      @SuppressWarnings("unused")
      public void widgetSelected(SelectionEvent evt){
        loadDate(true);
        new LoadSourceDateHandler(cboSourceDate, listSources, 0);
      }
    });


    tab = new TabFolder(leftComposite, SWT.TOP);
    tab.setCursor(new Cursor(getDisplay(), SWT.CURSOR_HAND));
    tab.addSelectionListener(new SelectionAdapter() {
      public void widgetSelected(SelectionEvent e) {
        if(cboCommonType == null) {
          logType = 1;
          return;
        }

        TabFolder tabFolder = (TabFolder)e.getSource();
        if(tabFolder.getSelectionIndex() == 1) {
          logType = 2;
          return;
        } 
        if(cboCommonType.getSelectionIndex() == 0) {
          logType = 0;
          return;
        }

        if(cboCommonType.getSelectionIndex() == 1) {
          logType = 1;
          return;
        }
      }
    });
    tab.setMenu(menu1);

    tab.setBackground(new Color(getDisplay(), 255, 255, 255));
    tab.setFont(UIDATA.FONT_10);
    gridData = new GridData(GridData.FILL_BOTH);     
    tab.setLayoutData(gridData);

    Composite tabCommonComposite = new Composite(tab, SWT.NONE);
    gridLayout = new GridLayout(1, false);
    gridLayout.marginHeight = 0;
    gridLayout.horizontalSpacing = 0;
    gridLayout.verticalSpacing = 5;
    gridLayout.marginWidth = 0;
    tabCommonComposite.setLayout(gridLayout);
    TabItem item = new TabItem(tab, SWT.NONE);
    item.setText(factory.getLabel("tab.common"));
    item.setControl(tabCommonComposite);
    tab.setSelection(item);

    factory.setComposite(tabCommonComposite);
    cboCommonType = factory.createCombo(SWT.BORDER | SWT.READ_ONLY);
    gridData = new GridData(GridData.FILL_HORIZONTAL);
    cboCommonType.setLayoutData(gridData);
    cboCommonType.setItems(new String[]{"Website", "Application"});
    cboCommonType.select(0);
    cboCommonType.addSelectionListener(new SelectionAdapter() {
      @SuppressWarnings("unused")
      public void widgetSelected(SelectionEvent e) {
        if(cboCommonType.getSelectionIndex() == 0) {
          logType = 0;
        } else if(cboCommonType.getSelectionIndex() == 1) {
          logType = 1;
        }
      }
    });
    cboCommonType.setMenu(menu1);
    cboCommonType.select(1);

    listDate = factory.createList(tabCommonComposite, SWT.SINGLE | SWT.BORDER | SWT.V_SCROLL, new String[]{});  
    listDate.addSelectionListener(new SelectionAdapter(){
      @SuppressWarnings("unused")
      public void widgetSelected(SelectionEvent e) {
        spinPage.setSelection(1);
        new LoadPageLogHandler(LogViewer2Bak.this, true);
      }
    }); 
    gridData = new GridData(GridData.FILL_BOTH);
    listDate.setLayoutData(gridData);
    loadDate(true);
    listDate.setMenu(menu1);


    //************************************************* SOURCE LOG ITEM ***********************************

    Composite tabSourcesComposite = new Composite(tab, SWT.NONE);
    gridLayout = new GridLayout(1, false);
    gridLayout.marginHeight = 0;
    gridLayout.horizontalSpacing = 0;
    gridLayout.verticalSpacing = 5;
    gridLayout.marginWidth = 0;
    tabSourcesComposite.setLayout(gridLayout);
    item = new TabItem(tab, SWT.NONE);
    item.setText(factory.getLabel("tab.source")+ " ");
    item.setControl(tabSourcesComposite);

    factory.setComposite(tabSourcesComposite);
    cboSourceDate = factory.createCombo(SWT.BORDER | SWT.READ_ONLY);
    gridData = new GridData(GridData.FILL_HORIZONTAL);
    cboSourceDate.setLayoutData(gridData);
    cboSourceDate.addSelectionListener(new SelectionAdapter() {
      @SuppressWarnings("unused")
      public void widgetSelected(SelectionEvent e) {
        int idx = cboSourceDate.getSelectionIndex();
        if(idx < 0 || idx >= cboSourceDate.getItemCount()) return;
        new LoadSourceByDateHandler(listSources, cboSourceDate.getItem(idx));
      }
    });
    cboSourceDate.setMenu(menu1);

    listSources = factory.createList(tabSourcesComposite, 
        SWT.SINGLE | SWT.BORDER | SWT.V_SCROLL | SWT.H_SCROLL, new String[]{});  
    listSources.addSelectionListener(new SelectionAdapter(){
      @SuppressWarnings("unused")
      public void widgetSelected(SelectionEvent e) {
        spinPage.setSelection(1);
        new LoadPageLogHandler(LogViewer2Bak.this, true);
      }
    }); 
    gridData = new GridData(GridData.FILL_BOTH);
    listSources.setLayoutData(gridData);
    listSources.setMenu(menu1);

    //*********************************************** CREATE BROWSER **************************************


    Composite mainComposite = new Composite(sashMain, SWT.NONE);
    gridLayout = new GridLayout(1, false);
    gridLayout.marginHeight = 0;
    gridLayout.horizontalSpacing = 0;
    gridLayout.verticalSpacing = 0;
    gridLayout.marginWidth = 0;
    mainComposite.setLayout(gridLayout);

    Composite topComposite = new Composite(mainComposite, SWT.NONE);
    gridData = new GridData(GridData.FILL_HORIZONTAL | GridData.HORIZONTAL_ALIGN_END);
    topComposite.setLayoutData(gridData);

    gridLayout = new GridLayout(3, false);
    gridLayout.marginHeight = 0;
    gridLayout.horizontalSpacing = 2;
    gridLayout.verticalSpacing = 0;
    gridLayout.marginWidth = 0;
    topComposite.setLayout(gridLayout);

    factory.setComposite(topComposite);

    final int TEXT_MARGIN = 3;
    listDate.addListener(SWT.MeasureItem, new Listener() {
      public void handleEvent(Event event) {
        TableItem _item = (TableItem)event.item;
        String text = _item.getText(event.index);
        Point size = event.gc.textExtent(text);
        event.width = size.x + 2 * TEXT_MARGIN;
        event.height = Math.max(event.height, size.y + TEXT_MARGIN);
      }
    });
    listDate.addListener(SWT.EraseItem, new Listener() {
      public void handleEvent(Event event) {
        event.detail &= ~SWT.FOREGROUND;
      }
    });
    listDate.addListener(SWT.PaintItem, new Listener() {
      public void handleEvent(Event event) {
        TableItem _item = (TableItem)event.item;
        String text = _item.getText(event.index);
        /* center column 1 vertically */
        int yOffset = 0;
        //        if (event.index == 5) {
        Point size = event.gc.textExtent(text);
        yOffset = Math.max(0, (event.height - size.y) / 2);
        //        }
        event.gc.drawText(text, event.x + TEXT_MARGIN, event.y + yOffset, true);
      }
    });
    cboFilter = factory.createCombo(SWT.BORDER);
    gridData = new GridData(GridData.HORIZONTAL_ALIGN_END);
    gridData.widthHint = 250;
    cboFilter.setLayoutData(gridData);
    cboFilter.addKeyListener( new KeyAdapter(){
      @Override
      public void keyPressed(KeyEvent e){ 
        if(e.keyCode == SWT.CR) {
          new LoadPageLogHandler(LogViewer2Bak.this, false);
        }
      }
    });

    cboFilter.setItems(new String[]{"USER", "SOURCE", "APPLICATION", "SOURCE&ERROR"});

    Composite pageComposite = new Composite(topComposite, SWT.NONE);
    factory.setComposite(pageComposite);

    gridLayout = new GridLayout(2, false);
    gridLayout.marginHeight = 0;
    gridLayout.horizontalSpacing = 2;
    gridLayout.verticalSpacing = 0;
    gridLayout.marginWidth = 0;
    pageComposite.setLayout(gridLayout);

    factory.createLabel("lblPage");

    spinPage = factory.createSpinner(SWT.BORDER);
    spinPage.setCursor(new Cursor(spinPage.getDisplay(), SWT.CURSOR_HAND));
    spinPage.setIncrement(1);
    gridData = new GridData();
    gridData.widthHint = 30;
    gridData.heightHint = 16;
    spinPage.setLayoutData(gridData);
    spinPage.addModifyListener(new ModifyListener() {
      @SuppressWarnings("unused")
      public void modifyText(ModifyEvent event) {
        new ViewLogHandler(LogViewer2Bak.this, spinPage.getSelection());
      }
    });

    factory.setComposite(topComposite);

    final ToolbarResource resources = ToolbarResource.getInstance();
    butGo = resources.createIcon(topComposite, 
        resources.getImageGo(), resources.getTextGo(), new HyperlinkAdapter(){ 
      @SuppressWarnings("unused")
      public void linkActivated(HyperlinkEvent e) {
        butGo.setImage(resources.getImageGo());
      }
      @SuppressWarnings("unused")
      public void linkExited(HyperlinkEvent e) {
        butGo.setImage(resources.getImageGo());
      }
      @SuppressWarnings("unused")
      public void linkEntered(HyperlinkEvent e) {
        butGo.setImage(resources.getImageGo());
      }
    }); 
    butGo.addMouseListener(new MouseAdapter() {
      @SuppressWarnings("unused")
      public void mouseUp(MouseEvent e) {
        new LoadPageLogHandler(LogViewer2Bak.this, false);
      }

      @SuppressWarnings("unused")
      public void mouseDown(MouseEvent e) {
        butGo.setImage(resources.getImageGo1());
        butGo.redraw();
      }
    });
    

    FormToolkit toolkit = new FormToolkit(getDisplay());
//    ScrolledForm form = toolkit.createScrolledForm(mainComposite);
//    TableWrapLayout layout = new TableWrapLayout();
//    form.getBody().setLayout(layout);
//    form.setLayoutData(new GridData(GridData.FILL_BOTH));

    scrolled = new ScrolledComposite(mainComposite, SWT.BORDER | SWT.V_SCROLL | SWT.H_SCROLL);
    rtext = toolkit.createFormText(scrolled, false);
    rtext.setFont(UIDATA.FONT_11);
    
    rtext.addHyperlinkListener(new org.eclipse.ui.forms.events.HyperlinkAdapter() {
      public void linkActivated(org.eclipse.ui.forms.events.HyperlinkEvent e) {
        editSource(e.getHref().toString());
      }
    });
    
//    TableWrapData td = new TableWrapData(TableWrapData.FILL);
//    rtext.setLayoutData(td);
//    toolkit.paintBordersFor(form.getBody());
    
    scrolled.setLayoutData(new GridData(GridData.FILL_BOTH));
    scrolled.setContent(rtext);
    scrolled.setExpandHorizontal(true);
    scrolled.setExpandVertical(true);
    
    scrolled.addControlListener(new ControlAdapter() {
      @SuppressWarnings("unused")
      public void controlResized(ControlEvent e) {
        Rectangle r = scrolled.getClientArea();
        scrolled.setMinSize(rtext.computeSize(r.width, SWT.DEFAULT));
      }
    });
    
    sashMain.setWeights(new int[]{14, 86});
    
    statusBar = new MonitorStatusBar(workspace, this, ClientPlugin.LOG);
    gridData = new GridData(GridData.FILL_HORIZONTAL);
    statusBar.setLayoutData(gridData); 
  }

  void setPages(File file, String labelPage) {
    File [] files = file.listFiles(new FileFilter() {
      public boolean accept(File pathname) {
        return !pathname.getName().endsWith(".temp");
      }
    });
    int total = files == null ? 0 :  (files.length);
    if(total > 1) {
      spinPage.setEnabled(true);
      spinPage.setMinimum(1);
      spinPage.setMaximum(total);
      spinPage.setToolTipText(String.valueOf(total) + labelPage);
    } else {
      spinPage.setEnabled(false);
    }
  }
  
  public void setFile(File file) {
    StringBuilder buf = new StringBuilder();
    buf.append("<form>");
    buf.append("<p>");
    try {
      byte [] bytes = new DataReader().load(file);
      buf.append(new String(bytes, Application.CHARSET));
    } catch (Exception e) {
      buf.append(e.toString());
    }
    buf.append("</p>");
    buf.append("</form>");
    try {
      rtext.setText(buf.toString(), true, false);
    } catch (Exception e) {
      System.err.println(e.toString());
      System.out.println(buf.toString());
    }
//    scrolled.getParent().pack();
    Rectangle r = scrolled.getClientArea();
    scrolled.setMinSize(rtext.computeSize(r.width, SWT.DEFAULT));
  }

  private void editSource(String source) {
    source = source.substring(1);
    try {
      final Creator creator = (Creator)workspace.getTab().createTool(Creator.class, true, SWT.CLOSE);
      String [] values = CharsUtil.split2Array(source, '.');
      if(values.length < 3) return;

      creator.selectData(new Worker[] {
          new TestLinkWorker(creator, null)
      }, values[0], values[1], values[2]);
    } catch (Exception e) {
      ClientLog.getInstance().setMessage(null, e);
    }
  }

  public Composite getTab() { return tab;  }

  public Combo getCboFilter() { return cboFilter; }

  public Combo getCboCommonType() { return cboCommonType; }

  public Combo getCboSourceDate() { return cboSourceDate; }

  public List getListSources() { return listSources; }

//  public StatusBar getStatusBar() { return statusBar; }

  public short getLogType() { return logType; }
  public void setLogType(short logType) { this.logType = logType; }

  @Override
  public String getNameIcon() { return "small.log.png"; }
  

}
