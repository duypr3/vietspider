/***************************************************************************
 * Copyright 2001-2009 The VietSpider         All rights reserved.  		 *
 **************************************************************************/
package org.vietspider.content.tp.vn.comparator;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.TreeSet;

import org.vietspider.content.tp.TpWorkingData.TpWord;

/** 
 * Author : Nhu Dinh Thuan
 *          nhudinhthuan@yahoo.com
 * Aug 28, 2009  
 */
public class NounMatcher {
  
  public double compare(List<TpWord> wordIndex1, List<TpWord> wordIndex2){
    List<Node> nodes = new ArrayList<Node>();
    List<TpWord> min  = wordIndex1.size() > wordIndex2.size() ? wordIndex2 : wordIndex1;
    
    match(nodes, wordIndex1, wordIndex2);
    
    return compareNumber(nodes, wordIndex1, wordIndex2);
  }

  public double compareNumber(List<Node> nodes, List<TpWord> wordIndex1, List<TpWord> wordIndex2){
    double total1 = wordIndex1.getTotalWord(0);//getList(wordIndex1);
    double total2 = wordIndex2.getTotalWord(0);//getList(wordIndex2);
//    System.out.println("noun total 1 "+ total1 + " /  total2 " + total2);
    
//    System.out.println(" noun size "+ wordIndex1.getWords().size()
//        + "  /  size 2 " + wordIndex2.getWords().size());
    
    if(total1 < 5 || total2 < 5) return 0;
    
    if(nodes.size() < 1) return 0;
    if(nodes.size() == 1 && nodes.get(0).getTotal1() < 4) return 0;
    
    double time1  = getTime1(nodes);
    double time2  = getTime2(nodes);
//    System.out.println("noun time 1 "+ time1 + " /  time2 " + time2 + " : "+ nodes.size());
    
    double rate1 = (time1/total1)*100;
    double rate2 = (time2/total2)*100;
    
//    System.out.println("noun rate 1 "+ rate1 + " /  rate2 " + rate2);
    
    double rate = Math.min(rate1, rate2);
    if(rate < 2.0) return rate;
    if(rate1 < 15.0 && rate2 < 15.0) return 0.0;
    
//    double rate3 = ((time1+time2)/(total1+total2))*100;
    
    return (rate1+rate2)/2 /*- rate3*/;
  }
  
  private double getTime1(List<Node> nodes) {
   double score = 0;
   for(int i = 0; i < nodes.size(); i++) {
     Node node = nodes.get(i);
     score += getScore(node.getTotal1(), node.getTime1());
//     System.out.println("=== > "+ score);
   }
   return score;
  }
  
  private double getTime2(List<Node> nodes) {
    double score = 0;
    for(int i = 0; i < nodes.size(); i++) {
      Node node = nodes.get(i);
      score += getScore(node.getTotal2(), node.getTime2());
    }
    return score;
   }
  
  private double getScore(int total, int time) {
    double score = 1;
    time = Math.min(3, time);
//    System.out.println(" thay co "+ time);
//    VietnameseDictionary.getInstance().contains()
    if(total == 1) {
      score += 0.2f*time;
    } else if(total == 2) {
      score += 0.5f*time;
    } else if(total == 3) {
      score += 0.8f*time;
    } else if(total == 4) {
      score += 1.0f*time;
    } else if(total >= 5 && total < 10) {
      score += 1.2f*time;
    } else if(total >= 10) {
      score += 2.0f*time;
    }
    
    return score;
  }
  

  public void match(List<Node> nodes, TpWordIndex2 index1, TpWordIndex2 index2) {
    TreeSet<TpWordIndex2> children1 = index1.getChildren();
    Iterator<TpWordIndex2> iterator = children1.iterator();
    while(iterator.hasNext()) {
      TpWordIndex2 child1 = iterator.next();
      TreeSet<TpWordIndex2> children2 = index2.getChildren();
      TpWordIndex2 child2 = children2.ceiling(child1) ;
      
      if(child2 != null 
          && child1.getCode() == child2.getCode()) match1(nodes, child1, child2) ;
    }
  }
  
  private void match1(List<Node>nodes, TpWordIndex2 index1, TpWordIndex2 index2) {
//    System.out.println(index1.getCode() + " / "+ index2.getCode());
    if(index1.getCode() == 0 && index2.getCode() == 0) {
//      System.out.println(index1.getCode() + " / "+ index2.getCode());
      nodes.add(new Node(index1.getTotal(), index1.getTime(), index2.getTime()));
      return;
    }
    
    Iterator<TpWordIndex2> iterator = index1.getChildren().iterator();
    while(iterator.hasNext()) {
      TpWordIndex2 child1 = iterator.next();
      TpWordIndex2 child2 = index2.getChildren().ceiling(child1) ;
      
      if(child2 != null 
          && child1.getCode() == child2.getCode()) match1(nodes, child1, child2) ;
    }
  }
  
}

