/***************************************************************************
 * Copyright 2001-2007 The VietSpider         All rights reserved.  		 *
 **************************************************************************/
package org.vietspider.content.tp.index;

import java.io.File;
import java.io.IOException;

import org.apache.lucene.analysis.WhitespaceAnalyzer;
import org.apache.lucene.document.Document;
import org.apache.lucene.index.IndexWriter;
import org.apache.lucene.index.Term;
import org.apache.lucene.index.IndexWriter.MaxFieldLength;
import org.apache.lucene.store.Directory;
import org.apache.lucene.store.FSDirectory;
import org.vietspider.common.io.LogService;
import org.vietspider.content.index3.ContentIndex;

/** 
 * Author : Nhu Dinh Thuan
 *          nhudinhthuan@yahoo.com
 * Oct 5, 2007  
 */
public class TopicTrackingIndexer{
  
  private IndexWriter writer;
  
  private File file;
  
  private volatile long lastAccess = System.currentTimeMillis();

  private volatile boolean isOptimize = false;
  private volatile boolean isClose = false;

  public TopicTrackingIndexer(File file) {
    this.file = file;
    writer = createIndexModifier(true);
  }
  
  public boolean isClose() { return isClose; }
  
  public long getLastAccess() { return lastAccess; }
  
  public void write(Document doc) {
    if(writer == null || doc == null) return;
    lastAccess = System.currentTimeMillis();
    try {
      writer.addDocument(doc);
//      DatabaseService.getSaver().save(meta.getRelations());
    } catch (Exception exp) {
      LogService.getInstance().setMessage(exp, null);
    }
  }
  
  public void delete(String id) {
    if(writer == null || id == null) return;
    lastAccess = System.currentTimeMillis();
    try {
      writer.deleteDocuments(new Term(ContentIndex.FIELD_ID, id));
    } catch (Exception e) {
      LogService.getInstance().setThrowable(e);
    }  
  }
  
  public void optimize() {
    if(writer == null) return;
    lastAccess = System.currentTimeMillis();
    isOptimize = true;
    try {
      writer.optimize();
    } catch (Exception e) {
      LogService.getInstance().setThrowable(e);
    }
    isOptimize = false;
  }
  
  public void commit() {
    if(writer == null) return;
    if(isOptimize) return;
    try {
      writer.commit();
    } catch (Exception exp) {
      LogService.getInstance().setThrowable(exp);
      try {
        writer.close();
        writer = createIndexModifier(true);
      } catch (Exception e) {
        LogService.getInstance().setThrowable(e);
      }
    }
  }
  
  public  void close() {
    isClose = true;
    if(writer == null) return;
    try {
      writer.close();
    } catch (Exception e) {
      LogService.getInstance().setThrowable(e);
    }
  }
  
  protected IndexWriter createIndexModifier (boolean recursive) {
    MaxFieldLength mfl = new IndexWriter.MaxFieldLength(IndexWriter.DEFAULT_MAX_FIELD_LENGTH);
    if(file.exists() && file.listFiles().length > 0) {
      try {
        Directory directory  = FSDirectory.open(file);
        return new IndexWriter(directory, new WhitespaceAnalyzer(), false, mfl);
      } catch (IOException e) {
        try {
          Directory directory  = FSDirectory.open(file);
          if(IndexWriter.isLocked(directory)) IndexWriter.unlock(directory) ;
          if(recursive) return createIndexModifier(false); 
        } catch (Exception e2) {
          LogService.getInstance().setThrowable(e);
        }
      } catch (Exception e) {
        LogService.getInstance().setThrowable(e);
        return null;
      }   
    } 

    try {
      if(!file.exists()) file.createNewFile();
      Directory directory  = FSDirectory.open(file);
      return new IndexWriter(directory, new WhitespaceAnalyzer(), true, mfl);
    } catch (Exception e) {
      LogService.getInstance().setThrowable(e);
      return null;
    }
  }
  
}
