/***************************************************************************
 * Copyright 2001-2009 The VietSpider         All rights reserved.  		 *
 **************************************************************************/
package org.vietspider.content.index3.monitor;

import java.io.File;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.concurrent.ConcurrentLinkedQueue;

import org.headvances.vietspider.QueryDatabase;
import org.headvances.vietspider.SystemProperties;
import org.headvances.vietspider.QueryDatabase.Query;
import org.vietspider.common.Application;
import org.vietspider.common.io.LogService;
import org.vietspider.common.io.UtilFile;
import org.vietspider.content.index3.monitor2.MonitorDataSearcher2;

/** 
 * Author : Nhu Dinh Thuan
 *          nhudinhthuan@yahoo.com
 * Oct 7, 2009  
 */
class SearchMonitor extends Thread {

  private static volatile SearchMonitor instance;

  @SuppressWarnings("unused")
  private final static synchronized SearchMonitor getInstance() {
    if(instance == null) instance = new SearchMonitor();
    return instance;
  }

  private QueryDatabase database;

  private volatile boolean execute = true;
  
//  protected volatile ConcurrentLinkedQueue<Article> tempArticles = new ConcurrentLinkedQueue<Article>();
  protected volatile int totalArticles = 0;
  
  protected volatile long lastQuery = -1;

  private int page = 1;
  
  private ConcurrentLinkedQueue<Query> tempQueries = new ConcurrentLinkedQueue<Query>();

  public SearchMonitor() {
    execute = "true".equalsIgnoreCase(SystemProperties.getInstance().getValue("search.system"));
    File file  = UtilFile.getFolder("track/search/monitor/");
    try {
      database = new QueryDatabase(file);
    } catch (Throwable e) {
      LogService.getInstance().setThrowable(e);
      execute = false;
    }

    Application.addShutdown(new Application.IShutdown() {

      public String getMessage() { return "Close Query Database";}

      public void execute() {
        execute = false;
        try {
          database.close();
        } catch (Throwable e) {
          LogService.getInstance().setThrowable(e);
        }
      }
    });

    this.start();
  }
  
  public void savePattern(String pattern, int total) {
    if(!execute) return;
    Query query = new Query(pattern, total);
    query.setLastTest(System.currentTimeMillis());
    tempQueries.add(query);
//    System.out.println(" chuan bi save roi "+ pattern + " : "+ total);
  }
  
  public Set<Query> getTopQuery() {
    try {
    return database.getTopQuery();
    } catch (Exception e) {
      LogService.getInstance().setThrowable(e);
      return new HashSet<Query>();
    }
  }

  public void run() {
    while(execute) {
//      if(tempArticles.isEmpty()) {//1*60*60*1000l
      System.out.println(" =====  >  "+ (System.currentTimeMillis() - lastQuery ));
      if(System.currentTimeMillis() - lastQuery > 30*1000l) { 
        monitorQuery();
        lastQuery = System.currentTimeMillis();
      }
      
      while(!tempQueries.isEmpty()) {
        try {
          database.save(tempQueries.poll());
        } catch (Exception e) {
          LogService.getInstance().setThrowable(e);
        }
      }
      
      try {
        Thread.sleep(1*60*1000);
      } catch (Exception e) {
      }
//      } else {
//        monitorArticle();
//        
//        try {
//          Thread.sleep(15*1000);
//        } catch (Exception e) {
//        }
//      }
    }

    database.close();
  }
  
//  private void monitorArticle() {
//    MonitorArticleHandler handler = new MonitorArticleHandler(); 
//    totalArticles -= handler.handleArticles(tempArticles);
//    if(totalArticles < 0) totalArticles = tempArticles.size();
//  }
  
  void monitorQuery() {
    if(page > database.getTotalPage(50)) page = 1;
    
    try {
      List<Query> queries = database.loadPattern(page, 50);
      for(int i = 0; i < queries.size(); i++) {
        System.out.println(" chuan bi chay "+ queries.get(i).getPattern());
        search(queries.get(i)); 
      }
    } catch (Throwable e) {
      LogService.getInstance().setThrowable(e);
    }
    page++;
    
//    try {
//      database.optimize();
//    } catch (Exception e) {
//      LogService.getInstance().setThrowable(e);
//    }
  }

  private void search(Query query) {
    if(System.currentTimeMillis() - query.getLastTest() < 15*1000l) return;
    
    //15*60*1000
    //5*60*60*1000l
   
    ClassifiedSearchQuery searchQuery = new ClassifiedSearchQuery(query.getPattern());
    System.out.println(" chuan bi search "+ query.getPattern());
    MonitorDataSearcher2 searcher = new MonitorDataSearcher2();
    try {
      searcher.search(searchQuery);
    } catch (Throwable e) {
      LogService.getInstance().setThrowable(e);
    }
    
    query.setTotal((int)searchQuery.getTotal());
    query.setLastTest(System.currentTimeMillis());
    try {
      database.update(query);
    } catch (Exception e) {
      LogService.getInstance().setThrowable(e);
    }
  }
  
  /* link test
   
   */
}
