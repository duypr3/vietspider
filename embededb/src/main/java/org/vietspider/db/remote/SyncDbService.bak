/***************************************************************************
 * Copyright 2001-2008 The VietSpider         All rights reserved.  		 *
 **************************************************************************/
package org.headvances.vietspider.remote;

import java.util.ArrayList;
import java.util.List;

import org.headvances.cluster.organization.MemberId;
import org.vietspider.bean.Article;
import org.vietspider.common.Application;
import org.vietspider.common.io.LogService;

/** 
 * Author : Nhu Dinh Thuan
 *          nhudinhthuan@yahoo.com
 * Dec 29, 2008  
 */

public class SyncDbService extends Thread {

  private static SyncDbService INSTANCE;

  public static synchronized SyncDbService getService() {
    if(INSTANCE == null) {
      INSTANCE  = new SyncDbService();
    }
    return INSTANCE;    
  }

  private volatile int commitSize = 300 ;
  private volatile int commitPeriod = 60*1000 ;

  private long lastCommitTime = System.currentTimeMillis();
  private volatile boolean execute = true;

  //  private RemoteDatabase remote;
  private RemoteDatabase2 remote2;
  private TpTempSync temp;
  private long sleep = 5*1000l;

  protected SyncDbService()  {
    Application.addShutdown(new Application.IShutdown() {
      public void execute() {
        execute = false;
        //        remote.sync();
        temp.store();
      }
    });

    temp = new TpTempSync();
    //    remote = new RemoteDatabase();
    remote2 = new RemoteDatabase2();

    this.start();
  }

  public void save(Article article)  {
//    System.out.println(" da dua vao day roi "+ article.getId());
    temp.save(article);
  }

  public void run() {
    while(execute) {
      if(temp.getSyncCounter() > commitSize) {
        commit();
      } else if(System.currentTimeMillis() - lastCommitTime > commitPeriod) {
        commit();
      }

      try {
        Thread.sleep(sleep) ; //default is 5*1000
      } catch(Exception ex) {
      }
    }
  }

  private void commit() {
    MemberId[] members = null;
    try {
      members = remote2.getMemberIds();
    } catch (Throwable e) {
      LogService.getInstance().setThrowable(e);
      sleep = 3*60*1000l; 
      return;
    }
    
    if(members == null || members.length < 1) return;
    
    List<Article> articles = new ArrayList<Article>();
    try {
//      System.out.println(" chuan bi sync 1 " + temp.getSyncCounter());
      temp.load(/*remote,*/ articles);
    } catch (Throwable e) {
      LogService.getInstance().setThrowable(e);
    }
    
    //    remote.sync();
    try {
      remote2.sync(members, articles);
      //    System.out.println(" ket thuc  sync 1 " + temp.getSyncCounter());
      lastCommitTime = System.currentTimeMillis();
    } catch (Throwable e) {
      for(int i = 0; i < articles.size(); i++) {
        temp.save(articles.get(i));
      }
      LogService.getInstance().setThrowable(e);
      sleep = 3*60*1000l; 
    }
    
  }

}
