/***************************************************************************
 * Copyright 2001-2008 The VietSpider         All rights reserved.  		 *
 **************************************************************************/
package org.vietspider.client.common;

import java.io.BufferedReader;
import java.io.EOFException;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import java.io.RandomAccessFile;

import org.vietspider.bean.SourceMonitor;
import org.vietspider.common.Application;
import org.vietspider.common.io.DataReader;
import org.vietspider.common.io.LogService;
import org.vietspider.common.io.UtilFile;
import org.vietspider.model.TrackId;
import org.vietspider.user.AccessChecker;

/** 
 * Author : Nhu Dinh Thuan
 *          nhudinhthuan@yahoo.com
 * Sep 1, 2008  
 */
public class SourceMenuClient extends SourceMonitorHandler {

  private int total = 0;

  public SourceMenuClient(String folder, String[] dates) {
    super(folder, dates);
  }

  public void download() throws Exception {
    File tmpFolder = ClientConnector2.getCacheFolder(actionFolder);
    UtilFile.deleteFolder(tmpFolder, false);

    File tmpFile = readFromServer(true);
    if(tmpFile == null)  return;
    
    File sortFile = new File(tmpFolder, dateFolder+"_data.menu");
    SourceMenuSort sorter = new SourceMenuSort(sortFile);
    sorter.sort();

    BufferedReader tmpReader = null;
    RandomAccessFile sortRandom = null;    
    try { 
      FileInputStream fileInputStream = new FileInputStream(tmpFile);
      InputStreamReader streamReader = new InputStreamReader(fileInputStream, "utf-8");
      tmpReader = new BufferedReader(streamReader);
      
      sortRandom = new RandomAccessFile(sortFile, "rwd");
      
      AccessChecker accessChecker = new OrganizationClientHandler().loadAccessChecker();

      String line;
      total = 0;
      while((line = tmpReader.readLine()) != null) {
        if(line.trim().isEmpty()) continue;
        
        String [] elements = line.split("/");
        if(elements.length < 5) continue;
        
        String sourceName  = elements[0];
        int crawlTime  = Integer.parseInt(elements[1]);
        int link  = Integer.parseInt(elements[2]);
        int data = Integer.parseInt(elements[3]);
//        long totalDownload  = Long.parseLong(elements[4]);
        long lastAccess = Long.parseLong(elements[4]);
        
        SourceMonitor sourceMonitor = new SourceMonitor();
        sourceMonitor.setSource(sourceName);
        sourceMonitor.setCrawlTime(crawlTime);
        sourceMonitor.setLinkCounter(link);
        sourceMonitor.setDataCounter(data);
//        sourceMonitor.setDownloaded(totalDownload);
        sourceMonitor.setLastAccess(lastAccess);
        
        if(validate(sourceMonitor, null)
            && sourceMonitor.getDataCounter() > 0
            && accessChecker.isPermitAccess(sourceName, false) ) {
          sortRandom.seek(sortRandom.length());
          sortRandom.write("\n".getBytes());
          sortRandom.write(sourceName.toString().getBytes(Application.CHARSET));
          total++;
        }

      }
      sortRandom.close();
    } catch (Error e) {
      e.printStackTrace();
    } catch (EOFException e) {
    } catch (Exception e) {
      ClientLog.getInstance().setException(e);
    } finally {
      try {
        if(sortRandom != null) sortRandom.close(); 
      } catch (Exception e) {
        ClientLog.getInstance().setException(e);
      }
      
      try {
        if(tmpReader != null) tmpReader.close(); 
      } catch (Exception e) {
        ClientLog.getInstance().setException(e);
      }
    }
    
    try {
      tmpFile.delete();
    } catch (Exception e) {
      ClientLog.getInstance().setException(e);
    }
    
    File folder = ClientConnector2.getCacheFolder(actionFolder + "/" + dateFolder);
    new SourceMenuPageSeparator(folder).separate(sortFile);
    
    try {
      sortFile.delete();
    } catch (Exception e) {
      ClientLog.getInstance().setException(e);
    }
  }
  
  public int totalPage() { 
    File file = ClientConnector2.getCacheFolder(actionFolder + "/" + dateFolder);
    String [] files = file.list();
    if(files == null) return 0;
    return files.length;
  }
  
  public TrackId loadPage(int page) {
    File folder = ClientConnector2.getCacheFolder(actionFolder+"/"+dateFolder);
    File file = new File(folder, "data" + String.valueOf(page));
    MenuInfo menuInfo = new MenuInfo();
    if(!file.exists()) return menuInfo;
    
    String value = "";
    try {
      byte [] bytes = new DataReader().load(file);
      value = new String(bytes, Application.CHARSET);
    } catch (Exception e) {
      LogService.getInstance().setThrowable(e);
      return menuInfo;
    }
    
    String [] elements = value.split("\n");
    for(String element : elements) {
      if(element == null 
          || (element = element.trim()).isEmpty()) continue;
      try {
        menuInfo.add(element, 0, 0, 0, 0);
      } catch (Exception e) {
        LogService.getInstance().setThrowable(e);
      }
    }
    
    return menuInfo;
  }
  
}
