/***************************************************************************
 * Copyright 2001-2011 The VietSpider         All rights reserved.  		 *
 **************************************************************************/
package org.vietspider.webui.cms.vietspider;

import java.io.File;
import java.net.URL;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.List;

import org.apache.http.HttpHost;
import org.apache.http.HttpResponse;
import org.apache.http.client.methods.HttpGet;
import org.vietspider.cache.InmemoryCache;
import org.vietspider.chars.refs.RefsDecoder;
import org.vietspider.common.io.DataReader;
import org.vietspider.common.io.LogService;
import org.vietspider.common.io.UtilFile;
import org.vietspider.db.SystemProperties;
import org.vietspider.html.Name;
import org.vietspider.html.parser.HTMLParser2;
import org.vietspider.html.parser.NodeImpl;
import org.vietspider.net.client.HttpResponseReader;
import org.vietspider.net.client.WebClient;
import org.vietspider.serialize.XML2Object;
import org.vietspider.token.TypeToken;

/** 
 * Author : Nhu Dinh Thuan
 *          nhudinhthuan@yahoo.com
 * Nov 19, 2011  
 */
class Translator {
  
  private final static String INPUT_SEPARATOR = "Viet_Spider";
  private final static String OUTPUT_SEPARATOR = "Viet_Spider";

  private InmemoryCache<String, String> cached;

  private String translationStartTag = "<string xmlns=\"http://schemas.microsoft.com/2003/10/Serialization/\">";
  private String translationEndTag = "</string>";

  private HTMLParser2 parser = new HTMLParser2();
  private TranslateMode config;
  private WebClient webClient;
  private HttpResponseReader reader = new HttpResponseReader();

  public Translator() {
    cached = new InmemoryCache<String, String>("translate", 500);
    cached.setLiveTime(30*60);
    try {
      File file = new File(UtilFile.getFolder("system/plugin/"), "bing.translation.config");
      if(file.exists() && file.length() > 0) {
        byte [] bytes = new DataReader().load(file);
        config = XML2Object.getInstance().toObject(TranslateMode.class, bytes);
      }
    } catch (Exception e) {
      LogService.getInstance().setThrowable(e);
      return;
    }
    createWebClient();
  }

  String[] translate(String title, String content,
      String from, String to, StringBuilder indexBuilder)  {
    if(config == null) return null;

    //    System.out.println(" ==================  > to : "+ to);
    //    System.out.println(" ==================  > from : "+ from);

    if(from == null) from = config.getFrom();
    if(to == null) to = config.getTo();

    try {
      StringBuilder builder = new StringBuilder();

      builder.append(title);
      List<NodeImpl> nodes = parser.createTokens(content.toCharArray());

      List<NodeImpl> contents = new ArrayList<NodeImpl>();
      String newTitle = null;

      for(int i = 0; i < nodes.size(); i++) {
        NodeImpl node = nodes.get(i);
        if(node.getName() != Name.CONTENT) continue;
        if(builder.length() > 0) builder.append(INPUT_SEPARATOR);
        builder.append(node.getValue());
        contents.add(node);
        if(builder.length() > 300) {
          String value = translate(contents, builder, from, to, newTitle == null, indexBuilder);
          if(newTitle == null && value != null) newTitle = value;
          builder.setLength(0);
          contents.clear();
        }
      }
      if(builder.length() > 0) {
        String value = translate(contents, builder, from, to, newTitle == null, indexBuilder);
        if(newTitle == null && value != null) newTitle = value;
      }

      builder.setLength(0);
      for(int i = 0; i < nodes.size(); i++) {
        NodeImpl node = nodes.get(i);
        int type = node.getType();
        Name name = node.getName();
        boolean isTag = name != Name.CONTENT  && name != Name.COMMENT && name != Name.CODE_CONTENT;
        if(isTag) builder.append('<');
        if(type == TypeToken.CLOSE) builder.append('/');
        builder.append(node.getValue());
        if(isTag) builder.append('>');
        if(type == TypeToken.CLOSE || node.getConfig().hidden()) continue;
      }

      String [] values = null; 
      if(config.getMode() == TranslateMode.PARAGRAPH) {
        values = new String[] {
            "<i>" + title + "</i><br/><br/>" + newTitle, builder.toString() 
        };

      } else  if(config.getMode() == TranslateMode.COUPLE) {
        values = new String[] {
            newTitle + "<br/><br/><i>" + title + "</i>", 
            builder.toString() + "<br/><br/><br/><i>" + content + "</i>" 
        };
      } else {
        values = new String[]{newTitle, builder.toString()};
      }
      return values;
    } catch (Exception e) {
      LogService.getInstance().setThrowable(e);
      return null;
    }
  }

  //return title
  private String translate(List<NodeImpl> nodes, StringBuilder builder,
      String from, String to, boolean title, StringBuilder indexBuilder) throws Exception {
//    System.out.println("================================");
//    System.out.println(builder);
    String text = URLEncoder.encode(builder.toString(), "utf8");

    String uri = "http://api.microsofttranslator.com/v2/Http.svc/Translate?appId=" 
      + config.getApplicationId() +"&text=" + text;
    if(from != null && from.trim().length() > 0) {
      uri += "&from=" +  from;
    }

    if(to != null && to.trim().length() > 0) {
      uri += "&to=" + to;
    }

    //    System.out.println("translator: " +uri);

    text = cached.getCachedObject(uri);
    if(text == null || text.trim().length() < 1) {
      try {
        HttpGet httpGet = webClient.createGetMethod(uri, null);
        HttpHost httpHost = webClient.createHttpHost("http://api.microsofttranslator.com/");
        HttpResponse httpResponse = webClient.execute(httpHost, httpGet);
        byte [] bytes = reader.readBody(httpResponse);
        text = new String(bytes, "utf-8").trim();
        if(text.length() > 0) cached.putCachedObject(uri, text);
        if(indexBuilder.length() > 0) indexBuilder.append('\n'); 
        indexBuilder.append(text);
      } catch (Throwable e) {
        LogService.getInstance().setThrowable(e);
      }
    }
    
    if(text == null) return null;

    if(text.indexOf(translationStartTag) > -1) {
      text = text.substring(translationStartTag.length());
    }

    int idx = text.indexOf(translationEndTag); 
    if(idx > -1) {
      text = text.substring(0, idx);
    }

    RefsDecoder decoder = new RefsDecoder();
    text = new String(decoder.decode(text.toCharArray()));
    
//    System.out.println("------------------------");
//    System.out.println(text);
    
    String [] elements = text.split(OUTPUT_SEPARATOR);
    
    //    System.out.println("translator: " + elements.length + " : " + nodes.size() + " : " + title);
    int start = 0;
    if(title) start = 1;
    int index = 0;
//    System.out.println(" node size  "+ nodes.size() + " : " + elements.length);
    for(int i = start; i < elements.length; i++) {
//      System.out.println(i + "------------------------" + elements[i]);
      String value = null;
      if(config.getMode() == TranslateMode.PARAGRAPH) {
        value = "<i>" + new String(nodes.get(index).getValue()) + "</i>";
        value +=  " <br/><br/> " + elements[i];
      } else {
        value = elements[i];
      }
      nodes.get(index).setValue(value.toCharArray());
      index++;
      if(index >= nodes.size()) {
//        StringBuilder errorValue = new StringBuilder(elements[i]);
//        for(; i < elements.length; i++) {
//          errorValue.append("<br>").append(elements[i]);
//        }
//        nodes.get(index-1).setValue(errorValue.toString().toCharArray());
        break;
      }
    }
    if(!title) return null;
    if(elements.length > 0) return elements[0];
    return "";
  }

  private void createWebClient() {
    webClient = new WebClient();
    try {
      webClient.setURL(null, new URL("http://api.microsofttranslator.com/"));
    } catch (Exception e) {
      LogService.getInstance().setThrowable(e);
    }
    SystemProperties system = SystemProperties.getInstance();
    if("true".equalsIgnoreCase(system.getValue("proxy.enable"))) {
      String proxyHost = system.getValue("proxy.host");
      String proxyPort = system.getValue("proxy.port");
      String proxyUser = system.getValue("proxy.user");
      String proxyPassword = system.getValue("proxy.password");
      setProxy(proxyHost, proxyPort, proxyUser, proxyPassword);
    }
  }

  public void setProxy(String proxyHost, String proxyPort, String proxyUser, String proxyPassword) {
    if(proxyHost == null || proxyHost.trim().isEmpty()) return ;
    try {
      int intProxyPort = Integer.parseInt(proxyPort.trim());
      if(proxyUser != null && proxyUser.trim().isEmpty()) proxyUser = null;
      webClient.registryProxy(proxyHost, intProxyPort, proxyUser, proxyPassword);
    } catch (Exception e) {
      LogService.getInstance().setThrowable(e);
    }
  }
}
