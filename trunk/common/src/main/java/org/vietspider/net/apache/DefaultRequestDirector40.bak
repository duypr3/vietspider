package org.vietspider.net.apache;

/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
* ====================================================================
*
* This software consists of voluntary contributions made by many
* individuals on behalf of the Apache Software Foundation.  For more
* information on the Apache Software Foundation, please see
* <http://www.apache.org/>.
*
*/
import java.io.IOException;
import java.io.InputStream;
import java.io.InterruptedIOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.Locale;
import java.util.Map;
import java.util.concurrent.TimeUnit;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.http.ConnectionReuseStrategy;
import org.apache.http.Header;
import org.apache.http.HttpEntity;
import org.apache.http.HttpEntityEnclosingRequest;
import org.apache.http.HttpException;
import org.apache.http.HttpHost;
import org.apache.http.HttpRequest;
import org.apache.http.HttpResponse;
import org.apache.http.ProtocolException;
import org.apache.http.ProtocolVersion;
import org.apache.http.auth.AuthScheme;
import org.apache.http.auth.AuthScope;
import org.apache.http.auth.AuthState;
import org.apache.http.auth.AuthenticationException;
import org.apache.http.auth.Credentials;
import org.apache.http.auth.MalformedChallengeException;
import org.apache.http.client.AuthenticationHandler;
import org.apache.http.client.CredentialsProvider;
import org.apache.http.client.HttpRequestRetryHandler;
import org.apache.http.client.NonRepeatableRequestException;
import org.apache.http.client.RedirectException;
import org.apache.http.client.RedirectHandler;
import org.apache.http.client.RequestDirector;
import org.apache.http.client.UserTokenHandler;
import org.apache.http.client.methods.AbortableHttpRequest;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.params.ClientPNames;
import org.apache.http.client.params.HttpClientParams;
import org.apache.http.client.protocol.ClientContext;
import org.apache.http.client.utils.URIUtils;
import org.apache.http.conn.BasicManagedEntity;
import org.apache.http.conn.ClientConnectionManager;
import org.apache.http.conn.ClientConnectionRequest;
import org.apache.http.conn.ConnectionKeepAliveStrategy;
import org.apache.http.conn.ManagedClientConnection;
import org.apache.http.conn.params.ConnManagerParams;
import org.apache.http.conn.routing.BasicRouteDirector;
import org.apache.http.conn.routing.HttpRoute;
import org.apache.http.conn.routing.HttpRouteDirector;
import org.apache.http.conn.routing.HttpRoutePlanner;
import org.apache.http.conn.scheme.Scheme;
import org.apache.http.entity.BufferedHttpEntity;
import org.apache.http.impl.client.EntityEnclosingRequestWrapper;
import org.apache.http.impl.client.RequestWrapper;
import org.apache.http.impl.client.RoutedRequest;
import org.apache.http.impl.client.TunnelRefusedException;
import org.apache.http.message.BasicHeader;
import org.apache.http.message.BasicHttpRequest;
import org.apache.http.params.HttpConnectionParams;
import org.apache.http.params.HttpParams;
import org.apache.http.params.HttpProtocolParams;
import org.apache.http.protocol.ExecutionContext;
import org.apache.http.protocol.HttpContext;
import org.apache.http.protocol.HttpProcessor;
import org.apache.http.protocol.HttpRequestExecutor;

public class DefaultRequestDirector40 implements RequestDirector {

  private final Log log = LogFactory.getLog(getClass());

  protected final ClientConnectionManager connManager;

  protected final HttpRoutePlanner routePlanner;

  protected final ConnectionReuseStrategy reuseStrategy;

  protected final ConnectionKeepAliveStrategy keepAliveStrategy;

  protected final HttpRequestExecutor requestExec;

  protected final HttpProcessor httpProcessor;

  protected final HttpRequestRetryHandler retryHandler;

  protected final RedirectHandler redirectHandler;

  private final AuthenticationHandler targetAuthHandler;

  private final AuthenticationHandler proxyAuthHandler;

  private final UserTokenHandler userTokenHandler;

  protected final HttpParams _params;

  protected ManagedClientConnection managedConn;

  private int redirectCount;

  private int maxRedirects;

  private final AuthState targetAuthState;

  private final AuthState proxyAuthState;

  public DefaultRequestDirector40(
      final HttpRequestExecutor requestExec,
      final ClientConnectionManager conman,
      final ConnectionReuseStrategy reustrat,
      final ConnectionKeepAliveStrategy kastrat,
      final HttpRoutePlanner rouplan,
      final HttpProcessor httpProcessor,
      final HttpRequestRetryHandler retryHandler,
      final RedirectHandler redirectHandler,
      final AuthenticationHandler targetAuthHandler,
      final AuthenticationHandler proxyAuthHandler,
      final UserTokenHandler userTokenHandler,
      final HttpParams params) {

    if (requestExec == null) {
      throw new IllegalArgumentException("Request executor may not be null.");
    }
    if (conman == null) {
      throw new IllegalArgumentException("Client connection manager may not be null.");
    }
    if (reustrat == null) {
      throw new IllegalArgumentException("Connection reuse strategy may not be null.");
    }
    if (kastrat == null) {
      throw new IllegalArgumentException ("Connection keep alive strategy may not be null.");
    }
    if (rouplan == null) {
      throw new IllegalArgumentException("Route planner may not be null.");
    }
    if (httpProcessor == null) {
      throw new IllegalArgumentException("HTTP protocol processor may not be null.");
    }
    if (retryHandler == null) {
      throw new IllegalArgumentException("HTTP request retry handler may not be null.");
    }
    if (redirectHandler == null) {
      throw new IllegalArgumentException("Redirect handler may not be null.");
    }
    if (targetAuthHandler == null) {
      throw new IllegalArgumentException("Target authentication handler may not be null.");
    }
    if (proxyAuthHandler == null) {
      throw new IllegalArgumentException("Proxy authentication handler may not be null.");
    }
    if (userTokenHandler == null) {
      throw new IllegalArgumentException("User token handler may not be null.");
    }
    if (params == null) {
      throw new IllegalArgumentException("HTTP parameters may not be null");
    }
    this.requestExec       = requestExec;
    this.connManager       = conman;
    this.reuseStrategy     = reustrat;
    this.keepAliveStrategy = kastrat;
    this.routePlanner      = rouplan;
    this.httpProcessor     = httpProcessor;
    this.retryHandler      = retryHandler;
    this.redirectHandler   = redirectHandler;
    this.targetAuthHandler = targetAuthHandler;
    this.proxyAuthHandler  = proxyAuthHandler;
    this.userTokenHandler  = userTokenHandler; 
    this._params            = params;

    this.managedConn       = null;

    this.redirectCount = 0;
    this.maxRedirects = this._params.getIntParameter(ClientPNames.MAX_REDIRECTS, 100);
    this.targetAuthState = new AuthState();
    this.proxyAuthState = new AuthState();
  } 


  private RequestWrapper wrapRequest(final HttpRequest request) throws ProtocolException {
    if (request instanceof HttpEntityEnclosingRequest) {
      return new EntityEnclosingRequestWrapper((HttpEntityEnclosingRequest) request);
    } 
    return new RequestWrapper(request);
  }


  protected void rewriteRequestURI(final RequestWrapper request,final HttpRoute route) throws ProtocolException {
    try {
      URI uri = request.getURI();
      if (route.getProxyHost() != null && !route.isTunnelled()) {
        // Make sure the request URI is absolute
        if (!uri.isAbsolute()) {
          HttpHost target = route.getTargetHost();
          uri = URIUtils.rewriteURI(uri, target);
          request.setURI(uri);
        }
      } else {
        // Make sure the request URI is relative
        if (uri.isAbsolute()) {
          uri = URIUtils.rewriteURI(uri, null);
          request.setURI(uri);
        }
      }

    } catch (URISyntaxException ex) {
      throw new ProtocolException("Invalid URI: " + request.getRequestLine().getUri(), ex);
    }
  }

  public HttpResponse execute(HttpHost target, 
      HttpRequest request, HttpContext context) throws HttpException, IOException {
    HttpRequest orig = request;
    RequestWrapper origWrapper = wrapRequest(orig);
    origWrapper.setParams(_params);
    HttpRoute origRoute = determineRoute(target, origWrapper, context);

    RoutedRequest roureq = new RoutedRequest(origWrapper, origRoute); 

    long timeout = ConnManagerParams.getTimeout(_params);

    int execCount = 0;

    boolean reuse = false;
    HttpResponse response = null;
    boolean done = false;
    try {
      while (!done) {
        RequestWrapper wrapper = roureq.getRequest();
        HttpRoute route = roureq.getRoute();

        Object userToken = context.getAttribute(ClientContext.USER_TOKEN);

        if (managedConn == null) {
          ClientConnectionRequest connRequest = connManager.requestConnection(route, userToken);
          if (orig instanceof AbortableHttpRequest) {
            ((AbortableHttpRequest) orig).setConnectionRequest(connRequest);
          }

          try {
            managedConn = connRequest.getConnection(timeout, TimeUnit.MILLISECONDS);
          } catch(InterruptedException interrupted) {
            InterruptedIOException iox = new InterruptedIOException();
            iox.initCause(interrupted);
            throw iox;
          }

          if (HttpConnectionParams.isStaleCheckingEnabled(_params)) {
            // validate connection
            if (managedConn.isOpen()) {
              this.log.debug("Stale connection check");
              if (managedConn != null  && managedConn.isStale()) {
                this.log.debug("Stale connection detected");
                managedConn.close();
              }
            }
          }
        }

        if (orig instanceof AbortableHttpRequest) {
          ((AbortableHttpRequest) orig).setReleaseTrigger(managedConn);
        }

        if (managedConn != null && !managedConn.isOpen()) {
          managedConn.open(route, context, _params);
        }

        try {
          establishRoute(route, context);
        } catch (TunnelRefusedException ex) {
          if (this.log.isDebugEnabled()) this.log.debug(ex.getMessage());
          response = ex.getResponse();
          break;
        }

        wrapper.resetHeaders();

        rewriteRequestURI(wrapper, route);

        target = (HttpHost) wrapper.getParams().getParameter(ClientPNames.VIRTUAL_HOST);

        if (target == null) target = route.getTargetHost();
        
        HttpHost proxy = route.getProxyHost();

        // Populate the execution context
        context.setAttribute(ExecutionContext.HTTP_TARGET_HOST, target);
        context.setAttribute(ExecutionContext.HTTP_PROXY_HOST, proxy);
        context.setAttribute(ExecutionContext.HTTP_CONNECTION, managedConn);
        context.setAttribute(ClientContext.TARGET_AUTH_STATE, targetAuthState);
        context.setAttribute(ClientContext.PROXY_AUTH_STATE, proxyAuthState);
        context.setAttribute(ExecutionContext.HTTP_REQUEST, wrapper);

        // Run request protocol interceptors
        requestExec.preProcess(wrapper, httpProcessor, context);

        boolean retrying = true;
        while (retrying) {
          // Increment total exec count (with redirects)
          execCount++;
          // Increment exec count for this particular request
          wrapper.incrementExecCount();
          if (wrapper.getExecCount() > 1 && !wrapper.isRepeatable()) {
            throw new NonRepeatableRequestException(
                "Cannot retry request with a non-repeatable request entity");
          }

          try {
            if (this.log.isDebugEnabled()) {
              this.log.debug("Attempt " + execCount + " to execute request");
            }
//            System.out.println(requestExec);
            response = requestExec.execute(wrapper, managedConn, context);
            retrying = false;
          } catch (IOException ex) {
            this.log.debug("Closing the connection.");
            if(managedConn != null) managedConn.close();
            if (retryHandler.retryRequest(ex, execCount, context)) {
              if (this.log.isInfoEnabled()) {
                this.log.info("I/O exception ("+ ex.getClass().getName() + 
                    ") caught when processing request: " + ex.getMessage());
              }
              if (this.log.isDebugEnabled()) this.log.debug(ex.getMessage(), ex);
              this.log.info("Retrying request");
            } else {
              throw ex;
            }

            if (route.getHopCount() == 1) {
              this.log.debug("Reopening the direct connection.");
              if(managedConn != null) managedConn.open(route, context, _params);
            } else {
              this.log.debug("Proxied connection. Need to start over.");
              retrying = false;
            }

          }

        }

        if (response == null) continue;

        // Run response protocol interceptors
        response.setParams(_params);
        requestExec.postProcess(response, httpProcessor, context);

        // The connection is in or can be brought to a re-usable state.
        reuse = reuseStrategy.keepAlive(response, context);
        if (reuse) {
          // Set the idle duration of this connection
          long duration = keepAliveStrategy.getKeepAliveDuration(response, context);
          managedConn.setIdleDuration(duration, TimeUnit.MILLISECONDS);

          if (this.log.isDebugEnabled()) {
            this.log.debug("Connection can be kept alive for " + duration + " ms");
          }
        }

        RoutedRequest followup = handleResponse(roureq, response, context);
        if (followup == null) {
          done = true;
        } else {
          if (reuse) {
            // Make sure the response body is fully consumed, if present
            HttpEntity entity = response.getEntity();
            if (entity != null) entity.consumeContent();
            // entity consumed above is not an auto-release entity,
            // need to mark the connection re-usable explicitly
            if(managedConn != null) managedConn.markReusable();
          } else {
            if(managedConn != null) managedConn.close();
          }
          // check if we can use the same connection for the followup
          if (!followup.getRoute().equals(roureq.getRoute())) releaseConnection();
          roureq = followup;
        }

        userToken = this.userTokenHandler.getUserToken(context);
        context.setAttribute(ClientContext.USER_TOKEN, userToken);
        if (managedConn != null) {
          managedConn.setState(userToken);
        }
      } // while not done

      if ((response == null) || (response.getEntity() == null) || !response.getEntity().isStreaming()) {
        if (reuse) managedConn.markReusable();
        releaseConnection();
      } else {
        HttpEntity entity = response.getEntity();
        entity = new BasicManagedEntity(entity, managedConn, reuse) {
          public InputStream getContent() throws IOException {
            return new EofSensorInputStream(wrappedEntity.getContent(), this);
        }
        };
        response.setEntity(entity);
      }
      return response;
    } catch (HttpException ex) {
      abortConnection();
      throw ex;
    } catch (IOException ex) {
      abortConnection();
      throw ex;
    } catch (RuntimeException ex) {
      abortConnection();
      throw ex;
    }
  } // execute

  public void releaseConnection() {
    if(managedConn == null) return;
    try {
      managedConn.releaseConnection();
    } catch(IOException ignored) {
      this.log.debug("IOException releasing connection", ignored);
    }
    managedConn = null;
  }

  protected HttpRoute determineRoute(HttpHost target,
      HttpRequest request, HttpContext context) throws HttpException {

    if (target == null) {
      target = (HttpHost) request.getParams().getParameter(ClientPNames.DEFAULT_HOST);
    }
    
    if (target == null) {
      throw new IllegalStateException("Target host must not be null, or set in parameters.");
    }

    return this.routePlanner.determineRoute(target, request, context);
  }

  protected void establishRoute(HttpRoute route, HttpContext context) throws HttpException, IOException {
    HttpRouteDirector rowdy = new BasicRouteDirector();
    int step;
    do {
      HttpRoute fact = managedConn.getRoute();
      step = rowdy.nextStep(route, fact);

      switch (step) {

      case HttpRouteDirector.CONNECT_TARGET:
      case HttpRouteDirector.CONNECT_PROXY:
        managedConn.open(route, context, this._params);
        break;

      case HttpRouteDirector.TUNNEL_TARGET: {
        boolean secure = createTunnelToTarget(route, context);
        this.log.debug("Tunnel to target created.");
        managedConn.tunnelTarget(secure, this._params);
      }   break;

      case HttpRouteDirector.TUNNEL_PROXY: {
        final int hop = fact.getHopCount()-1; // the hop to establish
        boolean secure = createTunnelToProxy(route, hop, context);
        this.log.debug("Tunnel to proxy created.");
        managedConn.tunnelProxy(route.getHopTarget(hop), secure, this._params);
      }  break;


      case HttpRouteDirector.LAYER_PROTOCOL:
        managedConn.layerProtocol(context, this._params);
        break;

      case HttpRouteDirector.UNREACHABLE:
        throw new IllegalStateException("Unable to establish route." + "\nplanned = " + route + "\ncurrent = " + fact);

      case HttpRouteDirector.COMPLETE:
        // do nothing
        break;

      default:
        throw new IllegalStateException ("Unknown step indicator "+step+" from RouteDirector.");
      } // switch

    } while (step > HttpRouteDirector.COMPLETE);

  } // establishConnection


  protected boolean createTunnelToTarget(HttpRoute route, HttpContext context) throws HttpException, IOException {
    HttpHost proxy = route.getProxyHost();
    HttpHost target = route.getTargetHost();
    HttpResponse response = null;

    boolean done = false;
    while (!done) {
      done = true;
      if (!this.managedConn.isOpen()) {
        this.managedConn.open(route, context, this._params);
      }

      HttpRequest connect = createConnectRequest(route, context);
      connect.setParams(this._params);

      // Populate the execution context
      context.setAttribute(ExecutionContext.HTTP_TARGET_HOST, target);
      context.setAttribute(ExecutionContext.HTTP_PROXY_HOST, proxy);
      context.setAttribute(ExecutionContext.HTTP_CONNECTION, managedConn);
      context.setAttribute(ClientContext.TARGET_AUTH_STATE, targetAuthState);
      context.setAttribute(ClientContext.PROXY_AUTH_STATE, proxyAuthState);
      context.setAttribute(ExecutionContext.HTTP_REQUEST, connect);

      this.requestExec.preProcess(connect, this.httpProcessor, context);

      response = this.requestExec.execute(connect, this.managedConn, context);

      response.setParams(this._params);
      this.requestExec.postProcess(response, this.httpProcessor, context);

      int status = response.getStatusLine().getStatusCode();
      if (status < 200) {
        throw new HttpException("Unexpected response to CONNECT request: " + response.getStatusLine());
      }

      CredentialsProvider credsProvider = (CredentialsProvider)
      context.getAttribute(ClientContext.CREDS_PROVIDER);

      if (credsProvider != null && HttpClientParams.isAuthenticating(_params)) {
        if (this.proxyAuthHandler.isAuthenticationRequested(response, context)) {

          this.log.debug("Proxy requested authentication");
          Map<String, Header> challenges = this.proxyAuthHandler.getChallenges(response, context);
          try {
            processChallenges(challenges, this.proxyAuthState, this.proxyAuthHandler, response, context);
          } catch (AuthenticationException ex) {
            if (this.log.isWarnEnabled()) {
              this.log.warn("Authentication error: " +  ex.getMessage());
              break;
            }
          }
          updateAuthState(this.proxyAuthState, proxy, credsProvider);

          if (this.proxyAuthState.getCredentials() != null) {
            done = false;

            // Retry request
            if (this.reuseStrategy.keepAlive(response, context)) {
              this.log.debug("Connection kept alive");
              // Consume response content
              HttpEntity entity = response.getEntity();
              if (entity != null) entity.consumeContent();
            } else {
              this.managedConn.close();
            }

          }

        } else {
          this.proxyAuthState.setAuthScope(null);
        }
      }
    }

    int status = response.getStatusLine().getStatusCode();

    if (status > 299) {
      HttpEntity entity = response.getEntity();
      if (entity != null) {
        response.setEntity(new BufferedHttpEntity(entity));
      }                

      this.managedConn.close();
      throw new TunnelRefusedException("CONNECT refused by proxy: " + response.getStatusLine(), response);
    }
    this.managedConn.markReusable();
    return false;
  } 


  @SuppressWarnings("unused")
  protected boolean createTunnelToProxy(HttpRoute route, int hop, HttpContext context) throws HttpException, IOException {
    throw new UnsupportedOperationException ("Proxy chains are not supported.");
  }

  @SuppressWarnings("unused")
  protected HttpRequest createConnectRequest(HttpRoute route, HttpContext context) {
    HttpHost target = route.getTargetHost();

    String host = target.getHostName();
    int port = target.getPort();
    if (port < 0) {
      Scheme scheme = connManager.getSchemeRegistry().
      getScheme(target.getSchemeName());
      port = scheme.getDefaultPort();
    }

    StringBuilder buffer = new StringBuilder(host.length() + 6);
    buffer.append(host);
    buffer.append(':');
    buffer.append(Integer.toString(port));

    String authority = buffer.toString();
    ProtocolVersion ver = HttpProtocolParams.getVersion(_params);
    HttpRequest req = new BasicHttpRequest ("CONNECT", authority, ver);

    return req;
  }

  protected RoutedRequest handleResponse(RoutedRequest roureq,
      HttpResponse response, HttpContext context) throws HttpException {

    HttpRoute route = roureq.getRoute();
    HttpHost proxy = route.getProxyHost();
    RequestWrapper request = roureq.getRequest();

    HttpParams params = request.getParams();
    if (HttpClientParams.isRedirecting(params) && 
        this.redirectHandler.isRedirectRequested(response, context)) {

      if (redirectCount >= maxRedirects) {
        throw new RedirectException("Maximum redirects ("+ maxRedirects + ") exceeded");
      }
      redirectCount++;

      URI uri = this.redirectHandler.getLocationURI(response, context);

      HttpHost newTarget = new HttpHost(uri.getHost(), uri.getPort(), uri.getScheme());
      HttpGet redirect = new HttpGet(uri);
      HttpRequest orig = request.getOriginal();
      //          redirect.setHeaders(orig.getAllHeaders());
      //VietSpider fix bug
      Header [] headers = orig.getAllHeaders();
      for(Header header : headers) {
        if("host".equalsIgnoreCase(header.getName())) {
          redirect.addHeader(new BasicHeader("Host", uri.getHost()));
        } else {
          redirect.addHeader(header);
        }
      }

      RequestWrapper wrapper = new RequestWrapper(redirect);
      wrapper.setParams(params);

      HttpRoute newRoute = determineRoute(newTarget, wrapper, context);
      RoutedRequest newRequest = new RoutedRequest(wrapper, newRoute);

      if (this.log.isDebugEnabled()) {
        this.log.debug("Redirecting to '" + uri + "' via " + newRoute);
      }

      return newRequest;
    }

    CredentialsProvider credsProvider = (CredentialsProvider)
    context.getAttribute(ClientContext.CREDS_PROVIDER);

    if (credsProvider != null && HttpClientParams.isAuthenticating(params)) {
      if (this.targetAuthHandler.isAuthenticationRequested(response, context)) {
        HttpHost target = (HttpHost)
        context.getAttribute(ExecutionContext.HTTP_TARGET_HOST);
        if (target == null) {
          target = route.getTargetHost();
        }

        this.log.debug("Target requested authentication");
        Map<String, Header> challenges = this.targetAuthHandler.getChallenges(response, context); 
        try {
          processChallenges(challenges, this.targetAuthState, this.targetAuthHandler, response, context);
        } catch (AuthenticationException ex) {
          if (this.log.isWarnEnabled()) {
            this.log.warn("Authentication error: " +  ex.getMessage());
            return null;
          }
        }
        updateAuthState(this.targetAuthState, target, credsProvider);

        return (this.targetAuthState.getCredentials() != null)  ? roureq : null;
      } 
      // Reset target auth scope
      this.targetAuthState.setAuthScope(null);

      if (this.proxyAuthHandler.isAuthenticationRequested(response, context)) {

        this.log.debug("Proxy requested authentication");
        Map<String, Header> challenges = this.proxyAuthHandler.getChallenges(response, context);
        try {
          processChallenges(challenges, this.proxyAuthState, this.proxyAuthHandler, response, context);
        } catch (AuthenticationException ex) {
          if (this.log.isWarnEnabled()) {
            this.log.warn("Authentication error: " +  ex.getMessage());
            return null;
          }
        }
        updateAuthState(this.proxyAuthState, proxy, credsProvider);
        return (this.proxyAuthState.getCredentials() != null)  ? roureq : null;
      } 
      this.proxyAuthState.setAuthScope(null);
    }
    return null;
  } // handleResponse


  public void abortConnection() {
    ManagedClientConnection mcc = managedConn;
    if (mcc == null) return;
    managedConn = null;
    try {
      mcc.abortConnection();
    } catch (IOException ex) {
      if (this.log.isDebugEnabled()) this.log.debug(ex.getMessage(), ex);
    }
    // ensure the connection manager properly releases this connection
    try {
      mcc.releaseConnection();
    } catch(IOException ignored) {
      this.log.debug("Error releasing connection", ignored);
    }
  } // abortConnection

  private void processChallenges(
      final Map<String, Header> challenges, 
      final AuthState authState,
      final AuthenticationHandler authHandler,
      final HttpResponse response, 
      final HttpContext context) throws MalformedChallengeException, AuthenticationException {

    AuthScheme authScheme = authState.getAuthScheme();
    if (authScheme == null) {
      // Authentication not attempted before
      authScheme = authHandler.selectScheme(challenges, response, context);
      authState.setAuthScheme(authScheme);
    }
    String id = authScheme.getSchemeName();

    Header challenge = challenges.get(id.toLowerCase(Locale.ENGLISH));
    if (challenge == null) {
      throw new AuthenticationException(id + " authorization challenge expected, but not found");
    }
    authScheme.processChallenge(challenge);
    this.log.debug("Authorization challenge processed");
  }


  private void updateAuthState(final AuthState authState,
      final HttpHost host, final CredentialsProvider credsProvider) {
    if (!authState.isValid()) return;
    String hostname = host.getHostName();
    int port = host.getPort();
    if (port < 0) {
      Scheme scheme = connManager.getSchemeRegistry().getScheme(host);
      port = scheme.getDefaultPort();
    }

    AuthScheme authScheme = authState.getAuthScheme();
    AuthScope authScope = new AuthScope(hostname, port, authScheme.getRealm(), authScheme.getSchemeName());  

    if (this.log.isDebugEnabled()) this.log.debug("Authentication scope: " + authScope);

    Credentials creds = authState.getCredentials();
    if (creds == null) {
      creds = credsProvider.getCredentials(authScope);
      if (this.log.isDebugEnabled()) {
        this.log.debug(creds != null ? "Found credentials" : "Credentials not found");
      }
    } else {
      if (authScheme.isComplete()) {
        this.log.debug("Authentication failed");
        creds = null;
      }
    }
    authState.setAuthScope(authScope);
    authState.setCredentials(creds);
  }

} // class DefaultClientRequestDirector
