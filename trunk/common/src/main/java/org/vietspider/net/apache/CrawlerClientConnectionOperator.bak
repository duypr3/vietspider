/***************************************************************************
 * Copyright 2001-2009 The VietSpider         All rights reserved.  		 *
 **************************************************************************/
package org.vietspider.net.apache;

import java.io.IOException;
import java.net.ConnectException;
import java.net.InetAddress;
import java.net.Socket;

import org.apache.http.HttpHost;
import org.apache.http.conn.ClientConnectionOperator;
import org.apache.http.conn.HttpHostConnectException;
import org.apache.http.conn.OperatedClientConnection;
import org.apache.http.conn.scheme.LayeredSocketFactory;
import org.apache.http.conn.scheme.Scheme;
import org.apache.http.conn.scheme.SchemeRegistry;
import org.apache.http.conn.scheme.SocketFactory;
import org.apache.http.impl.conn.DefaultClientConnection;
import org.apache.http.params.HttpConnectionParams;
import org.apache.http.params.HttpParams;
import org.apache.http.protocol.HttpContext;

/** 
 * Author : Nhu Dinh Thuan
 *          nhudinhthuan@yahoo.com
 * Oct 19, 2009  
 */
public class CrawlerClientConnectionOperator implements ClientConnectionOperator {

  protected SchemeRegistry schemeRegistry;
  
  public CrawlerClientConnectionOperator(SchemeRegistry schemes) {
    if (schemes == null) {
      throw new IllegalArgumentException ("Scheme registry must not be null.");
    }
    schemeRegistry = schemes;
  }

  public OperatedClientConnection createConnection() {
    return new CrawlerClientConnection();
  }

  public void openConnection(OperatedClientConnection conn,
      HttpHost target,
      InetAddress local,
      HttpContext context,
      HttpParams params)
  throws IOException {

    if (conn == null) {
      throw new IllegalArgumentException
      ("Connection must not be null.");
    }
    if (target == null) {
      throw new IllegalArgumentException ("Target host must not be null.");
    }
    
    if (params == null) {
      throw new IllegalArgumentException
      ("Parameters must not be null.");
    }
    if (conn.isOpen()) {
      throw new IllegalArgumentException
      ("Connection must not be open.");
    }

    final Scheme schm = schemeRegistry.getScheme(target.getSchemeName());
    final SocketFactory sf = schm.getSocketFactory();

    Socket sock = sf.createSocket();
    conn.opening(sock, target);

    try {
      sock = sf.connectSocket(sock, target.getHostName(),
          schm.resolvePort(target.getPort()),
          local, 0, params);
    } catch (ConnectException ex) {
      throw new HttpHostConnectException(target, ex);
    }
    prepareSocket(sock, context, params);
    conn.openCompleted(sf.isSecure(sock), params);
  } // openConnection


  // non-javadoc, see interface ClientConnectionOperator
  public void updateSecureConnection(OperatedClientConnection conn,
      HttpHost target,
      HttpContext context,
      HttpParams params)
  throws IOException {


    if (conn == null) {
      throw new IllegalArgumentException
      ("Connection must not be null.");
    }
    if (target == null) {
      throw new IllegalArgumentException
      ("Target host must not be null.");
    }
    //@@@ is context allowed to be null?
    if (params == null) {
      throw new IllegalArgumentException
      ("Parameters must not be null.");
    }
    if (!conn.isOpen()) {
      throw new IllegalArgumentException
      ("Connection must be open.");
    }

    final Scheme schm = schemeRegistry.getScheme(target.getSchemeName());
    if (!(schm.getSocketFactory() instanceof LayeredSocketFactory)) {
      throw new IllegalArgumentException
      ("Target scheme (" + schm.getName() +
      ") must have layered socket factory.");
    }

    final LayeredSocketFactory lsf = (LayeredSocketFactory) schm.getSocketFactory();
    final Socket sock; 
    try {
      sock = lsf.createSocket
      (conn.getSocket(), target.getHostName(), target.getPort(), true);
    } catch (ConnectException ex) {
      throw new HttpHostConnectException(target, ex);
    }
    prepareSocket(sock, context, params);
    conn.update(sock, target, lsf.isSecure(sock), params);
    //@@@ error handling: close the layered socket in case of exception?

  } // updateSecureConnection


  /**
   * Performs standard initializations on a newly created socket.
   *
   * @param sock      the socket to prepare
   * @param context   the context for the connection
   * @param params    the parameters from which to prepare the socket
   *
   * @throws IOException      in case of an IO problem
   */
  protected void prepareSocket(Socket sock, HttpContext context,
      HttpParams params)
  throws IOException {

    // context currently not used, but derived classes may need it
    //@@@ is context allowed to be null?

    sock.setTcpNoDelay(HttpConnectionParams.getTcpNoDelay(params));
    sock.setSoTimeout(HttpConnectionParams.getSoTimeout(params));

    int linger = HttpConnectionParams.getLinger(params);
    if (linger >= 0) {
      sock.setSoLinger(linger > 0, linger);
    }

  } // prepareSocket


} // class DefaultClientConnectionOperator