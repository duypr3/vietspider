/***************************************************************************
 * Copyright 2001-2008 The VietSpider         All rights reserved.  		 *
 **************************************************************************/
package org.vietspider.net.client;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.EOFException;
import java.io.IOException;
import java.io.InputStream;
import java.util.zip.GZIPInputStream;
import java.util.zip.Inflater;
import java.util.zip.InflaterInputStream;

import org.apache.http.Header;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.vietspider.common.io.LogWebsite;

/** 
 * Author : Nhu Dinh Thuan
 *          nhudinhthuan@yahoo.com
 * Apr 15, 2008  
 */
public class HttpResponseReaderBak {

  private static final long BIG_SIZE = 1024*1024l + 521*1024l; 
  
  public final static String CONTENT_LENGTH = "Content-Length";
  
  public byte[] readBody(HttpResponse httpResponse) throws Exception  {
    HttpEntity entity = httpResponse.getEntity();
    if(entity == null) return null;
    Header header = httpResponse.getFirstHeader(CONTENT_LENGTH);
    byte [] bytes = readBody(entity, header);
    
    if(bytes == null || bytes.length < 1) return bytes;
    return decodeResponse(bytes, entity.getContentEncoding());
  }
  
  public byte[] readBody(HttpEntity entity, Header header) throws Exception  {
    if(header == null) return readBody(entity.getContent());
    String value = header.getValue();
    if(value == null) return readBody(entity.getContent());

    long length = -1l;
    try {
      length = Long.parseLong(value.trim());
    } catch (Exception e) {
      length = -1;
    }
    if(length >= BIG_SIZE || length == 0) return null;
    
    if(length > 0) return readBody(entity.getContent(), length);

    return readBody(entity.getContent()); 
  }

  private byte[] readBody(InputStream input, long bodySize) throws Exception {
    ByteArrayOutputStream output = new ByteArrayOutputStream();
    try {
      int read = 0;
      byte [] bytes = new byte[8*1024];
      
      while ((read = input.read(bytes)) > -1) {
        output.write(bytes, 0, read);
        if(output.size() >= bodySize) break ;
      }
      
      if(output.size() >= BIG_SIZE) output.reset();

      input.close();
    } catch (IllegalStateException e) {
      throw e;
    } catch (IOException e) {
      throw e;
    } finally {
      try {
        if(input != null) input.close();
      } catch (Exception e) {
        LogWebsite.getInstance().setThrowable(e);
      }

      try {
        output.close();
      } catch (Exception e) {
        LogWebsite.getInstance().setThrowable(e);
      }
    }

    byte [] bytes  = output.toByteArray();
    output.flush();
    output.close();
    return bytes;
  }
  
  private byte[] readBody(InputStream input) throws Exception {
    ByteArrayOutputStream output = new ByteArrayOutputStream();
    try {
      int read = 0;
      byte [] bytes = new byte[8*1024];
      
      while ((read = input.read(bytes)) > -1) {
        output.write(bytes, 0, read);
      }
      if(output.size() >= BIG_SIZE) output.reset();

      input.close();
    } catch (IllegalStateException e) {
      throw e;
    } catch (IOException e) {
      throw e;
    } finally {
      try {
        if(input != null) input.close();
      } catch (Exception e) {
        LogWebsite.getInstance().setThrowable(e);
      }

      try {
        output.close();
      } catch (Exception e) {
        LogWebsite.getInstance().setThrowable(e);
      }
    }

    byte [] bytes  = output.toByteArray();
    output.flush();
    output.close();
    return bytes;
  }
  
  public byte[] decodeResponse (final byte[] bytes, Header header) throws IOException {
    if(header == null) return bytes;
    String encoding = header.getValue();
    if(encoding == null || (encoding = encoding.trim()).isEmpty()) return bytes;

    InputStream encodedStream = null;

    // GZIP
    if (encoding.equals ("gzip")) {
      encodedStream = new GZIPInputStream(new ByteArrayInputStream(bytes));
    }

    // DEFLATE
    else if (encoding.equals ("deflate")) {
      encodedStream = new InflaterInputStream(new ByteArrayInputStream (bytes), new Inflater(true));
//    encodedStream = new ZipInputStream(new ByteArrayInputStream (responseBytes));
    }

    final ByteArrayOutputStream decodedStream = new ByteArrayOutputStream ();
    final byte buffer[] = new byte[1024];

    try {
      for (int length; (length = encodedStream.read(buffer, 0, 1024)) != -1;) {
        decodedStream.write(buffer, 0, length);
      }
    } catch (EOFException e) {
      LogWebsite.getInstance().setMessage(e, "WebClient 130: ");
    }catch (Exception e) {
      LogWebsite.getInstance().setThrowable(e);
    }

    // closing
    if(encodedStream != null) encodedStream.close ();
    decodedStream.close ();

    if(decodedStream.size() < 1) return bytes;
    return decodedStream.toByteArray ();
  }
  
 /* private class TimeoutMonitor extends Thread {

    private volatile long timeout = -1;

    private TimeoutMonitor(long time) {
      this.timeout = time*1000;
      start();
    }

    private void setTimeout(long time) {
      this.timeout = time*1000;
    }

    public void run() {
      while(true) {
        try {
          Thread.sleep(500);
        } catch (Exception e) {
        }
        if(timeout == -1 || start < 1) continue;
        long current = System.currentTimeMillis();
//        long time = (current - start)/1000;
//        System.out.println(" thoi gian bi mat la " + time);
        if(current - start < timeout) continue;
        new Thread() {
          public void run () {
//            if(httpRequest != null) httpRequest.abort();
          }
        }.start();
        start = -1;
      }
    }

  }*/

}
