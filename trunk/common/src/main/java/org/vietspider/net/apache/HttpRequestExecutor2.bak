package org.vietspider.net.apache;

import java.io.IOException;
import java.net.ProtocolException;

import org.apache.http.HttpClientConnection;
import org.apache.http.HttpEntityEnclosingRequest;
import org.apache.http.HttpException;
import org.apache.http.HttpRequest;
import org.apache.http.HttpResponse;
import org.apache.http.HttpStatus;
import org.apache.http.HttpVersion;
import org.apache.http.ProtocolVersion;
import org.apache.http.params.CoreProtocolPNames;
import org.apache.http.protocol.ExecutionContext;
import org.apache.http.protocol.HttpContext;
import org.apache.http.protocol.HttpProcessor;

public class HttpRequestExecutor2 extends org.apache.http.protocol.HttpRequestExecutor {

  public HttpRequestExecutor2() {
    super();
  }

  protected boolean canResponseHaveBody(final HttpRequest request, final HttpResponse response) {
    if ("HEAD".equalsIgnoreCase(request.getRequestLine().getMethod())) return false;
    int status = response.getStatusLine().getStatusCode(); 
    return status >= HttpStatus.SC_OK 
    && status != HttpStatus.SC_NO_CONTENT 
    && status != HttpStatus.SC_NOT_MODIFIED
    && status != HttpStatus.SC_RESET_CONTENT; 
  }
   
  public HttpResponse execute( final HttpRequest request,
      final HttpClientConnection conn, final HttpContext context) throws IOException, HttpException {
    if (request == null) {
      throw new IllegalArgumentException("HTTP request may not be null");
    }
    if (conn == null) {
      throw new IllegalArgumentException("Client connection may not be null");
    }
    if (context == null) {
      throw new IllegalArgumentException("HTTP context may not be null");
    }

    try {
      HttpResponse response = doSendRequest(request, conn, context);
      if (response == null) {
        response = doReceiveResponse(request, conn, context);
      }
      return response;
    } catch (IOException ex) {
      conn.close();
      throw ex;
    } catch (HttpException ex) {
      conn.close();
      throw ex;
    } catch (RuntimeException ex) {
      conn.close();
      throw ex;
    }
  }

  public void preProcess(final HttpRequest request,
      final HttpProcessor processor, final HttpContext context) throws HttpException, IOException {
    if (request == null) {
      throw new IllegalArgumentException("HTTP request may not be null");
    }
    if (processor == null) {
      throw new IllegalArgumentException("HTTP processor may not be null");
    }
    if (context == null) {
      throw new IllegalArgumentException("HTTP context may not be null");
    }
    context.setAttribute(ExecutionContext.HTTP_REQUEST, request);
    processor.process(request, context);
  }

  protected HttpResponse doSendRequest(final HttpRequest request,
      final HttpClientConnection conn, final HttpContext context) throws IOException, HttpException {
    if (request == null) {
      throw new IllegalArgumentException("HTTP request may not be null");
    }
    if (conn == null) {
      throw new IllegalArgumentException("HTTP connection may not be null");
    }
    if (context == null) {
      throw new IllegalArgumentException("HTTP context may not be null");
    }

    HttpResponse response = null;

    context.setAttribute(ExecutionContext.HTTP_CONNECTION, conn);
    context.setAttribute(ExecutionContext.HTTP_REQ_SENT, Boolean.FALSE);

    conn.sendRequestHeader(request);
    if (request instanceof HttpEntityEnclosingRequest) {
      // Check for expect-continue handshake. We have to flush the
      // headers and wait for an 100-continue response to handle it.
      // If we get a different response, we must not send the entity.
      boolean sendentity = true;
      final ProtocolVersion ver =
        request.getRequestLine().getProtocolVersion();
      if (((HttpEntityEnclosingRequest) request).expectContinue() && !ver.lessEquals(HttpVersion.HTTP_1_0)) {

        conn.flush();
        // As suggested by RFC 2616 section 8.2.3, we don't wait for a
        // 100-continue response forever. On timeout, send the entity.
        int tms = request.getParams().getIntParameter(
            CoreProtocolPNames.WAIT_FOR_CONTINUE, 2000);

        if (conn.isResponseAvailable(tms)) {
          response = conn.receiveResponseHeader();
          if (canResponseHaveBody(request, response)) {
            conn.receiveResponseEntity(response);
          }
          int status = response.getStatusLine().getStatusCode();
          if (status < 200) {
            if (status != HttpStatus.SC_CONTINUE) {
              throw new ProtocolException("Unexpected response: " + response.getStatusLine());
            }
            // discard 100-continue
            response = null;
          } else {
            sendentity = false;
          }
        }
      }
      if (sendentity) {
        conn.sendRequestEntity((HttpEntityEnclosingRequest) request);
      }
    }
    conn.flush();
    context.setAttribute(ExecutionContext.HTTP_REQ_SENT, Boolean.TRUE);
    return response;
  } 

  protected HttpResponse doReceiveResponse( final HttpRequest request, 
      final HttpClientConnection conn, final HttpContext context)  throws HttpException, IOException {
    if (request == null) {
      throw new IllegalArgumentException("HTTP request may not be null");
    }
    if (conn == null) {
      throw new IllegalArgumentException("HTTP connection may not be null");
    }
    if (context == null) {
      throw new IllegalArgumentException("HTTP context may not be null");
    }

    HttpResponse response = null;
    int statuscode = 0;

    while (response == null || statuscode < HttpStatus.SC_OK) {
      response = conn.receiveResponseHeader();
      if (canResponseHaveBody(request, response)) conn.receiveResponseEntity(response);
      statuscode = response.getStatusLine().getStatusCode();

    } // while intermediate response

    return response;

  }

  public void postProcess(final HttpResponse response,
      final HttpProcessor processor, final HttpContext context) throws HttpException, IOException {
    if (response == null) {
      throw new IllegalArgumentException("HTTP response may not be null");
    }
    if (processor == null) {
      throw new IllegalArgumentException("HTTP processor may not be null");
    }
    if (context == null) {
      throw new IllegalArgumentException("HTTP context may not be null");
    }
    context.setAttribute(ExecutionContext.HTTP_RESPONSE, response);
    processor.process(response, context);
  }

} // class HttpRequestExecutor
