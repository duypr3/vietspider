/***************************************************************************
 * Copyright 2001-2008 The VietSpider         All rights reserved.  		 *
 **************************************************************************/
package org.vietspider.server.handler.cms.metas;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.URLDecoder;
import java.net.URLEncoder;

import org.apache.http.HttpRequest;
import org.apache.http.HttpResponse;
import org.apache.http.message.BasicHttpEntityEnclosingRequest;
import org.apache.http.protocol.HttpContext;
import org.vietspider.common.Application;
import org.vietspider.common.io.DataReader;
import org.vietspider.server.WebRM;
import org.vietspider.users.UserFilterService;
import org.vietspider.webui.cms.CMSService;
import org.vietspider.webui.cms.render.RedirectRenderer;

/** 
 * Author : Nhu Dinh Thuan
 *          nhudinhthuan@yahoo.com
 * May 2, 2008  
 */
public class FilterHandler extends CMSHandler <String> {
  
  private String message = "";
  private String [] redirects; 

  public FilterHandler(String type) {
    super(type);
    name = "FILTER"; 
  }

  public String handle(HttpRequest request, 
      HttpResponse response, HttpContext context, String... params) throws Exception {
    
    message = null;
    redirects =  new String[] {"/site/FILE/Filter.html", "/"};
    
    String username = CMSService.INSTANCE.getUsername(getCookie(request));
    if(username == null) {
      redirects =  new String[] {"/site/FILE/Login.html", "/"};
      WebRM resources = new  WebRM();
      message = resources.getLabel("incorrectLogin");
      write(request, response, context, "", params);
      return "text/html";
    }
    
    String uri = request.getRequestLine().getUri();
    String method = request.getRequestLine().getMethod();
    
    int typeIndex = uri.indexOf("type");
    int nameIndex = uri.indexOf("name");
    
    if((typeIndex < 0 || nameIndex < 0) && method.trim().toLowerCase().equals("post")) {
      saveFilter(request, username);
      write(request, response, context, "", params);
      return "text/html";
    }
    
    redirects =  new String[] {"/", "/"};
    try {
      int andChar = uri.indexOf('&', typeIndex); 
      String typeValue = uri.substring(typeIndex+5, andChar);
      String itemValue = null;
      
      int endFilterName = uri.indexOf('&', nameIndex);
      if(endFilterName < 0) endFilterName = uri.length();
      String nameValue = uri.substring(nameIndex+5, endFilterName);
      
      int itemIndex = uri.indexOf("item=", endFilterName);
      if(itemIndex > 0) itemValue = uri.substring(itemIndex + 5);
      
      if(typeValue.equals("delete")) {
        nameValue = URLDecoder.decode(nameValue, "utf-8");
        if(itemValue != null && !itemValue.trim().isEmpty()) {
          itemValue = URLDecoder.decode(itemValue, "utf-8");
          nameValue = nameValue.trim();
          itemValue = itemValue.trim();
          UserFilterService.getInstance().deleteFilter(username, nameValue, itemValue);
          nameValue = URLEncoder.encode(nameValue, "utf-8");
          redirects =  new String[] {"/", "/site/FSEARCH/1/?text=" + nameValue};
        } else {
          UserFilterService.getInstance().deleteFilter(username, nameValue);
          write(request, response, context, "", params);
          return "text/html";
        }
      } 
      
    } catch (Exception e) {
      e.printStackTrace();
      message = e.toString();
    }

    return write(request, response, context, "", params);
  }
  
  protected String[] readData(final HttpRequest request) throws IOException {
    BasicHttpEntityEnclosingRequest entityRequest = (BasicHttpEntityEnclosingRequest)request;
    InputStream inputStream = entityRequest.getEntity().getContent();
    DataReader reader  = new DataReader();
    try {
      ByteArrayOutputStream input = reader.loadInputStream(inputStream);
      String bodyValue = new String(input.toByteArray(), Application.CHARSET).trim();
      return bodyValue.split("&");
    } catch (Exception e) {
      return null;
    }
  }
  
  private void saveFilter(HttpRequest request, String username)  {
    String filterName = "";
    String filterValue = "";
    try{
      String [] elements = readData(request);
      if(elements != null && elements.length > 0) {
        filterName = elements[0].split("=")[1];
      } 
      
      if(elements != null && elements.length > 1 && !elements[1].trim().isEmpty()) {
        try {
          String [] arr =  elements[1].split("=");
          if(arr.length > 1) filterValue = arr[1];
        } catch (Exception e) {
          filterValue = filterName;
        } 
      }
      
      if(filterValue == null || filterValue.trim().isEmpty()) {
        filterValue = filterName;
      }
      
    } catch (Exception e) {
      message = e.toString();
      return;
    }
    
    if(filterName.trim().isEmpty()) {
      WebRM resources = new  WebRM();
      message = resources.getLabel("emptyFilter");
      return;
    }
    
    try {
      filterName = URLDecoder.decode(filterName, "utf-8");
      filterValue = URLDecoder.decode(filterValue, "utf-8");
      UserFilterService.getInstance().saveFilter(username, filterName, filterValue);
    } catch (Exception e) {
      e.printStackTrace();
      message = e.toString();
    }
  }

  @SuppressWarnings("unused")
  public String render(OutputStream output, String value, String cookies[], String...params) throws Exception {
    CMSService cms = CMSService.INSTANCE;;
    params = new String []{cms.getHost(), String.valueOf(cms.getWebPort())}; 
    RedirectRenderer render = new RedirectRenderer();
    render.write(output, type, "5", message, redirects);
    return  "text/html";
  }
  
}
