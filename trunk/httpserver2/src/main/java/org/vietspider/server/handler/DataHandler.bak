/***************************************************************************
 * Copyright 2001-2007 The VietSpider         All rights reserved.  		 *
 **************************************************************************/
package org.vietspider.server.handler;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.OutputStream;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Properties;
import java.util.Set;

import org.apache.http.Header;
import org.apache.http.HttpRequest;
import org.apache.http.HttpResponse;
import org.apache.http.entity.FileEntity;
import org.apache.http.protocol.HttpContext;
import org.headvances.vietspider.SystemProperties;
import org.headvances.vietspider.database.DatabaseService;
import org.headvances.vietspider.log.SourceLogUtils;
import org.headvances.vietspider.source.monitor.SourceLog;
import org.headvances.vietspider.source.monitor.SourceLogHandler;
import org.headvances.vietspider.url.HomepageDatabase;
import org.vietspider.bean.DBInfo;
import org.vietspider.bean.DatabaseConfig;
import org.vietspider.bean.Meta;
import org.vietspider.bean.sync.SyncDatabaseConfig;
import org.vietspider.bean.website.Website;
import org.vietspider.bean.website.Websites;
import org.vietspider.common.Application;
import org.vietspider.common.io.DataReader;
import org.vietspider.common.io.GZipIO;
import org.vietspider.common.io.LogService;
import org.vietspider.data.jdbc.install.DatabaseChecker;
import org.vietspider.data.jdbc.install.DatabaseSetting;
import org.vietspider.io.model.SourceIndexerService;
import org.vietspider.io.model.SourceSearcher;
import org.vietspider.io.websites2.WebsiteStorage;
import org.vietspider.net.server.Metas;
import org.vietspider.serialize.Bean2XML;
import org.vietspider.serialize.XML2Bean;
import org.vietspider.user.Group;
import org.vietspider.user.User;
import org.vietspider.users.Organization;

/** 
 * Author : Nhu Dinh Thuan
 *          nhudinhthuan@yahoo.com
 * Dec 15, 2007  
 */
public class DataHandlerBak extends CommonHandler {

  @SuppressWarnings("unused")
  public void execute(final HttpRequest request, final HttpResponse response,
      final HttpContext context, OutputStream output) throws Exception  {
    Header header = request.getFirstHeader("action");
    String action = header.getValue();

    DataReader reader  = new DataReader();
    ByteArrayOutputStream input = reader.loadInputStream(getRequestBody(request));
    byte [] bytes = input.toByteArray();
    Header zipHeader = request.getFirstHeader("zip");
    boolean zip = zipHeader != null && "true".equals(zipHeader.getValue());
    if(zip) bytes = new GZipIO().unzip(bytes);
    String value = new String(bytes, Application.CHARSET).trim();

    if("load.meta".equals(action)) {
      List<Meta> list =  null;    
      try {
        list = DatabaseService.getLoader().loadMetaFromDomain(value);
      }catch(Exception exp){
        LogService.getInstance().setThrowable("SERVER", exp);
        list = new ArrayList<Meta>();
      }
      Metas metas  = new Metas();
      metas.setList(list);
      value = Bean2XML.getInstance().toXMLDocument(metas).getTextValue();
      output.write(new GZipIO().zip(value.getBytes(Application.CHARSET)));
      return;
    }

    if("source.index.save".equals(action)) {
      SourceIndexerService.getInstance().put(value, SourceIndexerService.SAVE);
      return;
    }

    if("source.index.delete".equals(action)) {
      SourceIndexerService.getInstance().put(value, SourceIndexerService.DELETE);
      return;
    }

    if("source.index.delete.category".equals(action)) {
      String [] elements = value.split("\n");
      List<String> sources = new SourceSearcher().searchByCategory(elements[0], elements[1]);
      for(String source : sources) {
        SourceIndexerService.getInstance().put(source, SourceIndexerService.DELETE);
      }
      return;
    }

    if("source.search.name".equals(action)) {
      List<String> list = new SourceSearcher().searchNameByGroup(value);
      StringBuilder builder  = new StringBuilder();
      for(String ele : list) {
        builder.append(ele).append('\n');
      }
      bytes = builder.toString().getBytes(Application.CHARSET);
      output.write(new GZipIO().zip(bytes));
      return;
    }

    if("source.search.host".equals(action)) {
      String [] elements = value.split("\n");
      List<String> list = new SourceSearcher().searchByHost(elements[0], elements[1]);
      StringBuilder builder  = new StringBuilder();
      for(String ele : list) {
        builder.append(ele).append('\n');
      }
      bytes = builder.toString().getBytes(Application.CHARSET);
      output.write(new GZipIO().zip(bytes));
      return;
    }

    if("source.search.url".equals(action)) {
      try {
        List<String> list = new SourceSearcher().searchByURL(value);
        for(String ele : list) {
          output.write(ele.getBytes(Application.CHARSET));
          output.write("\n".getBytes());
        }
      } catch (Exception e) {
        LogService.getInstance().setThrowable(e);
        output.write(e.toString().getBytes(Application.CHARSET));
        output.write("\n".getBytes());
      }
      return;
    }

    if("user.load.categories".equals(action)) {
      Header userHeader = request.getFirstHeader("username");
      if(userHeader == null) throw new InvalidActionHandler();
      String username = userHeader.getValue();
      Organization org = Organization.getInstance();
      User user = org.loadInstance("user", User.class, username);
      List<String> groupNames = user.getGroups();
      Set<String> categories = new HashSet<String>();

      for(String groupName : groupNames) {
        Group group = org.loadInstance("group", Group.class, groupName); 
        List<String> groupCategories = group.getWorkingCategories();
        for(String category : groupCategories) {
          if(category == null || category.trim().isEmpty()) continue;
          categories.add(category);
        }
      }

      for(String category : categories) {
        output.write(category.getBytes(Application.CHARSET));
        output.write("\n".getBytes());
      }

      return;
    }

    if("config.system.load".equals(action)) {
      Properties properties = SystemProperties.getInstance().getProperties();
      properties.store(output, "VietSpider config");
      return;
    }

    if("config.system.store".equals(action)) {
      Properties properties = new Properties();
      properties.load(new StringReader(value));
      Iterator<?> iterator = properties.keySet().iterator();
      SystemProperties system = SystemProperties.getInstance();
      while(iterator.hasNext()) {
        String key = (String)iterator.next();
        String newValue = properties.getProperty(key);
        String oldValue = system.getValue(key);
        if(newValue.equals(oldValue)) continue;
        system.putValue(key, newValue);
      }
      logAction(request, action, "save server config");
      return;
    }
    
    if("load.website.list".equals(action)) {
      try {
        Websites websites = XML2Bean.getInstance().toBean(Websites.class, value);
        WebsiteStorage.getInstance().load(websites);
        String xml = Bean2XML.getInstance().toXMLDocument(websites).getTextValue();
        //    response.addHeader(new BasicHeader("Content-Length", String.valueOf(xml.length())));
        output.write(xml.getBytes(Application.CHARSET));
      } catch (Exception e) {
        LogService.getInstance().setThrowable(e);
        output.write("".getBytes());
      }
      return;
    }
    
    /*if("load.wait.website.list".equals(action)) {
      IWebsiteStorageDbService websiteDb = WebsiteService.getService();
      if(websiteDb instanceof WebsiteStorageDbService) {
        WaitWebsiteViewer viewer = new WaitWebsiteViewer((WebsiteStorageDbService)websiteDb);
        String data = viewer.searchWaitData(Website.NEW_ADDRESS);
        output.write(data.getBytes(Application.CHARSET));
      } else {
        output.write("".getBytes(Application.CHARSET));
      }
      return;
    }*/

    if("save.website.list".equals(action)) {
      Websites websites = XML2Bean.getInstance().toBean(Websites.class, value);
      WebsiteStorage.getInstance().saveWebsites(websites.getList());
      return;
    }
    
    if("save.website.urls".equals(action)) {
      String [] elements = value.split("\n");
      WebsiteStorage.getInstance().save(elements);
      return;
    }
    
   /* if("generate.download.list".equals(action)) {
      IWebsiteStorageDbService websiteDb = WebsiteService.getService();
      if(websiteDb instanceof WebsiteStorageDbService) {
        WebsiteStorageDbService dbService = (WebsiteStorageDbService)websiteDb;
        WebsiteGenerator.createService(dbService.getDb()).setGenerateNow(true);
      }
      return;
    }*/
    
   /* if("redetect.websites.list".equals(action)) {
      IWebsiteStorageDbService websiteDb = WebsiteService.getService();
      if(websiteDb instanceof WebsiteStorageDbService) {
        WebsiteLanguageDetector.getInstance().getRedetect().generate(value);
      }
      return;
    }*/
    
    
   /* if("repair.website.list".equals(action)) {
      IWebsiteStorageDbService websiteDb = WebsiteService.getService();
      if(websiteDb instanceof WebsiteStorageDbService) {
        ((WebsiteStorageDbService)websiteDb).repair(true);
      }
      return;
    }*/
    
    if("load.website.by.host".equals(action)) {
      Websites websites = XML2Bean.getInstance().toBean(Websites.class, value);
      Website website = WebsiteStorage.getInstance().search(value);
      if(website != null) {
        String xml = Bean2XML.getInstance().toXMLDocument(website).getTextValue();
        output.write(xml.getBytes(Application.CHARSET));
      } else {
        output.write("".getBytes(Application.CHARSET));
      }
      return;
    }
    
    /*if("load.website.html".equals(action)) {
      IWebsiteStorageDbService websiteDb = WebsiteService.getService();
      String html = websiteDb.loadHTML(value);
      if(html != null) {
        output.write(html.getBytes(Application.CHARSET));
      } else {
        output.write("".getBytes(Application.CHARSET));
      }
      return;
    }*/

    //////////////////////////// HOME PAGE SERVICE ////////////////////////////////////////////

    if("save.homepage.list".equals(action)) {
      String  [] elements  = value.split("\n");
      if(elements == null || elements.length < 2) return;
      HomepageDatabase db = new HomepageDatabase(elements[0], true);
      for(int i = 1; i < elements.length; i++) {
        db.saveUrl(elements[i]);
      }
      output.write("".getBytes(Application.CHARSET));
      return;
    }

    if("load.homepage.list".equals(action)) {
      Header pageHeader = request.getFirstHeader("page");
      int page = 0;
      try {
        page = Integer.parseInt(pageHeader.getValue());
      } catch (Exception e) {
        LogService.getInstance().setMessage(e, e.getMessage());
      }
      HomepageDatabase db = new HomepageDatabase(value, true);
      List<String> list = db.loadPage(page);
      StringBuilder builder = new StringBuilder();
      if(list != null) {
        for(int i = 0; i < list.size(); i++){
          if(builder.length() > 0) builder.append('\n');
          builder.append(list.get(i));
        }
      }
      output.write(builder.toString().getBytes(Application.CHARSET));
      return;
    }

    if("export.homepage.list".equals(action)) {
     /* final HomePageDbService homepageService = HomePageDbService.getService();
      //    HomepageDb homepageDb = HomepageDbService.getDb(value);
      final String sourceName = value;
      Header streamHeader = request.getFirstHeader("stream.data");
      if(streamHeader != null) {
        ImportExportHomePage iterator = homepageService.getExport(value);
        InputStream inputStream = iterator.getStream();
        long size = iterator.getSize();
        InputStreamEntity streamEntity = new InputStreamEntity(inputStream, size);
        response.setEntity(streamEntity);
        response.addHeader(new BasicHeader("total.page.homepage", String.valueOf(size)));
      } else {
        new Thread() {
          public void run () {
            try {
              ImportExportHomePage exporter = homepageService.getExport(sourceName);
              exporter.export(sourceName);
            } catch (Exception e) {
              LogService.getInstance().setThrowable(e);
            }
          }
        }.start();
      }*/
      return;
    }
    
    if("import.homepage.list".equals(action)) {
      /*final HomePageDbService homepageService = HomePageDbService.getService();
      //    HomepageDb homepageDb = HomepageDbService.getDb(value);
      final String sourceName = value;
      new Thread() {
        public void run () {
          try {
            ImportExportHomePage exporter = homepageService.getExport(sourceName);
            exporter.importData(sourceName);
          } catch (Exception e) {
            LogService.getInstance().setThrowable(e);
          }
        }
      }.start();*/
      
      /*HomePageExporter iterator = homepageService.getExport(value);
      InputStream inputStream = iterator.getStream();
      long size = iterator.getSize();
      InputStreamEntity streamEntity = new InputStreamEntity(inputStream, size);
      response.setEntity(streamEntity);*/
      return;
    }

    if("total.page.homepage".equals(action)) {
      HomepageDatabase db = new HomepageDatabase(value, true);
      output.write(String.valueOf(db.getTotalPage()).getBytes(Application.CHARSET));
      return;
    }
    
    /*if("repair.homepage.database".equals(action)) {
      HomePageDbService homepageService = HomePageDbService.getService();
      homepageService.repair(value);
      return;
    }*/

    /*if("total.data.homepage".equals(action)) {
      HomePageDbService homepageService = HomePageDbService.getService();
      //    HomepageDb homepageDb = HomepageDbService.getDb(value);
      ImportExportHomePage iterator = homepageService.getExport(value);
      //      HomepageDb homepageDb = HomepageDbService.getDb(value);
      long total = iterator.getSize();
      output.write(String.valueOf(total).getBytes(Application.CHARSET));
      return;
    }*/

    ////////////////////////////  END HOME PAGE SERVICE ///////////////////////////

    if("remove.homepage.list".equals(action)) {
      return;
    }
    
   /* if("load.storage.homepage".equals(action)) {
      try {
        HomepageDetector homepageDetector = new HomepageDetector(value);
        output.write(homepageDetector.detect().getBytes(Application.CHARSET));
      } catch (Exception e) {
        LogService.getInstance().setThrowable(e);
      }
      return;
    }*/

    if("check.database.connection".equals(action)) {
      DBInfo config = null;
      if (value.indexOf("<databaseConfig>") > -1) {
        config = XML2Bean.getInstance().toBean(DatabaseConfig.class, value);
      } else {
        config = XML2Bean.getInstance().toBean(SyncDatabaseConfig.class, value);
      }
      DatabaseChecker checker = new DatabaseChecker();
      try {
        output.write(checker.connect(config).getBytes(Application.CHARSET));
      } catch (Exception e) {
        output.write(e.toString().getBytes(Application.CHARSET));
      }
      return;
    }

    if("database.connection.setting".equals(action)) {
      DatabaseConfig config = XML2Bean.getInstance().toBean(DatabaseConfig.class, value);
      DatabaseSetting setting = new DatabaseSetting();
      try {
        setting.set(config);
        output.write("".getBytes(Application.CHARSET));
      } catch (Exception e) {
        output.write(e.toString().getBytes(Application.CHARSET));
      }
      return;
    }

    if("load.database.setting".equals(action)) {
      DatabaseSetting setting = new DatabaseSetting();
      try {
        DatabaseConfig config = setting.loadDefault();
        String xml = Bean2XML.getInstance().toXMLDocument(config).getTextValue();
        output.write(xml.getBytes(Application.CHARSET));
      } catch (Exception e) {
        output.write(e.toString().getBytes(Application.CHARSET));
      }
      return;
    }

    if("save.log".equals(action)) {
      LogService.getInstance().setMessage("USER", null, value);  
      //      System.out.println("LogServiceInstant: " + LogService.getInstance().getClass().getName());
      String username = value.substring(0, value.indexOf(" read.article"));
      String id = value.substring(value.lastIndexOf('=')+1);
      //      UserActionTracker.getInstance().append(new UserActionLog(username, UserActionLog.READ, id));
      return;
    }
    
    if("load.source.log".equals(action)) {
     /* SourceLogExportStream2 inputStream = SourceLogDbService.getService().getExportStream(value);
      InputStreamEntity streamEntity = new InputStreamEntity(inputStream, inputStream.size());
      response.setEntity(streamEntity);*/
      
//      File file = new File(UtilFile.getFolder("content/summary/"), value);
//      SourceLogDB db = SourceLogDbService.getService().getSourceLogDb(value, false);
//      SourceLogEntity entity = new SourceLogEntity(file, db);
      File file  = SourceLogHandler.getInstance().exportToFile(value);
      if(file != null) {
        response.setEntity(new FileEntity(file, "text/plain"));
      }
      return;
    }
    
    if("load.monitor.date".equals(action)) {
      SourceLogUtils log = new SourceLogUtils();
      String [] elements = log.loadDate();
      StringBuilder builder = new StringBuilder();
      for(int i = 0; i < elements.length; i++) {
        if(builder.length() > 0) builder.append('\n');
        builder.append(elements[i]);
      }
      output.write(builder.toString().getBytes(Application.CHARSET));
      return;
    }
    
    if("load.source.log.desc".equals(action)) {
      String [] elements = value.trim().split("[#]");
      SourceLogHandler handler = SourceLogHandler.getInstance();
      try {
        SourceLog sourceLog = handler.loadSourceLog(elements[0].trim(), elements[1].trim());
        if(sourceLog != null) {
          output.write(sourceLog.getDesc().getBytes(Application.CHARSET));
        } else {
          output.write(" ".getBytes());
        }
      } catch (Exception e) {
        output.write(" ".getBytes());
      }
      return;
    }
    
    /*if("save.sync.database.setting".equals(action)) {
      SyncDatabaseSetting setting = new SyncDatabaseSetting();
      try {
        SyncDatabaseConfig config = XML2Bean.getInstance().toBean(SyncDatabaseConfig.class, value);
        setting.set(config);
        output.write("".getBytes(Application.CHARSET));
      } catch (Exception e) {
        output.write(e.toString().getBytes(Application.CHARSET));
      }
      return;
    }*/
  }

}
