/***************************************************************************
 * Copyright 2001-2008 The VietSpider         All rights reserved.  		 *
 **************************************************************************/
package org.vietspider.client.common;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.Date;

import org.apache.http.Header;
import org.apache.http.message.BasicHeader;
import org.vietspider.bean.SourceMonitor;
import org.vietspider.common.Application;
import org.vietspider.common.text.CalendarUtils;
import org.vietspider.model.TrackId;
import org.vietspider.monitor.MenuInfo;
import org.vietspider.net.client.AbstClientConnector.HttpData;
import org.vietspider.net.server.URLPath;

/** 
 * Author : Nhu Dinh Thuan
 *          nhudinhthuan@yahoo.com
 * Mar 4, 2008  
 */
abstract class SourceMonitorHandler {
  
//  protected String folder = "client/summary/";
  
  protected String actionFolder = "summary";
  
  protected String dateFolder;  
  protected String[] dates;
  
  protected ZipRatioWorker worker; 
  
  public SourceMonitorHandler(String folder, String[] dates) {
    this.dates = dates;
    this.actionFolder = folder;
    this.dateFolder = dates[0].replace('/', '_');
  }

  public TrackId loadPage(int page) {
    File folder = ClientConnector2.getCacheFolder(actionFolder+"/"+dateFolder);
    File file = new File(folder, "data" + String.valueOf(page));
    TrackId menuInfo = new TrackId();
    if(!file.exists()) return menuInfo;

    InputStreamReader inputReader = null;
    BufferedReader bufferedReader = null;

    FileInputStream stream = null;
    try { 
      stream = new FileInputStream(file);
      inputReader = new InputStreamReader(stream, Application.CHARSET);
      bufferedReader = new BufferedReader(inputReader);
      
      String line = null;
      while((line = bufferedReader.readLine()) != null) {
        String [] elements = line.split("/");
        if(elements.length < 5) continue;
        int crawlTime = Integer.parseInt(elements[1]);
        int link = Integer.parseInt(elements[2]);
        int data = Integer.parseInt(elements[3]);
//        long downloaded = Long.parseLong(elements[4]);
        long lastAccess = Long.parseLong(elements[4]);
        menuInfo.add(elements[0], crawlTime, data, link,  lastAccess);
      }
      
      stream.close();
    } catch (Exception e) {
      ClientLog.getInstance().setException(e);
    } finally {
      try {
        if(stream != null) stream.close();
      }catch (Exception e) {
        ClientLog.getInstance().setException(e);
      }

      try {
        if(inputReader != null) inputReader.close();
      }catch (Exception e) {
        ClientLog.getInstance().setException(e);
      }

      try {
        if(bufferedReader != null) bufferedReader.close();
      }catch (Exception e) {
        ClientLog.getInstance().setException(e);
      }
    }

    return menuInfo;
  }
  
  protected File readFromServer(boolean update) {
    if(dates == null || dates.length < 1) return null;
    InputStream inputStream = null;
    FileOutputStream outputStream = null;
    File folder = ClientConnector2.getCacheFolder(actionFolder);
    HttpData  httpData =  null;
    ClientConnector2 connector = ClientConnector2.currentInstance();
    try {
      File file = new File(folder, dateFolder+"_data.tmp");
      if(!update && file.exists() && file.length() > 1) return file;
      file.delete();
      file.createNewFile();

      StringBuilder builderDate = new StringBuilder();
      for(int i = 0; i < dates.length; i++) {
        Date instanceDate = CalendarUtils.getDateFormat().parse(dates[i]);
        if(builderDate.length() > 0) builderDate.append('\n');
        builderDate.append(CalendarUtils.getFolderFormat().format(instanceDate));
      }
      Header [] headers = new Header[] {
          new BasicHeader("stream.data", "true"),
          new BasicHeader("action", "load.source.log"),
      };
      byte [] bytes = builderDate.toString().getBytes();
      
      httpData = connector.loadResponse(URLPath.DATA_HANDLER, bytes, headers);
      Header header = httpData.getResponseHeader("Content-Length");
      
      if(header != null && worker != null) {
        worker.setTotal(Integer.parseInt(header.getValue()));
      }
      
      outputStream =  new FileOutputStream(file);
      inputStream = httpData.getStream();
     
      byte [] buff = new byte[2048];
      int read = -1;
      
      while( (read = inputStream.read(buff)) != -1) {
        String value  = new String(buff, 0, read, "utf-8");
        if(value.trim().endsWith("end")) {
          value = value.substring(0, value.lastIndexOf("end")-1);
          outputStream.write(value.getBytes("utf-8"));
          break;
        } 
        outputStream .write(value.getBytes("utf-8"));            
      }
      outputStream.close();
      return file;
    } catch (Exception e) {
      ClientLog.getInstance().setException(e);
    } finally {
      try {
        if(outputStream != null) outputStream.close();
      } catch (Exception e) {
        ClientLog.getInstance().setException(e);
      }
      
      try {
        if(inputStream != null) inputStream.close();
      } catch (Exception e) {
        ClientLog.getInstance().setException(e);
      }
      
      connector.release(httpData);
    }
    return null;
  }
  
  protected boolean validate(SourceMonitor monitor, MonitorFilter filter) {
    if(filter == null) return true;
    
    if(filter.getName() != null 
        && monitor.getSource().toLowerCase().indexOf(filter.getName()) < 0) return false;
    
    int data =  monitor.getDataCounter();
    int min =  filter.getMinData();
    int max = filter.getMaxData();
    
    if(min > -1 && max > -1) {
      if(min <= data && data <= max) {
        return checkLink(monitor, filter);
      }
      return false;
    }
    
    if(min > -1) {
      if(min <= data) {
        return checkLink(monitor, filter);
      }
      return false;
    }
    
    if(max > -1) {
      if(data <= max) {
        return checkLink(monitor, filter);
      }
      return false;
    }
    
    return checkLink(monitor, filter);
  }
  
  private boolean checkLink(SourceMonitor monitor, MonitorFilter filter) {
    long data =  monitor.getLinkCounter();
    long min =  filter.getMinLink();
    long max = filter.getMaxLink();
    
    if(min > -1 && max > -1) {
      if(min <= data && data <= max) return true;
      return false;
    }
    
    if(min > -1) {
      if(min <= data) return true;
      return false;
    }
    
    if(max > -1) {
      if(data <= max) return true;
      return false;
    }
    return true;
  }
  
  public MonitorFilter createFilter(String name, String data, String link) {
    MonitorFilter filter = new MonitorFilter();
    filter.setName(name);
    
    int [] intValues = createNumber(data);
    filter.setMinData(intValues[0]);
    filter.setMaxData(intValues[1]);
    
    intValues = createNumber(link);
    filter.setMinLink(intValues[0]);
    filter.setMaxLink(intValues[1]);
    
    return filter;
  }
  
  private int[] createNumber(String value) {
    int [] intValues = {-1, -1};
    if(value == null || (value = value.trim()).isEmpty()) return intValues;
    String [] elements = value.split("-");
    if(elements.length < 1) return intValues;
    try {
      intValues[0] = Integer.parseInt(elements[0]);
    } catch (Exception e) {
    }
    if(elements.length < 2) return intValues;
    
    try {
      intValues[1] = Integer.parseInt(elements[1]);
    } catch (Exception e) {
    }
    return intValues;
  }
  
  public static class MonitorFilter {
    
    private String name;
    
    private int minData = -1;
    
    private int maxData = -1;
    
    private long minLink = -1;
    
    private long maxLink = -1;
    
    public MonitorFilter(){
    }
    
    public MonitorFilter(String name) {
      if(name != null && name.trim().isEmpty()) name = null;
      this.name = name.toLowerCase();
    }

    public String getName() { return name; }
    public void setName(String name) {
      if(name != null && name.trim().isEmpty()) name = null;
      if(name != null) this.name = name.toLowerCase(); 
    }

    public int getMinData() { return minData; }
    public void setMinData(int minData) { this.minData = minData; }

    public int getMaxData() { return maxData; }
    public void setMaxData(int maxData) { this.maxData = maxData; }

    public long getMinLink() { return minLink; }
    public void setMinLink(long minLink) { this.minLink = minLink; }

    public long getMaxLink() { return maxLink; }
    public void setMaxLink(long maxLink) { this.maxLink = maxLink; }
    
  }

}
