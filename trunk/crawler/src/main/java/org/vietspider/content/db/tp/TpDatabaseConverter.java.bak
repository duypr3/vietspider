/***************************************************************************
 * Copyright 2001-2009 The VietSpider         All rights reserved.  		 *
 **************************************************************************/
package org.vietspider.content.tp.db;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.Iterator;
import java.util.Map;
import java.util.SortedMap;

import org.vietspider.common.io.LogService;
import org.vietspider.common.io.UtilFile;
import org.vietspider.content.tp.vn.TpDocument;
import org.vietspider.content.tp.vn.TpDocument2;
import org.vietspider.content.tp.vn.comparator.TpWordIndexConverter;
import org.vietspider.db.BytesDatabase;
import org.vietspider.db.JeDatabase;

import com.sleepycat.bind.ByteArrayBinding;
import com.sleepycat.bind.tuple.StringBinding;
import com.sleepycat.collections.StoredSortedMap;
import com.sleepycat.je.DatabaseConfig;
import com.sleepycat.je.Environment;
import com.sleepycat.je.EnvironmentConfig;

/** 
 * Author : Nhu Dinh Thuan
 *          nhudinhthuan@yahoo.com
 * Sep 15, 2009  
 */
class TpDatabaseConverter {

  TpDatabaseConverter() {
    File folder = UtilFile.getFolder("content/tp/");
    File [] files = folder.listFiles();
    for(int i = 0; i < files.length; i++) {
      if (files[i].getName().equals("temp")) continue;
      convert(folder, files[i].getName()); 
    }
  }

  void convert(File folder, String group) {
    File dbFolder = new File(folder, "/" + group + "/database2/");
    if(!dbFolder.exists()) return;
    File [] files = dbFolder.listFiles();
    if(files.length < 1) {
      UtilFile.deleteFolder(dbFolder);
      return;
    }
    
    for(int i = 0; i < files.length; i++) {
      File folder1 = files[i];
      File folder2 = new File(folder, "/" + group + "/database3/"+ folder1.getName()+"/");
      try {
        folder2.mkdirs();
        convert(folder1, folder2);
      } catch (Throwable e) {
        LogService.getInstance().setThrowable(e);
      }
    }
  }

  void convert(File folder1, File folder2) throws Throwable {
    TpDatabase2 tracker1 = new TpDatabase2(folder1);
    TpDatabase3 tracker2 = new TpDatabase3(folder2, 50*1024*1024);
    try {
      tracker1.convert(tracker2);
      tracker1.close();

      UtilFile.deleteFolder(folder1);
    } finally {
      try {
        tracker1.close();
      } catch (Exception e) {
        LogService.getInstance().setThrowable(e);
      }

      try {
        tracker2.close();
      } catch (Exception e) {
        LogService.getInstance().setThrowable(e);
      }
    }
  }
  
  class TpDatabase extends JeDatabase {

    protected volatile long lastAccess = System.currentTimeMillis();

    protected SortedMap<String, byte[]> map;

    protected volatile int counter = 0;

    public TpDatabase(File folder) throws Exception {
      EnvironmentConfig envConfig = new EnvironmentConfig();
      envConfig.setTransactional(false);
      envConfig.setAllowCreate(true);

      envConfig.setCacheSize(100*1024*1024l); 

      this.env = new Environment(folder, envConfig);
      DatabaseConfig dbConfig = new DatabaseConfig();
      dbConfig.setTransactional(false);
      dbConfig.setAllowCreate(true);
      dbConfig.setDeferredWrite(true);
      this.db = env.openDatabase(null, "tpdatabase", dbConfig);
      ByteArrayBinding dataBinding = new ByteArrayBinding();
      StringBinding keyBinding = new StringBinding();
      this.map = new StoredSortedMap<String, byte[]> (db, keyBinding, dataBinding, true);
    }

    public void save(TpDocument2 document) throws Throwable {
      if(isClose) return;
      ByteArrayOutputStream byteOutputStream = new ByteArrayOutputStream();
      ObjectOutputStream out = new ObjectOutputStream(byteOutputStream);
      try {
        out.writeObject(document);
        out.flush();
      } catch (Exception e) {
        LogService.getInstance().setThrowable(e);
        return;
      } finally {
        try {
          if(byteOutputStream != null) byteOutputStream.close();
        } catch (Exception e) {
        }
        try {
          out.close();
        } catch (Exception e) {
        }
      }

      lastAccess = System.currentTimeMillis();
      map.put(document.getId(), byteOutputStream.toByteArray());
      counter++;
      if(counter < 20) return;
      db.sync();
      counter = 0;
    }

    public TpDocument2 loadDocument(String id) throws Throwable {
      if(isClose) return null;
      byte [] bytes = map.get(id);
      if(bytes == null) return null;
      ByteArrayInputStream byteInputStream = new ByteArrayInputStream(bytes);
      ObjectInputStream objectInputStream = null;
      try {
        objectInputStream = new ObjectInputStream(byteInputStream);
        return (TpDocument2)objectInputStream.readObject();
      } catch (Exception e) {
        LogService.getInstance().setThrowable(e);
        return null;
      } finally {
        try {
          if(byteInputStream != null) byteInputStream.close();
        } catch (Exception e) {
        }
        try {
          if(objectInputStream != null)  objectInputStream.close();
        } catch (Exception e) {
        }
      } 

    }
    
    public void convert(TpDatabase2 database2) throws Throwable {
      if(isClose) return ;
      Iterator<Map.Entry<String, byte[]>> iterator = map.entrySet().iterator();
      while(iterator.hasNext()) {
        Map.Entry<String, byte[]> entry = iterator.next();
        try {
          long id  = Long.parseLong(entry.getKey());
          database2.save(id, entry.getValue());
        } catch (Exception e) {
           LogService.getInstance().setThrowable(e);
        }
      }
    }
    
    public long getLastAccess() { return lastAccess; }
  }
  
  class TpDatabase2 extends BytesDatabase {

    protected volatile long lastAccess = System.currentTimeMillis();

//    protected volatile int counter = 0;
    
    private TpWordIndexConverter converter = new TpWordIndexConverter();

    public TpDatabase2(File folder) throws Exception {
      super(folder, "tpdatabase2", 100*1024*1024, false);
    }

    public void save(TpDocument document) throws Throwable {
      if(isClose) return;
      ByteArrayOutputStream byteOutputStream = new ByteArrayOutputStream();
      ObjectOutputStream out = new ObjectOutputStream(byteOutputStream);
      try {
        out.writeObject(document);
        out.flush();
      } catch (Exception e) {
        LogService.getInstance().setThrowable(e);
        return;
      } finally {
        try {
          if(byteOutputStream != null) byteOutputStream.close();
        } catch (Exception e) {
        }
        try {
          out.close();
        } catch (Exception e) {
        }
      }
      
      save(document.getLongId(), byteOutputStream.toByteArray());
    }
    
    public void save(long id, byte[] bytes) throws Throwable {
      lastAccess = System.currentTimeMillis();
      map.put(id, bytes);
//      counter++;
//      if(counter < 20) return;
//      db.sync();
//      counter = 0;
    }
    
    public TpDocument loadDocument(long id) throws Throwable {
      if(isClose) return null;
      byte [] bytes = map.get(id);
      if(bytes == null) return null;
      return loadDocument(bytes);
    }
    
    public TpDocument loadDocument(byte [] bytes) throws Throwable {
      ByteArrayInputStream byteInputStream = new ByteArrayInputStream(bytes);
      ObjectInputStream objectInputStream = null;
      try {
        objectInputStream = new ObjectInputStream(byteInputStream);
        return (TpDocument)objectInputStream.readObject();
      } catch (Exception e) {
        LogService.getInstance().setThrowable(e);
        return null;
      } finally {
        try {
          if(byteInputStream != null) byteInputStream.close();
        } catch (Exception e) {
        }
        try {
          if(objectInputStream != null)  objectInputStream.close();
        } catch (Exception e) {
        }
      } 
    }
    
    public long getLastAccess() { return lastAccess; }
    
    public void convert(TpDatabase3 database3) throws Throwable {
      if(isClose) return ;
      Iterator<Map.Entry<Long, byte[]>> iterator = map.entrySet().iterator();
      while(iterator.hasNext()) {
        Map.Entry<Long, byte[]> entry = iterator.next();
        try {
          byte [] bytes = entry.getValue();
          TpDocument tpDocument = loadDocument(bytes);
          TpDocument2 tpDocument2 = converter.upgrade(tpDocument);
          database3.save(tpDocument2);
        } catch (Throwable e) {
           LogService.getInstance().setThrowable(e);
        }
      }
    }

  }
}
