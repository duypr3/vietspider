/***************************************************************************
 * Copyright 2001-2009 The VietSpider         All rights reserved.       *
 **************************************************************************/
package org.vietspider.content.tp.db;

/***************************************************************************
 * Copyright 2001-2009 The VietSpider         All rights reserved.       *
 **************************************************************************/

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.Iterator;
import java.util.Map;
import java.util.SortedMap;

import org.headvances.vietspider.JeDatabase;
import org.vietspider.common.io.LogService;
import org.vietspider.common.io.UtilFile;

import com.sleepycat.bind.ByteArrayBinding;
import com.sleepycat.bind.tuple.LongBinding;
import com.sleepycat.collections.StoredSortedMap;
import com.sleepycat.je.DatabaseConfig;
import com.sleepycat.je.Environment;
import com.sleepycat.je.EnvironmentConfig;
/** 
 * Author : Nhu Dinh Thuan
 *          nhudinhthuan@yahoo.com
 * Mar 30, 2009  
 */

 class TpTempDatabase extends JeDatabase {

  protected SortedMap<Long, byte[]> map;

  protected volatile int counter = 0;

  public TpTempDatabase() throws Exception {
    EnvironmentConfig envConfig = new EnvironmentConfig();
    envConfig.setTransactional(false);
    envConfig.setAllowCreate(true);

    envConfig.setCacheSize(50*1024*1024l); 
    
    File folder = UtilFile.getFolder("content/tp/temp/docs/");

    this.env = new Environment(folder, envConfig);
    DatabaseConfig dbConfig = new DatabaseConfig();
    dbConfig.setTransactional(false);
    dbConfig.setAllowCreate(true);
    dbConfig.setDeferredWrite(true);
    this.db = env.openDatabase(null, "tp_temp_database", dbConfig);
    ByteArrayBinding dataBinding = new ByteArrayBinding();
    LongBinding keyBinding = new LongBinding();
    this.map = new StoredSortedMap<Long, byte[]> (db, keyBinding, dataBinding, true);
  }

  public void save(TpWorkingData data) throws Throwable {
    if(isClose) return;
//    System.out.println("luc save "+ data.getContentIndex());
    ByteArrayOutputStream byteOutputStream = new ByteArrayOutputStream();
    ObjectOutputStream out = new ObjectOutputStream(byteOutputStream);
    try {
      out.writeObject(data);
      out.flush();
    } catch (Exception e) {
      LogService.getInstance().setThrowable(e);
      return;
    } finally {
      try {
        if(byteOutputStream != null) byteOutputStream.close();
      } catch (Exception e) {
      }
      try {
        out.close();
      } catch (Exception e) {
      }
    }
    
    long key = Long.parseLong(data.getTpDocument().getId());
    map.put(key, byteOutputStream.toByteArray());
    
    counter++;
    if(counter < 20) return;
    db.sync();
    counter = 0;
  }

  public void load(java.util.Queue<TpWorkingData> waitData) throws Throwable {
    if(isClose) return;
    Iterator<Map.Entry<Long, byte[]>> iterator = map.entrySet().iterator();
    int total = 0;
    while(iterator.hasNext()) {
      Map.Entry<Long, byte[]> entry = iterator.next();
      byte [] bytes = entry.getValue();
      iterator.remove();
      if(bytes == null) continue;
      TpWorkingData data = toData(bytes);
      if(data == null) continue;
//      System.out.println("luc load ra "+ data.getContentIndex());
      waitData.add(data);
      total++;
      if(total < 100) continue;
      db.sync();
      break;
    }
  }
  
  public void convert(TpTempDatabase2 database2) throws Throwable {
    if(isClose) return;
    Iterator<Map.Entry<Long, byte[]>> iterator = map.entrySet().iterator();
    int total = 0;
    while(iterator.hasNext()) {
      Map.Entry<Long, byte[]> entry = iterator.next();
      byte [] bytes = entry.getValue();
      iterator.remove();
      if(bytes == null) continue;
      TpWorkingData data = toData(bytes);
      if(data == null) continue;
      database2.save(data);
      total++;
      if(total < 100) continue;
      db.sync();
      total = 0;
    }
    db.sync();
    System.exit(0);
  }
  
  private TpWorkingData toData(byte[] bytes) throws Throwable {
    ByteArrayInputStream byteInputStream = new ByteArrayInputStream(bytes);
    ObjectInputStream objectInputStream = null;
    try {
      objectInputStream = new ObjectInputStream(byteInputStream);
      return (TpWorkingData)objectInputStream.readObject();
    } catch (StackOverflowError e) {
      LogService.getInstance().setMessage("TPDATABASE - LOAD", new Exception(e), e.toString() );
      return null;
    } catch (Throwable e) {
      LogService.getInstance().setThrowable(e);
      return null;
    } finally {
      try {
        if(byteInputStream != null) byteInputStream.close();
      } catch (Exception e) {
      }
      try {
        if(objectInputStream != null)  objectInputStream.close();
      } catch (Exception e) {
      }
    } 
  }
  

}