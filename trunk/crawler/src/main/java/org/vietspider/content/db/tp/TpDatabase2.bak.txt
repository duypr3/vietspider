/***************************************************************************
 * Copyright 2001-2009 The VietSpider         All rights reserved.       *
 **************************************************************************/
package org.vietspider.content.miming.db;

/***************************************************************************
 * Copyright 2001-2009 The VietSpider         All rights reserved.       *
 **************************************************************************/

import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.ObjectInputStream;

import org.headvances.vietspider.BytesDatabase;
import org.vietspider.common.io.LogService;
import org.vietspider.content.miming.vn.TpDocument;
import org.vietspider.content.miming.vn.TpDocument2;
import org.vietspider.content.miming.vn.comparator.ClassDetector;
import org.vietspider.content.miming.vn.comparator.TpWordIndexConverter;
/** 
 * Author : Nhu Dinh Thuan
 *          nhudinhthuan@yahoo.com
 * Mar 30, 2009  
 */

public class TpDatabase2 extends BytesDatabase {

  protected volatile long lastAccess = System.currentTimeMillis();

//  protected volatile int counter = 0;
  
  protected ClassDetector detector = new ClassDetector();
  protected TpWordIndexConverter converter = new TpWordIndexConverter();

  public TpDatabase2(File folder, long cachedSize) throws Exception {
    super(folder, "tpdatabase2", cachedSize);
  }

  public void save(TpDocument2 document) throws Throwable {
    if(isClose) return;
   /* ByteArrayOutputStream byteOutputStream = new ByteArrayOutputStream(1024*1024);
    ObjectOutputStream out = new ObjectOutputStream(byteOutputStream);
    try {
      out.writeObject(document);
      out.flush();
    } catch (Exception e) {
      LogService.getInstance().setThrowable(e);
      return;
    } finally {
      try {
        if(byteOutputStream != null) byteOutputStream.close();
      } catch (Exception e) {
      }
      try {
        out.close();
      } catch (Exception e) {
      }
    }*/
    
    System.out.println(" new serialization "+ document.getId());
    
    save(document.getLongId(), document.toBytes()/* byteOutputStream.toByteArray()*/);
  }
  
  public void save(long id, byte[] bytes) throws Throwable {
    lastAccess = System.currentTimeMillis();
    map.put(id, bytes);
//    counter++;
//    if(counter < 20) return;
//    db.sync();
//    counter = 0;
  }
  
  public TpDocument2 loadDocument(long id) throws Throwable {
    if(isClose) return null;
    byte [] bytes = map.get(id);
    if(bytes == null) return null;
    Class<?> clazz = detector.detect(bytes);
    System.out.println(" thay co clazz "+ clazz);
    TpDocument2 tpDocument2 = null;
    if(clazz == TpDocument.class) {
      TpDocument tpDocument = javaSerialization(bytes);
      if(tpDocument != null) {
        System.out.println(" old de_serialization "+ tpDocument.getId());
        tpDocument2 = converter.upgrade(tpDocument);
        if(tpDocument2 != null) save(tpDocument2);
      }
    }
    if(tpDocument2 != null) return tpDocument2;
    tpDocument2 = TpDocument2.read(bytes);
    System.out.println(" new de_serialization "+ tpDocument2.getId());
    return  tpDocument2;
 /*  try {
     TpDocument2 tpDocument2 = TpDocument2.read(bytes);
     System.out.println(" new de_serialization "+ tpDocument2.getId());
     return tpDocument2;
   } catch (Throwable e) {
     TpDocument2 tpDocument2 = javaSerialization(bytes);
     if(tpDocument2 == null) return null;
     System.out.println(" old de_serialization "+ tpDocument2.getId());
     save(tpDocument2);
     return tpDocument2;
   }*/
  }
  
  private TpDocument javaSerialization(byte [] bytes) throws Throwable {
    ByteArrayInputStream byteInputStream = new ByteArrayInputStream(bytes);
    ObjectInputStream objectInputStream = null;
    try {
      objectInputStream = new ObjectInputStream(byteInputStream);
      return (TpDocument)objectInputStream.readObject();
    } catch (Exception e) {
      LogService.getInstance().setThrowable(e);
      return null;
    } finally {
      try {
        if(byteInputStream != null) byteInputStream.close();
      } catch (Exception e) {
      }
      try {
        if(objectInputStream != null)  objectInputStream.close();
      } catch (Exception e) {
      }
    } 
  }
  
  /*public TpDocument loadDocument(long id) throws Throwable {
    if(isClose) return null;
    byte [] bytes = map.get(id);
    if(bytes == null) return null;
    ByteArrayInputStream byteInputStream = new ByteArrayInputStream(bytes);
    ObjectInputStream objectInputStream = null;
    try {
      objectInputStream = new ObjectInputStream(byteInputStream);
      return (TpDocument)objectInputStream.readObject();
    } catch (Exception e) {
      LogService.getInstance().setThrowable(e);
      return null;
    } finally {
      try {
        if(byteInputStream != null) byteInputStream.close();
      } catch (Exception e) {
      }
      try {
        if(objectInputStream != null)  objectInputStream.close();
      } catch (Exception e) {
      }
    } 
  }*/
  
  
  
  public long getLastAccess() { return lastAccess; }

}