/***************************************************************************
 * Copyright 2001-2008 The VietSpider         All rights reserved.  		 *
 **************************************************************************/
package org.vietspider.crawl.link;

import static org.vietspider.model.SourceProperties.CONTENT_FILTER;
import static org.vietspider.model.SourceProperties.MIN_SIZE_OF_PAGE;
import static org.vietspider.model.SourceProperties.PAGE_CHECKER;

import java.io.File;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;

import org.vietspider.common.Application;
import org.vietspider.common.Install;
import org.vietspider.common.io.LogWebsite;
import org.vietspider.common.io.UtilFile;
import org.vietspider.common.text.NameConverter;
import org.vietspider.crawl.link.generator.LinkGeneratorBuilder;
import org.vietspider.crawl.plugin.handler.VietnamesePageChecker;
import org.vietspider.html.path2.NodePath;
import org.vietspider.html.path2.NodePathParser;
import org.vietspider.link.ContentFilters;
import org.vietspider.link.IPageChecker;
import org.vietspider.link.pattern.JsDocWriterGetter;
import org.vietspider.model.Source;

/** 
 * Author : Nhu Dinh Thuan
 *          nhudinhthuan@yahoo.com
 * Apr 8, 2008  
 */
public class SourceResource {
  
  private volatile static long TIMEOUT_WEIGHT = 30*60*1000l;
  
  static {
    if(Application.LICENSE == Install.SEARCH_SYSTEM) TIMEOUT_WEIGHT = 60*60*1000l;
  }
  
  protected volatile NodePath [] updatePaths;
  
  private List<Object> linkGenerators = new ArrayList<Object>();
  private LinkCreator linkCreator;
  
  private volatile IPageChecker pageChecker;
  private volatile boolean decode = false;
  private volatile ContentFilters contentFilters; 
  
  private volatile long sExpire;
  protected volatile long sStart = -1;
  
  private volatile long minSizeOfPage = -1;
  
  private volatile List<String> jsDocWriters = new ArrayList<String>();
//  private volatile Queue<String> hpQueue = new Queue<String>();
//  private volatile Js__doPostBack jsDoPostBack;
  
  public SourceResource(Source source) {
    sStart = System.currentTimeMillis();
    sExpire = getExpireSession(source);
    
    minSizeOfPage = -1;
    
    Properties properties = source.getProperties();
    
    decode = false;
    contentFilters = null;
    //CONTENT FILTER
    String filter = source.getProperties().getProperty(CONTENT_FILTER);
    if(filter != null && !(filter = filter.trim()).isEmpty()) {
      if(filter.charAt(0) != '#') {
        contentFilters = new ContentFilters(source, filter.split(","));
      } else if("#decode#".equals(filter)) {
        decode = true;
      }
    }
    
    String propertyValue = properties.getProperty(MIN_SIZE_OF_PAGE);
    if(propertyValue != null) {
      try {
        minSizeOfPage = Long.parseLong(propertyValue.trim());
      } catch (Exception e) {
        LogWebsite.getInstance().setThrowable(source, e);
      }
    }
    
    pageChecker = null;
    String pageCheckerValue = source.getProperties().getProperty(PAGE_CHECKER);
    if(pageCheckerValue != null && !(pageCheckerValue = pageCheckerValue.trim()).isEmpty()) {
      pageCheckerValue = pageCheckerValue.toLowerCase();
      if(pageCheckerValue.startsWith("vietnam")) {
        pageChecker = new VietnamesePageChecker();
        if(pageCheckerValue.indexOf("#data") > -1) {
          ((VietnamesePageChecker)pageChecker).setOnlyCheckData(true);
        } 
        if(pageCheckerValue.indexOf("#locale") > -1) {
          pageChecker.setCheckMode(IPageChecker.LOCALE);
        }
      }
    }
    
    linkCreator = new LinkCreator(source);
    
    //set url matcher
//    jsDoPostBack = null;
    
    if(source.getUpdateRegion() != null 
        && source.getUpdateRegion().getPaths() != null) {
      try {
        NodePathParser pathParser =  new NodePathParser();
        updatePaths = pathParser.toNodePath(source.getUpdateRegion().getPaths());
      } catch (Exception e) {
        LogWebsite.getInstance().setThrowable(source, e);
        updatePaths = null;
      }
    }
    
    linkGenerators.clear();
    new LinkGeneratorBuilder().buildLinkGenerator(source, linkGenerators);
    
    jsDocWriters = new JsDocWriterGetter().getJsDocWriters(properties);
  }
  
  public void resetSession() { 
    sStart = System.currentTimeMillis();
  }
  
  public List<Object> getLinkGenerators() { return linkGenerators; }

  private long getExpireSession(Source source) {
    if(source.getPriority() == 0) return 24*TIMEOUT_WEIGHT;
    int v = getExpireSession(source.getDepth());
    
    String proxy = source.getProperties().getProperty("proxy");
    if(proxy != null && proxy.trim().startsWith("blind")) {
      return 12*v*TIMEOUT_WEIGHT;
    }
    
    String [] homepages = source.getHome();
    int h = 0;
    if(homepages != null && homepages.length > 0) {
      h = getExpireSession(homepages.length);
    }
    return h*v*TIMEOUT_WEIGHT;
  }
  
  private int getExpireSession(int value) {
    if(value < 10) return 3;
    if(value >= 10 && value < 20) return 5;
    if(value >= 20 && value < 50) return 7;
    if(value >= 50 && value < 100) return 12;
    if(value >= 100 && value < 500) return 15;
    return 2*24;
  }
  
  public boolean isTimeout() {
    return sStart > 0 && System.currentTimeMillis() - sStart >= sExpire; 
  }
  
  public long getSessionStart() { return sStart; }

//  public URLCodeGenerator getCodeGenerator() { return codeGenerator; }

//  public URLGenerator getURLGenerator() { return urlGenerator;  }

  public long getMinSizeOfPage() { return minSizeOfPage; }

  public IPageChecker getPageChecker() { return pageChecker; }

  public List<String> getJsDocWriters() { return jsDocWriters; }

//  public Js__doPostBack getJsDoPostBack() { return jsDoPostBack; }
  
  public NodePath[] getUpdatePaths() { return updatePaths; }

  public boolean isDecode() { return decode; }

  public ContentFilters getContentFilters() { return contentFilters; }

  public LinkCreator getLinkCreator() { return linkCreator; }

  public final static boolean hasHomepageDatabase(Source source) {
    NameConverter converter = new NameConverter();
    String name = converter.encode(source.getFullName());
    return hasHomepageDatabase(name);
  }
  
  public final static boolean hasHomepageDatabase(String sourceName) {
    File folder = UtilFile.getFolder("sources/homepages/");
    File file  = new File(folder, sourceName +"/" + sourceName + ".url.idx");
    return file.exists();
  }
  
  
}
