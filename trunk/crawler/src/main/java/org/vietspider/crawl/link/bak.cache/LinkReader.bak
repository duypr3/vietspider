/***************************************************************************
 * Copyright 2001-2008 The VietSpider         All rights reserved.  		 *
 **************************************************************************/
package org.vietspider.crawl.link.cache;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileFilter;
import java.util.Comparator;
import java.util.List;
import java.util.zip.GZIPInputStream;

import org.vietspider.common.Application;
import org.vietspider.common.io.DataReader;
import org.vietspider.common.io.LogService;
import org.vietspider.common.io.UtilFile;
import org.vietspider.crawl.link.Link;
import org.vietspider.html.parser.HTMLParser2;
import org.vietspider.model.Source;
import org.vietspider.serialize.XML2Bean;

/** 
 * Author : Nhu Dinh Thuan
 *          nhudinhthuan@yahoo.com
 * Feb 24, 2008  
 */
class LinkReader extends LinkIO {

  private Source source;
  private  XML2Bean toBean  = XML2Bean.getInstance();
  
  private final static long TIMEOUT = 30*24*60*60*1000l;

  LinkReader(Source s) {
    this.source = s;
    folder = new File(UtilFile.getFolder("track/link/"), getFolderName(source));
  }

  synchronized void load(List<Link> values) {
    if(!folder.exists() || !folder.isDirectory()) return;
    
    File [] files = UtilFile.listFiles(folder, new FileFilter() {
      public boolean accept(File file) {
        return file.isFile() && !file.getName().endsWith(".tmp"); 
      }
    }, new Comparator<File>() {
      public int compare(File a, File b) {
        return (int)(a.lastModified() - b.lastModified());
      }
    });
    if(files == null) return;

    DataReader reader = new DataReader();

    for(int i = 0; i < files.length; i++) {
      if(!files[i].exists()) continue;
      String xml = load(reader, files[i]);
      files[i].delete();
      if(xml == null) continue;

      try {
        String  [] elements = xml.split(INSTANCE_SEPARATOR);
        for(String element : elements) {
          Link link = toLink(element);
          if(link == null) continue;
          link.setSource(source);
          values.add(link);
        }
      } catch (Throwable e) {
        StringBuilder builder = new StringBuilder(e.toString());
        builder.append(" error at link reader ");
        Exception exception = new Exception(builder.toString());
        LogService.getInstance().setMessage(source, exception, files[i].getAbsolutePath());
      }
      
      if(values.size() >= 100) break;
    }

//    if(folder.listFiles() == null 
//        || folder.listFiles().length < 1) {
//      UtilFile.deleteFolder(folder);
//    }
    
//    System.out.println(" === >  da load duoc "+ source + " : " + values.size());
  }
  
  private Link toLink(String xml) {
    CachedWeb cachedLink = null;
    try {
      cachedLink = toBean .toBean(CachedWeb.class, xml);
    } catch (Exception e) {
      LogService.getInstance().setThrowable(source, e);
    }
    if(cachedLink == null) return null;
    
    Link link = cachedLink.getLink();
    long time = cachedLink.getLastAccess();
    
    long current = System.currentTimeMillis();
    if(current - time >= TIMEOUT) return null;
    
    link.setFromCached(true);
    link.setSource(source);
    String html = cachedLink.getHtml();
    if(html == null || html.trim().isEmpty()) return link;
    try {
      link.setTokens(new HTMLParser2().createTokens(html.toCharArray()));
    } catch (Exception e) {
      LogService.getInstance().setThrowable(source, e);
    }
    return link;
  }
  
  private String load(DataReader reader, File file) {
    try {
//      System.out.println(" chuan bi load "+ file.getAbsolutePath());
      byte [] bytes = reader.load(file);
      ByteArrayInputStream inputStream = new ByteArrayInputStream(bytes);
      GZIPInputStream zipInput = new GZIPInputStream(inputStream);
      
      ByteArrayOutputStream byteOutputStream = new ByteArrayOutputStream();
      int read = -1;
      bytes = new byte[4*1024];
      while((read = zipInput.read(bytes)) != -1) {
        byteOutputStream.write(bytes, 0, read);
      }
      return byteOutputStream.toString(Application.CHARSET);
    } catch (OutOfMemoryError e) {
      System.gc();
      LogService.getInstance().setThrowable(source, e);
      return null;
    } catch (Throwable e) {
      LogService.getInstance().setThrowable(source, e);
      return null;
    }
  }

}
