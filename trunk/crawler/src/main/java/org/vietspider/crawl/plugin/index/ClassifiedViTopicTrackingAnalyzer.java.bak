/***************************************************************************
 * Copyright 2003-2006 by VietSpider - All rights reserved.  *
 *    *
 **************************************************************************/
package org.vietspider.crawl.plugin.index;

import java.util.List;

import org.vietspider.content.tp.TopicTrackingAnalyzer;
import org.vietspider.content.tp.TpWorkingData;
import org.vietspider.content.tp.vn.KeyFilter;
import org.vietspider.content.tp.vn.TpDocument;
import org.vietspider.index.analytics.PhraseData;
import org.vietspider.index.analytics.SequenceSplitter;
import org.vietspider.index.word.PhraseFilter;
import org.vietspider.index.word.WordSeparator;

/**
 *  Author : Nhu Dinh Thuan
 *          Email:nhudinhthuan@yahoo.com
 * Jul 24, 2006
 */
public class ClassifiedViTopicTrackingAnalyzer  implements TopicTrackingAnalyzer {

  private SequenceSplitter sequenceSplitter;
  private WordSeparator wordSeparator;

  private PhraseFilter phraseFilter;
  private KeyFilter keyFilter;


  public ClassifiedViTopicTrackingAnalyzer() {
    this(null);
  }

  public ClassifiedViTopicTrackingAnalyzer(PhraseFilter filter) {
    this.phraseFilter = filter;
    sequenceSplitter = new SequenceSplitter();
    wordSeparator = new WordSeparator();

    this.keyFilter = ClassifiedKeyFilter.getInstance();
    this.phraseFilter = new ClassifiedConjuntionFilter();
  }

  public void setKeyFilter(KeyFilter keyFilter) { this.keyFilter = keyFilter; }

  public TpWorkingData analyzeDocument(String text)  {
    TpWorkingData workingData = new TpWorkingData();
    TpDocument tpDocument = workingData.getTpDocument();
    List<PhraseData> sequences = sequenceSplitter.split(new PhraseData(false, text, 0));

//    System.out.println("========================================================");
    for (int i = 0; i < sequences.size(); i++) {
//      System.out.println("====  > "+ sequences.get(i).getValue());
      List<PhraseData> normalPhrases = wordSeparator.split(sequences.get(i), phraseFilter);
      StringBuilder builder = new StringBuilder();
      for(int k = 0; k < normalPhrases.size(); k++) {
        PhraseData nphrase = normalPhrases.get(k);
//        System.out.println("====  > "+ nphrase.getValue());
        if(keyFilter.isKey(nphrase)) {
          if(builder.length() > 0) {
            //              System.out.println("word 2 : "+ builder);
            tpDocument.addPhrase(builder.toString());
            builder.setLength(0);
          }

          workingData.addKey(nphrase.getValue());
          //            System.out.println("key: "+ nphrase.getValue());
          continue;
        } 

        //          System.out.println("phrase : "+ nphrase.getValue()+ " ==  >"+phraseFilter.isValid(nphrase));

        if(!phraseFilter.isValid(nphrase)){
          if(builder.length() > 0) {
            //              System.out.println("word 2 : "+ builder);
            tpDocument.addPhrase(builder.toString());
            builder.setLength(0);
          }
          continue;
        }

        if(hasWhitespace(nphrase.getValue())) {
          if(builder.length() > 0) {
            //              System.out.println("word 2 : "+ builder);
            tpDocument.addPhrase(builder.toString());
            builder.setLength(0);
          }
          tpDocument.addPhrase(nphrase.getValue());
          //            System.out.println("word: "+ nphrase.getValue());
          continue;
        }
        if(builder.length() > 0) builder.append(' ');
        builder.append(nphrase.getValue());
      }

    }

    return workingData;
  }

  private boolean hasWhitespace(String value) {
    int  index = 0;
    while(index < value.length()) {
      char c = value.charAt(index);
      if(Character.isWhitespace(c) || Character.isSpaceChar(c)) return true;
      index++;
    }
    return false;
  }


}
