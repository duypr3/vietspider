/***************************************************************************
 * Copyright 2001-2007 The VietSpider         All rights reserved.       *
 **************************************************************************/
package org.vietspider.crawl;

import java.text.DateFormat;
import java.util.Calendar;
import java.util.List;

import org.headvances.vietspider.source.monitor.MonitorDataSaver;
import org.headvances.vietspider.source.monitor.SourceLogHandler;
import org.vietspider.common.io.LogSource;
import org.vietspider.common.io.LogWebsite;
import org.vietspider.common.text.CalendarUtils;
import org.vietspider.crawl.crepo.SessionStore;
import org.vietspider.crawl.crepo.SessionStores;
import org.vietspider.crawl.crepo.WebClientInit;
import org.vietspider.crawl.io.access.SourceTrackerService;
import org.vietspider.crawl.io.tracker.PageDownloadedTracker;
import org.vietspider.crawl.link.Link;
import org.vietspider.crawl.link.SourceCrawlingSetup;
//import org.vietspider.crawl.link.cache.LinkCacherService;
import org.vietspider.crawl.plugin.CommonProcessPlugin;
import org.vietspider.crawl.plugin.ProcessPlugin;
import org.vietspider.io.CrawlSourceLog;
import org.vietspider.io.LogSourceImpl;
import org.vietspider.io.model.GroupIO;
import org.vietspider.link.generator.LinkGeneratorInvoker;
import org.vietspider.model.Group;
import org.vietspider.model.Source;
import org.vietspider.model.SourceIO;
import org.vietspider.net.client.Proxies;
import org.vietspider.net.client.ProxiesMonitor;
import org.vietspider.net.client.WebClient;
import org.vietspider.pool.Executor;
import org.vietspider.pool.Task;
import org.vietspider.pool.Worker;
//8,9,10,12,14,16,17,18,19,20,21,22,23
/** 
 * Author : Nhu Dinh Thuan
 *          nhudinhthuan@yahoo.com
 * Nov 10, 2007  
 */
public final class CrawlExecutor extends Executor<Source, Link> {
  
  private final static String PLUGIN_PACKAGE = "org.vietspider.crawl.plugin.";
  
  public final static String PLUGIN_NAME = "PluginName";
  
  private final static String PLUGIN_EXT = "ProcessPlugin";
  
  public CrawlExecutor(CrawlPool pool, int index) throws Exception {
    super(pool, index);
  }
  
  public void newSession(Source source) throws Throwable {
    if(source == null) return;
    
    PageDownloadedTracker.getInstance().registry(source);
    
    WebClient webClient = getResource(WebClient.class);
    if(webClient != null) webClient.shutdown();
    webClient = new WebClient();
    WebRedirectHandler redirectHandler = new WebRedirectHandler();
    webClient.setRedirectHandler(redirectHandler);
    putResource(webClient);
    
    source = SourceIO.getInstance().reload(source);
    if(source == null) return;
    
    new SourceCrawlingSetup().setup(source);
    
    Group group = GroupIO.getInstance().loadGroups().getGroup(source.getGroup());
    putResource(group);
    
    String pluginClassName = source.getGroup().toLowerCase().trim();
    Class<?> clazz = lookPluginClass(pluginClassName);
    
    //create source resource
//    putResource(new SourceResource(source));
    putResource(new CrawlSourceLog());
    
    // set link store
    SessionStore store = SessionStores.getStore(source.getCodeName());
    if(store == null) {
      store = SessionStores.getInstance().createSStore(this, source);
    } else {
//      System.out.println(" da thay crawl "+ store);
      WebClientInit webInit = new WebClientInit();
      webInit.init(this, store, source);
    }
    
    redirectHandler.setCodes(store);
    putResource(store);
    
    for(Worker<Source, Link> worker : workers) {
      worker.putResource(new HTMLDataExtractor());
//      setWorkerResources(worker);
      
      ProcessPlugin plugin = null;
      try {
        plugin = (ProcessPlugin) clazz.newInstance();
      } catch (Exception e) {
        LogWebsite.getInstance().setMessage(source, e, null);
        plugin = new CommonProcessPlugin();
      }
      
      plugin.setWorker(worker);
      worker.putResource(CrawlExecutor.PLUGIN_NAME, pluginClassName);
      worker.putResource(pluginClassName, plugin);
      plugin.setProcessRegion(source);
      
      store.setProcessor(plugin);
      
      worker.getResource(HTMLDataExtractor.class).newSession(source);
    }
    
    this.value = source;
  }
  
  /*public void setWorkerResources(Worker<Source, Link> worker) {
//    URLUtils urlUtils = new URLUtils();
//    putResource(urlUtils);
    
    HttpMethodHandler httpMethodHandler = worker.getResource(HttpMethodHandler.class);
    if(httpMethodHandler != null) httpMethodHandler.abort();

    WebClient webClient = getResource(WebClient.class);
    httpMethodHandler = new HttpMethodHandler(webClient);
//    SystemProperties system = SystemProperties.getInstance();
    try {
      String timeout = system.getValue(HttpMethodHandler.HTTP_REQUEST_TIMEOUT);
      if(timeout != null && !timeout.trim().isEmpty()) {
        httpMethodHandler.setTimeout(Long.parseLong(timeout));
      }
    } catch(Exception exp){      
      LogWebsite.getInstance().setThrowable(exp);
    }
    worker.putResource(httpMethodHandler);
    worker.putResource(new HTMLDataExtractor());
  }*/
  
  public synchronized void endSession() {
    if(value == null) return;
    Source source = value;
    value  = null;
//    new Exception().printStackTrace();
    
    LinkGeneratorInvoker.invokeEndSession(source.getLinkGenerators());
    
//    SessionStore store = SStoreManager.getInstance().getSessionStore(source.getFullName());;
//    store.endSession();
//    if(source.isSave()) new SourceWriter(source);
    
//    CrawlSourceLog sourceLog = getResource(CrawlSourceLog.class);
    
    final Calendar calendar = Calendar.getInstance();
    final MonitorDataSaver logSaver = SourceLogHandler.getInstance().getSaver();
    DateFormat folderFormat = CalendarUtils.getFolderFormat();
    String dateFolder = folderFormat.format(calendar.getTime());
    logSaver.update(source.getFullName(), dateFolder, 1, 0, 0, 0, 0, "");
//    final Source source = source;
    
    CrawlSourceLog sourceLog = getResource(CrawlSourceLog.class);
    if(sourceLog.getTotalSavedDataSuccessfull() < 1) {
      source.getProperties().put("Debug", "5");
      SourceIO.getInstance().save(source);
    }
    ((LogSourceImpl)LogSource.getInstance()).endLogSource(source.getFullName());
    
    logSaver.updateLastAccess(source, calendar, calendar.getTimeInMillis());
    WebClient  webClient = getResource(WebClient.class);
    if(webClient != null) webClient.shutdown();
    
    SourceTrackerService.getInstance().write(source);
    
    for(Worker<Source, Link> worker : workers) {
      String pluginName = worker.getResource(CrawlExecutor.PLUGIN_NAME);
      ProcessPlugin plugin = worker.<ProcessPlugin>getResource(pluginName);
      if(plugin != null) plugin.endSession();
      worker.clearResources();
    }
    
    SessionStores.removeStore(source.getCodeName());
    
//    PageDownloadedTracker.getInstance().close(source);
    
    clearResources();
    
    Runtime.getRuntime().gc();
  }
  
  public boolean isEndSession() {
    if(value == null) return true;
    
    SessionStore store = SessionStores.getStore(value.getCodeName());
//    System.out.println(value.getFullName() + " : "+ store.hashCode());
    if(store == null) {
      if(value != null && value.isDebug()) {
        LogSource.getInstance().setMessage(value, null,  "{crawling.end.by.store}");
      } 
//      System.out.println("end session by store null");
      return true;
    }
    
//    System.out.println(value.getFullName() + " : "+ store.hashCode() +"  timeout "+ sourceResource.isTimeout());
    if(value.isTimeout()) {
      if(value != null && value.isDebug()) {
        LogSource.getInstance().setMessage(value, null, "{crawling.end.by.timeout}");
      } 
//      System.out.println("end session by timeout");
      return true;
    }

//    System.out.println("end session by no link  : "+ !store.isEmpty());
    if(!store.isEmpty()) return false;
    
    for(int i = 1; i < workers.length; i++) { 
      if(!workers[i].isFree()) return false;
    }
    
    if(value != null && value.isDebug()) {
      LogSource.getInstance().setMessage(value, null, "{crawling.end}");
    } 
//    System.out.println(" worker is free ");
    
    return true;
  }
  
  public void abortSession() {
    if(value == null) return;
    Source source = value;
    value = null;
    
    LinkGeneratorInvoker.invokeEndSession(source.getLinkGenerators());
    
    ((LogSourceImpl)LogSource.getInstance()).endLogSource(source.getFullName());
    
    if(source.isDebug()) {
      LogSource.getInstance().setMessage(source, null, "{crawling.stop.by.user}");
    } 
//    if(source.isSave()) new SourceWriter(source);
//    SessionStore store = getResource(SessionStore.class);
//    store.endSession(source);
    
    for(Worker<Source, Link> worker : workers) {
      worker.abort();
      String pluginName = worker.getResource(CrawlExecutor.PLUGIN_NAME);
      ProcessPlugin plugin = worker.<ProcessPlugin>getResource(pluginName);
      if(plugin != null) plugin.endSession();
      worker.clearResources();
    }
    
    WebClient webClient = getResource(WebClient.class);
    if(webClient != null) webClient.shutdown();
    if(source != null) SessionStores.removeStore(source.getCodeName());
    
//    PageDownloadedTracker.getInstance().close(source);
    
    clearResources();
    
    Runtime.getRuntime().gc();
  }
  
  public boolean isWorking(String key) { 
    if(value == null) return false;
    return value.getFullName().equals(key);
  }
  
  public synchronized Link nextElement() {
    if(value  == null) return null;
    
    SessionStore store = SessionStores.getStore(value.getCodeName());
    if(store == null) return null;
    
    if(value.isTimeout()) return null;
//    SessionStore store = getResource(SessionStore.class);
    Link link  = store.poll();
    return link;
  }
  
  public Class<?> lookPluginClass(String className) {
    StringBuilder builder = new StringBuilder(PLUGIN_PACKAGE);
    builder.append(Character.toUpperCase(className.charAt(0)));
    className = builder.append(className.substring(1)).append(PLUGIN_EXT).toString();
    Class<?> clazz = CommonProcessPlugin.class;  
    try {
      clazz = getClass().getClassLoader().loadClass(className);
    } catch (Exception e) {
//      LogWebsite.getInstance().setMessage(e.toString());
      clazz = CommonProcessPlugin.class;  
      className = CommonProcessPlugin.class.getName();
    }
    return clazz;
  }
  
  public Task<?> [] createTasks() {
    return new Task<?>[] {
        new Step2VisitLink(),
        new Step3ProcessRssData(),
        new Step3ProcessHtmlData()
    };
  }
  
  public void addElement(List<Link> list, Link referer) {
    if(value == null || 
        value.getCodeName() != referer.getSource().getCodeName()) {
      Source source = referer.getSource();
      if(source.isDebug()) {
        LogSource.getInstance().setMessage(source, null,  referer.getAddress() + ": {incorrect.source}.");
      }
      return;
    }
    
    if(list.size() < 1) {
      Source source = referer.getSource();
      if(source.isDebug()) {
        LogSource.getInstance().setMessage(source, null,  referer.getAddress() + ": {no.link}.");
      }
    }
    
    WebClient webClient = getResource(WebClient.class);
    SessionStore store = SessionStores.getStore(value.getCodeName());
//    System.out.println(" add item 2 "+ value.getFullName() + " : "+ store.hashCode());
    if(store != null) store.push(webClient.getHost(), referer, list);
//    System.out.println(" add item 2 "+ value.getFullName() + " : "+ isEndSession());
  }
  
  public void addElement(List<Link> list, Source source) {
    if(value == null || value.getCodeName() != source.getCodeName()) return;
    SessionStore store = SessionStores.getStore(value.getCodeName());
    if(store != null) store.push(list);
  }
  
  CrawlSessionEntry[] duplicateEntries(CrawlSessionEntry entry) {
    if(entry.getPointer() < -1) return null;
    Source source = entry.getSource();
    
    WebClient webClient = getResource(WebClient.class);
    if(webClient == null) return null;
    String host = webClient.getHost();
    
    Proxies proxies = ProxiesMonitor.getInstance().getProxies(host);
    if(proxies == null || proxies.getTotalExcutor() < 2) return null;
    CrawlSessionEntry [] entries = new CrawlSessionEntry[proxies.getTotalExcutor()];
    for(int k = 0; k < entries.length; k++) {
      entries[k] = new CrawlSessionEntry(source.clone(), true);
      entries[k].setPointer(-2);
    }
//    System.out.println(" tai day ta co "+ entries.length);
    return entries;
//      executor.getPool().getQueueEntry().appendFirst(entries);
  }
  
}
