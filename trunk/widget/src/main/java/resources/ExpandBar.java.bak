

/**
 * Created by VietSpider Studio
 * Author : Nhu Dinh Thuan
 *          nhudinhthuan@yahoo.com
 * Apr 20, 2006
 */
import org.eclipse.swt.events.ExpandListener;
import org.eclipse.swt.graphics.GC;
import org.eclipse.swt.graphics.GCData;
import org.eclipse.swt.graphics.Point;
import org.eclipse.swt.graphics.Rectangle;
import org.eclipse.swt.internal.win32.LRESULT;
import org.eclipse.swt.internal.win32.OS;
import org.eclipse.swt.internal.win32.PAINTSTRUCT;
import org.eclipse.swt.internal.win32.RECT;
import org.eclipse.swt.internal.win32.SCROLLINFO;
import org.eclipse.swt.internal.win32.TCHAR;


public class ExpandBar extends Composite {
  
  final static char [] EXPLORERBAR = new char [] {'E', 'X', 'P', 'L', 'O', 'R', 'E', 'R', 'B', 'A', 'R', 0};

  private ExpandItem items[];
  private  volatile int  itemCount;
  private int focusIndex;
  private int spacing;
  private int yCurrentScroll;
  static final int HEADER_HEIGHT = 24;

  public ExpandBar(Composite parent, int style) {
    super(parent, checkStyle(style));
  }

  public void addExpandListener(ExpandListener listener) {
    checkWidget();
    if(listener == null) error(4);
    TypedListener typedListener = new TypedListener(listener);
    addListener(17, typedListener);
    addListener(18, typedListener);
  }

  int callWindowProc(int hwnd, int msg, int wParam, int lParam){
    if(handle == 0)
      return 0;
    return OS.DefWindowProc(hwnd, msg, wParam, lParam);
  }

  static int checkStyle(int style) {
    style &= 0xfffffeff;
    return style | 0x40000;
  }

  @SuppressWarnings("unused")
  public Point computeSize(int wHint, int hHint, boolean changed) {
    checkWidget();
    int height = 0;
    int width = 0;
    if((wHint == -1 || hHint == -1) && itemCount > 0) {
      int hDC = OS.GetDC(handle);
      int hTheme = 0;
      if(OS.COMCTL32_MAJOR >= 6 && OS.IsAppThemed())
        hTheme = OS.OpenThemeData(handle, EXPLORERBAR);
      height += spacing;
      for(int i = 0; i < itemCount; i++) {
        ExpandItem item = items[i];
        height += 24;
        if(item.expanded)
          height += item.height;
        height += spacing;
        width = Math.max(width, item.getPreferredWidth(hTheme, hDC));
      }

      OS.ReleaseDC(handle, hDC);
      if(hTheme != 0)
        OS.CloseThemeData(hTheme);
    }
    if(width == 0)
      width = 64;
    if(height == 0)
      height = 64;
    if(wHint != -1)
      width = wHint;
    if(hHint != -1)
      height = hHint;
    Rectangle trim = computeTrim(0, 0, width, height);
    return new Point(trim.width, trim.height);
  }

  void createHandle() {
    super.createHandle();
    state &= -3;
  }
  
  @SuppressWarnings("unused")
  synchronized  void createItem(ExpandItem item, int st, int index) {
    if(index < 0 || index > itemCount) error(6);
    itemCount++;    
    if(itemCount == items.length)  {
      ExpandItem newItems[] = new ExpandItem[itemCount + 4];
      System.arraycopy(items, 0, newItems, 0, items.length);
      items = newItems;
    }
    System.arraycopy(items, index, items, index + 1, itemCount - index);
    items[index] = item;  
    if(itemCount == 1) focusIndex = 0;
    RECT rect = new RECT();
    OS.GetWindowRect(handle, rect);
    item.width = Math.max(0, rect.right - rect.left - spacing * 2);
    layoutItems(index, true);
  }

  void createWidget() {
    super.createWidget();
    items = new ExpandItem[4];
    focusIndex = -1;
    if(OS.COMCTL32_MAJOR < 6 || !OS.IsAppThemed())
      backgroundMode = 1;
  }

  int defaultBackground() {
    if(OS.COMCTL32_MAJOR < 6 || !OS.IsAppThemed())
      return OS.GetSysColor(OS.COLOR_WINDOW);
    return super.defaultBackground();
  }

  public void destroyItem(ExpandItem item) {
    int index;
    for(index = 0; index < itemCount; index++)
      if(items[index] == item)
        break;

    if(index == itemCount)
      return;
    System.arraycopy(items, index + 1, items, index, --itemCount - index);
    items[itemCount] = null;
    if(itemCount == 0)
      focusIndex = -1;
    else
      if(focusIndex == index && focusIndex == itemCount)
      {
        focusIndex = index - 1;
        items[focusIndex].redraw(true);
      }
    item.redraw(true);
    layoutItems(index, true);
  }

  void drawThemeBackground(int hDC, int hwnd) {
    RECT rect2 = new RECT();
    OS.GetClientRect(handle, rect2);
    OS.MapWindowPoints(handle, hwnd, rect2, 2);
    int hTheme = OS.OpenThemeData(handle, EXPLORERBAR);
    OS.DrawThemeBackground(hTheme, hDC, 5, 0, rect2, null);
    OS.CloseThemeData(hTheme);
  }

  Control findBackgroundControl(){
    Control control = super.findBackgroundControl();
    if((OS.COMCTL32_MAJOR < 6 || !OS.IsAppThemed()) && control == null)
      control = this;
    return control;
  }

  Control findThemeControl() {
    return this;
  }

  public ExpandItem getItem(int index) {
    checkWidget();
    if(index < 0 || index >= itemCount)
      error(6);
    return items[index];
  }

  public int getItemCount() {
    checkWidget();
    return itemCount;
  }

  public ExpandItem[] getItems() {
    checkWidget();
    ExpandItem result[] = new ExpandItem[itemCount];
    System.arraycopy(items, 0, result, 0, itemCount);
    return result;
  }

  public int getSpacing(){
    checkWidget();
    return spacing;
  }

  public int indexOf(ExpandItem item) {
    checkWidget();
    if(item == null) error(4);
    for(int i = 0; i < itemCount; i++)
      if(items[i] == item)  return i;

    return -1;
  }

  void layoutItems(int index, boolean setScrollbar) {
    if(index < itemCount) {
      int y = spacing - yCurrentScroll;
      for(int i = 0; i < index; i++) {
        ExpandItem item = items[i];
        if(item.expanded)
          y += item.height;
        y += 24 + spacing;
      }

      for(int i = index; i < itemCount; i++){
        ExpandItem item = items[i];
        item.setBounds(spacing, y, 0, 0, true, false);
        if(item.expanded)
          y += item.height;
        y += 24 + spacing;
      }

    }
    if(setScrollbar) setScrollbar();
  }

  public void removeExpandListener(ExpandListener listener){
    checkWidget();
    if(listener == null)  error(4);

    if(eventTable == null) return;    
    eventTable.unhook(17, listener);
    eventTable.unhook(18, listener);
    return;    
  }

  void setScrollbar() {
    if(itemCount == 0)  return;
    RECT rect = new RECT();
    OS.GetClientRect(handle, rect);
    int height = rect.bottom - rect.top;
    ExpandItem item = items[itemCount - 1];
    int maxHeight = item.y + 24 + spacing;
    if(item.expanded)  maxHeight += item.height;
    if(yCurrentScroll > 0 && height > maxHeight) {
      yCurrentScroll = Math.max(0, (yCurrentScroll + maxHeight) - height);
      layoutItems(0, false);
    }
    maxHeight += yCurrentScroll;
    SCROLLINFO info = new SCROLLINFO();
    info.cbSize = 28;
    info.fMask = 7;
    info.nMin = 0;
    info.nMax = maxHeight;
    info.nPage = height;
    info.nPos = Math.min(yCurrentScroll, info.nMax);
    if(info.nPage != 0) info.nPage++;
    OS.SetScrollInfo(handle, 1, info, true);
  }

  public void setSpacing(int spacing){
    checkWidget();
    if(spacing < 0)  return;
    if(spacing == this.spacing) return;
    this.spacing = spacing;
    RECT rect = new RECT();
    OS.GetClientRect(handle, rect);
    int width = Math.max(0, rect.right - rect.left - spacing * 2);
    for(int i = 0; i < itemCount; i++) {
      ExpandItem item = items[i];
      if(item.width != width)
        item.setBounds(0, 0, width, item.height, false, true);
    }

    layoutItems(0, true);
    OS.InvalidateRect(handle, null, true);
  }

  void showItem(int index) {
    ExpandItem item = items[index];
    Control control = item.control;
    if(control != null && !control.isDisposed())
      if(item.expanded)
        OS.ShowWindow(control.handle, 5);
      else
        OS.ShowWindow(control.handle, 0);
    item.redraw(true);
    layoutItems(index + 1, true);
  }

  TCHAR windowClass(){
    return display.windowClass;
  }

  int windowProc(){
    return display.windowProc;
  }

  LRESULT WM_KEYDOWN(int wParam, int lParam) {
    LRESULT result = super.WM_KEYDOWN(wParam, lParam);
    if(result != null) return result;
    if(focusIndex == -1) return result;
    ExpandItem item = items[focusIndex];
    switch(wParam){
    default: break;

    case 13: // '\r'
    case 32: // ' '
      Event event = new Event();
      event.item = item;
      sendEvent(item.expanded ? 17 : 18, event);
      item.expanded = !item.expanded;
      showItem(focusIndex);
      return LRESULT.ZERO;

    case 38: // '&'
      if(focusIndex > 0) {
        item.redraw(true);
        focusIndex--;
        items[focusIndex].redraw(true);
        return LRESULT.ZERO;
      }
      break;

    case 40: // '('
      if(focusIndex < itemCount - 1) {
        item.redraw(true);
        focusIndex++;
        items[focusIndex].redraw(true);
        return LRESULT.ZERO;
      }
      break;
    }
    return result;
  }

  LRESULT WM_KILLFOCUS(int wParam, int lParam){
    LRESULT result = super.WM_KILLFOCUS(wParam, lParam);
    if(focusIndex != -1)
      items[focusIndex].redraw(true);
    return result;
  }

  LRESULT WM_LBUTTONDOWN(int wParam, int lParam) {
    LRESULT result = super.WM_LBUTTONDOWN(wParam, lParam);
    if(result == LRESULT.ZERO)
      return result;
    int x = lParam & 0xffff;
    int y = lParam >> 16;
      for(int i = 0; i < itemCount; i++) {
        ExpandItem item = items[i];
        boolean hover = item.x <= x && x < item.x + item.width && item.y <= y && y < item.y + 24;
        if(!hover || focusIndex == i)  continue;
        items[focusIndex].redraw(true);
        focusIndex = i;
        items[focusIndex].redraw(true);
        forceFocus();
        break;
      }

      return result;
  }

  LRESULT WM_LBUTTONUP(int wParam, int lParam) {
    LRESULT result = super.WM_LBUTTONUP(wParam, lParam);
    if(result == LRESULT.ZERO) return result;
    if(focusIndex == -1) return result;
    ExpandItem item = items[focusIndex];
    int x = lParam & 0xffff;
    int y = lParam >> 16;
        boolean hover = item.x <= x && x < item.x + item.width && item.y <= y && y < item.y + 24;
        if(hover)  {
          Event event = new Event();
          event.item = item;
          sendEvent(item.expanded ? 17 : 18, event);
          item.expanded = !item.expanded;
          showItem(focusIndex);
        }
        return result;
  }

  LRESULT WM_MOUSEMOVE(int wParam, int lParam) {
    LRESULT result = super.WM_MOUSEMOVE(wParam, lParam);
    if(result == LRESULT.ZERO)
      return result;
    int x = lParam & 0xffff;
    int y = lParam >> 16;
        for(int i = 0; i < itemCount; i++) {
          ExpandItem item = items[i];
          boolean hover = item.x <= x && x < item.x + item.width && item.y <= y && y < item.y + 24;
          if(item.hover != hover){
            item.hover = hover;
            item.redraw(true);
          }
        }

        return result;
  }

  @SuppressWarnings("unused")
  LRESULT WM_PAINT(int wParam, int lParam){
    PAINTSTRUCT ps = new PAINTSTRUCT();
    GCData gcData = new GCData();
    gcData.ps = ps;
    gcData.hwnd = handle;
    GC gc = new_GC(gcData);
    if(gc != null) {
      if(ps.right - ps.left != 0 && ps.bottom - ps.top != 0) {
        int hTheme = 0;
        if(OS.COMCTL32_MAJOR >= 6 && OS.IsAppThemed())
          hTheme = OS.OpenThemeData(handle, EXPLORERBAR);
        RECT clipRect = new RECT();
        OS.SetRect(clipRect, ps.left, ps.top, ps.right, ps.bottom);
        drawBackground(gc.handle);
        boolean drawFocus = false;
        if(handle == OS.GetFocus()) {
          int uiState = OS.SendMessage(handle, 297, 0, 0);
          drawFocus = (uiState & 1) == 0;
        }
        for(int i = 0; i < itemCount; i++){
          ExpandItem item = items[i];
          item.drawItem(gc, hTheme, clipRect, i == focusIndex && drawFocus);
        }

        if(hTheme != 0)  OS.CloseThemeData(hTheme);
        if(hooks(9) || filters(9)) {
          Event event = new Event();
          event.gc = gc;
          event.x = clipRect.left;
          event.y = clipRect.top;
          event.width = clipRect.right - clipRect.left;
          event.height = clipRect.bottom - clipRect.top;
          sendEvent(9, event);
          event.gc = null;
        }
      }
      gc.dispose();
    }
    return LRESULT.ZERO;
  }

  LRESULT WM_SETFOCUS(int wParam, int lParam){
    LRESULT result = super.WM_SETFOCUS(wParam, lParam);
    if(focusIndex != -1 && items != null && items[focusIndex] != null)
      items[focusIndex].redraw(true);
    return result;
  }

  LRESULT WM_SIZE(int wParam, int lParam){
    LRESULT result = super.WM_SIZE(wParam, lParam);
    int width = Math.max(0, (lParam & 0xffff) - spacing * 2);
    for(int i = 0; i < itemCount; i++){
      ExpandItem item = items[i];
      if(item.width != width)
        item.setBounds(0, 0, width, item.height, false, true);
    }

    setScrollbar();
    return result;
  }

  @SuppressWarnings("unused")
  LRESULT wmScroll(ScrollBar bar, boolean update, int hwnd, int msg, int wParam, int lParam){
    LRESULT result = super.wmScroll(bar, true, hwnd, msg, wParam, lParam);
    SCROLLINFO info = new SCROLLINFO();
    info.cbSize = 28;
    info.fMask = 4;
    OS.GetScrollInfo(handle, 1, info);
    int updateY = yCurrentScroll - info.nPos;
    OS.ScrollWindowEx(handle, 0, updateY, null, null, 0, null, 3);
    yCurrentScroll = info.nPos;
    if(updateY != 0) {
      for(int i = 0; i < itemCount; i++)
        items[i].y += updateY;

    }
    return result;
  }


}