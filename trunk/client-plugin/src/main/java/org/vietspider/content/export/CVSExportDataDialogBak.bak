/***************************************************************************
 * Copyright 2001-2008 The VietSpider         All rights reserved.  		 *
 **************************************************************************/
package org.vietspider.content.cvs;

import java.io.File;
import java.io.InputStream;
import java.util.prefs.Preferences;

import org.apache.http.Header;
import org.apache.http.message.BasicHeader;
import org.eclipse.swt.SWT;
import org.eclipse.swt.custom.TableEditor;
import org.eclipse.swt.events.SelectionAdapter;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.graphics.Point;
import org.eclipse.swt.graphics.Rectangle;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.layout.RowLayout;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Event;
import org.eclipse.swt.widgets.FileDialog;
import org.eclipse.swt.widgets.Listener;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.swt.widgets.Table;
import org.eclipse.swt.widgets.TableColumn;
import org.eclipse.swt.widgets.TableItem;
import org.vietspider.client.common.ClientConnector2;
import org.vietspider.client.common.PluginClientHandler;
import org.vietspider.common.Application;
import org.vietspider.common.io.DataWriter;
import org.vietspider.common.io.LicenseVerifier;
import org.vietspider.common.util.Worker;
import org.vietspider.net.client.AbstClientConnector.HttpData;
import org.vietspider.net.server.URLPath;
import org.vietspider.serialize.Object2XML;
import org.vietspider.ui.services.ClientLog;
import org.vietspider.ui.widget.ApplicationFactory;
import org.vietspider.ui.widget.UIDATA;
import org.vietspider.ui.widget.waiter.ThreadExecutor;
import org.vietspider.ui.widget.waiter.WaitLoading;

/** 
 * Author : Nhu Dinh Thuan
 *          nhudinhthuan@yahoo.com
 * Jun 16, 2008  
 */
public class CVSExportDataDialogBak {

  private Shell shell;
  private Button butExport;
//  private Text txtHeader;
  
  private Table table; 
  
  private Button [] butHeaders;

  private boolean stop = false;
  private String value;
  
  public CVSExportDataDialogBak(Shell parent, String value_) {
    shell = new Shell(parent, SWT.TITLE | SWT.RESIZE | SWT.APPLICATION_MODAL);
    shell.setLayout(new GridLayout(1, false));
    shell.setImage(parent.getImage());
    
    this.value = value_;

    ApplicationFactory factory = new ApplicationFactory(shell, "CVSDataExporter", getClass().getName());
    shell.setText("CVS Plugin");
    factory.setComposite(shell);
    
    table = new Table(shell, SWT.BORDER | SWT.MULTI);
    table.setLinesVisible(false);
    GridData gridData = new GridData(GridData.FILL_BOTH);
    table.setLayoutData(gridData);

    final int TEXT_MARGIN = 10;
    table.addListener(SWT.MeasureItem, new Listener() {
      public void handleEvent(Event event) {
        TableItem item = (TableItem)event.item;
        String text = item.getText(event.index);
        Point size = event.gc.textExtent(text);
        event.width = size.x + 5*TEXT_MARGIN;
        event.height = Math.max(event.height, size.y + TEXT_MARGIN);
      }
    });

//    txtHeader = new Text(shell, SWT.BORDER | SWT.MULTI | SWT.WRAP | SWT.V_SCROLL);
//    GridData gridData = new GridData(GridData.FILL_BOTH);
//    txtHeader.setLayoutData(gridData);
//    txtHeader.setFont(UIDATA.FONT_9);
 
    Composite buttonComposite = new Composite(shell, SWT.NONE);
    RowLayout rowLayout = new RowLayout();
    rowLayout.justify = true;
    buttonComposite.setLayout(rowLayout);
    gridData = new GridData(GridData.FILL_HORIZONTAL);
    buttonComposite.setLayoutData(gridData);
    factory.setComposite(buttonComposite);
    
    butExport = factory.createButton(SWT.PUSH); 
    butExport.setText("Export to File...");
    butExport.addSelectionListener(new SelectionAdapter(){
      @SuppressWarnings("unused")
      public void widgetSelected(SelectionEvent evt) {
        String domainId = getDomainId();
        if(domainId == null) return;
        
        File file = getFile();
        if(file == null) return;
        export(domainId, file);
      }   
    }); 
    
//    Button butExport2 = factory.createButton("butExportFile", new SelectionAdapter(){
//      @SuppressWarnings("unused")
//      public void widgetSelected(SelectionEvent evt) {
//        String domainId = getDomainId();
//        if(domainId == null) return;
////        export2(domainId);
//      }   
//    });   
//    butExport2.setText("Export on Server");


    Button butCancel = factory.createButton(SWT.PUSH);
    butCancel.setText("Close");
    butCancel.addSelectionListener(new SelectionAdapter(){
      @SuppressWarnings("unused")
      public void widgetSelected(SelectionEvent evt) {
        if(!butExport.isEnabled()) {
          stop = true;
        } 
        shell.setVisible(false);
//        shell.dispose();
      }   
    });   
    
    File licenseFile = LicenseVerifier.loadLicenseFile();
    boolean license = LicenseVerifier.verify("export", licenseFile);
    if(!license) shell.setText("CVS Plugin (Trial)");

    loadHeaders(getDomainId());
  }
  
  public boolean isDisposed() {
    return shell.isDisposed();
  }
  
  public void setVisible(boolean value) {
    shell.setVisible(value);
  }
  
  private void export(final String domainId, final File file) {  
    Worker excutor = new Worker() {
      
      private String csvheader;
      
      public void abort() {
        ClientConnector2.currentInstance().abort();
      }

      public void before() {
        StringBuilder builder = new StringBuilder();
        for(int i = 0; i < butHeaders.length; i++) {
          if(!butHeaders[i].getSelection()) continue;
          if(builder.length() > 0) builder.append(',');
          builder.append(butHeaders[i].getText());
        }
        csvheader = builder.toString();// txtHeader.getText();
      }

      public void execute() {
        String plugin = "cvs.export.data.plugin";
        if(stop) return;
        ClientConnector2 connector = ClientConnector2.currentInstance();
        HttpData httpData = null;
        try {
          PluginClientHandler handler = new PluginClientHandler();
          String pageValue = handler.send(plugin, "compute.export", domainId);
          int totalPage  = -1;
          try {
            totalPage = Integer.parseInt(pageValue);
          } catch (Exception e) {
            return;
          }
          
          if(totalPage < 1) return;
          int page = 1;
          
          DataWriter writer = new DataWriter();
          if(!file.exists() || file.length() < 1) {
            writer.save(file, csvheader.getBytes(Application.CHARSET));
          }
          
          CSVModel model = new CSVModel();
          model.setDomainId(domainId);
          
          File licenseFile = LicenseVerifier.loadLicenseFile();
          boolean license = LicenseVerifier.verify("export", licenseFile);
          if(!license && totalPage > 10) totalPage = 10;
          
          while(page <= totalPage) {
            Header [] headers = new Header[] {
                new BasicHeader("action", "export"),
                new BasicHeader("plugin.name", plugin)
//                new BasicHeader("page", String.valueOf(page))
            };
            model.setPage(page);
            model.setHeaders(csvheader.split(","));
            String xml = Object2XML.getInstance().toXMLDocument(model).getTextValue();
            byte [] bytes = xml.getBytes(Application.CHARSET);
            
            httpData = connector.loadResponse(URLPath.DATA_PLUGIN_HANDLER, bytes, headers);
            InputStream inputStream = httpData.getStream();
            
            try {
              if(file.length() > 0) writer.append(file, "\n".getBytes());
              writer.save(file, inputStream, true);
              inputStream.close();
            } finally {
              connector.release(httpData);
              inputStream.close();
            }
            page++;
          }
        } catch (Exception e) {
          ClientLog.getInstance().setException(null, e);
        } finally {
          connector.release(httpData);
        }
      }

      public void after() { shell.dispose(); }
    };
    butExport.setEnabled(false);
    WaitLoading waitLoading =  new WaitLoading(butExport, excutor, SWT.TITLE);
    waitLoading.open();
  }
  
  private File getFile() {
    Preferences prefs = Preferences.userNodeForPackage( getClass());     
    String p = prefs.get("openExportData", "");
    FileDialog dialog = new FileDialog(shell, SWT.SAVE);
    dialog.setFilterExtensions(new String[]{"*.csv"});
    if(p != null) {
      File file = new File(p);
      if(file.isDirectory()) {
        dialog.setFilterPath(p);
      } else {
        try {
          dialog.setFilterPath(file.getParentFile().getAbsolutePath());
        } catch (Exception e) {
        }
      }
    }
    p = dialog.open();
    if( p != null) prefs.put("openExportData", p);
    if( p == null || p.trim().isEmpty()) return null;    
    if(p.indexOf('.') < 0) p = p + ".csv";
    return new File(p);
  }
  
  private String getDomainId() {
    String elements [] = value.split("/");
    if(elements.length < 1) return  null;
    
    elements[0] = elements[0].replace('.', '/');
    StringBuilder builder = new StringBuilder(elements[0]);
    
    if(elements.length > 1) {
      if(elements[1].indexOf('.') > -1) {
        builder.append('.').append(elements[1]);
      } else {
        builder.append('.').append(Application.GROUPS[0]).append('.').append(elements[1]);
      }
    }
    if(elements.length > 2) builder.append('.').append(elements[2]);
    return builder.toString();
  }
  
  public void loadHeaders(final String domainId) {
    if(domainId == null) return;
    Worker excutor = new Worker() {

      private String error = null;
      private String data = null;

      public void abort() {
        ClientConnector2.currentInstance().abort();
      }

      public void before() {
      }

      public void execute() {
        try {
          PluginClientHandler handler = new PluginClientHandler();
          data = handler.send("cvs.export.data.plugin", "load.headers", domainId);
        } catch (Exception e) {
          error = e.toString();
        }

      }

      public void after() {
        if (error != null && !error.isEmpty()) {
          ClientLog.getInstance().setMessage(shell, new Exception(error));
          return;
        }
        createCategories(data.split(","));
        
        Rectangle displayRect = UIDATA.DISPLAY.getBounds();
        int x = (displayRect.width - 350) / 2;
        int y = (displayRect.height - 300)/ 2;
        shell.setLocation(x, y);
        shell.setSize(450, 150);
        shell.open();
      }
    };
    new ThreadExecutor(excutor, shell).start();
  }
  
  protected void createCategories(String [] names) {
    int length = 0;
    for (int i = 0; i < names.length; i++) {
      if(length < names[i].length()) {
        length = names[i].length();
      }
    }
    length = length *5;
    if(length < 120) length = 120;

    for (int i = 0; i < 4; i++) {
      TableColumn column = new TableColumn(table, SWT.NONE);
      column.setWidth(length);
    }

    int row = names.length/4 + 1;
    for (int i = 0; i < row; i++) {
      new TableItem(table, SWT.NONE);
    }

    butHeaders = new Button[names.length];
    TableItem[] items = table.getItems();
    int index = 0;
    for (int i = 0; i < row; i++) {
      for(int j = 0; j < 4; j++) {
        TableEditor editor = new TableEditor(table);
        editor.grabHorizontal = true;

        if(index >= names.length) break;
        butHeaders[index] = new Button(table, SWT.CHECK);
        butHeaders[index].setText(names[index]);
        butHeaders[index].setFont(UIDATA.FONT_8V);
        butHeaders[index].setSelection(true);
        
        editor.setEditor(butHeaders[index], items[i], j);
        butHeaders[index].pack();
        index++;
      }
    }

  }
  

}
