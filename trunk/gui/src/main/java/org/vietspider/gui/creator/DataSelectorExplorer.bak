/***************************************************************************
 * Copyright 2001-2007 The VietSpider         All rights reserved.  		 *
 **************************************************************************/
package org.vietspider.gui.creator;

import java.util.ArrayList;
import java.util.Iterator;

import org.eclipse.swt.SWT;
import org.eclipse.swt.custom.SashForm;
import org.eclipse.swt.custom.StyledText;
import org.eclipse.swt.events.FocusAdapter;
import org.eclipse.swt.events.FocusEvent;
import org.eclipse.swt.events.KeyAdapter;
import org.eclipse.swt.events.KeyEvent;
import org.eclipse.swt.events.MouseAdapter;
import org.eclipse.swt.events.MouseEvent;
import org.eclipse.swt.events.SelectionAdapter;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Combo;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Label;
import org.eclipse.swt.widgets.List;
import org.eclipse.swt.widgets.Listener;
import org.eclipse.swt.widgets.Menu;
import org.eclipse.swt.widgets.ScrollBar;
import org.eclipse.swt.widgets.Text;
import org.eclipse.swt.widgets.Tree;
import org.eclipse.swt.widgets.TreeItem;
import org.vietspider.browser.FastWebClient;
import org.vietspider.html.HTMLDocument;
import org.vietspider.html.HTMLNode;
import org.vietspider.html.path2.HTMLExtractor;
import org.vietspider.html.path2.NodePath;
import org.vietspider.html.path2.NodePathParser;
import org.vietspider.model.Region;
import org.vietspider.model.RegionUtils;
import org.vietspider.ui.action.Event;
import org.vietspider.ui.browser.PageMenu;
import org.vietspider.ui.htmlexplorer.HtmlExplorerListener;
import org.vietspider.ui.htmlexplorer.NodeEditor2;
import org.vietspider.ui.htmlexplorer.NodeInfoViewer;
import org.vietspider.ui.htmlexplorer.PathConfirmDialog;
import org.vietspider.ui.htmlexplorer.StyledList;
import org.vietspider.ui.htmlexplorer.TreeAddButton;
import org.vietspider.ui.htmlexplorer.TreeHandler;
import org.vietspider.ui.services.ClientLog;
import org.vietspider.ui.services.ClientRM;
import org.vietspider.ui.widget.ApplicationFactory;
import org.vietspider.ui.widget.UIDATA;
import org.vietspider.ui.widget.action.HyperlinkAdapter;
import org.vietspider.ui.widget.action.HyperlinkEvent;

/** 
 * Author : Nhu Dinh Thuan
 *          nhudinhthuan@yahoo.com
 * Oct 30, 2007  
 */
public class DataSelectorExplorer extends HtmlExplorerListener {

  //  Text txtPath;
//  protected  NodeEditor2 txtPath;
//  protected  StyledList lstPath;
  protected  List cboRegionName;
  protected  Combo cboType;
  
  protected Label lblStatus;
  protected Button butRemovePath;
  protected String errorPath;

  protected Text txtInputName;

  protected TreeAddButton treeAddButton;

  private java.util.List<NodeInfoViewer> nodeViewers = new ArrayList<NodeInfoViewer>();

  //  protected ISourceInfo iSourceInfo;

  private java.util.List<Region> dataRegions = new ArrayList<Region>(); 

  public DataSelectorExplorer(Composite parent/*, ISourceInfo iSource*/) {
    super(parent);

    //    this.iSourceInfo = iSource;

    GridLayout gridLayout = new GridLayout(1, false);
    gridLayout.marginHeight = 0;
    gridLayout.horizontalSpacing = 0;
    gridLayout.verticalSpacing = 0;
    gridLayout.marginWidth = 0;
    setLayout(gridLayout);
    ApplicationFactory factory = new ApplicationFactory(this, "DataExplorer", getClass().getName()); 
    //  if(parent == null) shell.setImage(factory.loadImage("VietSpider2.ico"));

    SashForm sash0 = new SashForm(this, SWT.HORIZONTAL);
    sash0.setBackground(getDisplay().getSystemColor(SWT.COLOR_WIDGET_BACKGROUND));
    sash0.setLayoutData(new GridData(GridData.FILL_BOTH | GridData.VERTICAL_ALIGN_BEGINNING));

    browser = ApplicationFactory.createBrowser(sash0, PageMenu.class);
    /*browser.addStatusTextListener(new StatusTextListener() {
      public void changed(StatusTextEvent event) {
        browser.setData("query", event.text);
      }
    });*/

    //  ############################################################# Button UI ######################

    tree = new Tree(sash0, SWT.MULTI | SWT.BORDER);
    tree.addSelectionListener(new SelectionAdapter(){
      @SuppressWarnings("unused")
      public void widgetSelected(SelectionEvent evt) {
        selectTree();       
      }   
    });
    tree.addMouseListener(new MouseAdapter() {
      public void mouseDown(MouseEvent e) {
        if(e.button == 2) addItems();
      }
    });

    Object treeMenu ;
//    if(XPWidgetTheme.isPlatform()) {  
//      PopupMenu popupMenu = new PopupMenu(tree, XPWidgetTheme.THEME);
//      treeMenu = new CMenu();
//      popupMenu.setMenu((CMenu)treeMenu);
//    } else {
      treeMenu = new Menu(getShell(), SWT.POP_UP);
      tree.setMenu((Menu)treeMenu);
//    }

    factory.createStyleMenuItem( treeMenu, "itemAdd", "+.gif", new SelectionAdapter(){
      @SuppressWarnings("unused")
      public void widgetSelected(SelectionEvent evt) {
        addItems();
      }   
    });  

    factory.createStyleMenuItem(treeMenu, "itemRemove", "-.gif", new SelectionAdapter(){
      @SuppressWarnings("unused")
      public void widgetSelected(SelectionEvent evt) {
        removeItem();
      }   
    });

    factory.createStyleMenuItem(treeMenu, SWT.SEPARATOR);

    factory.createStyleMenuItem(treeMenu, "itemExpand", new SelectionAdapter(){
      @SuppressWarnings("unused")
      public void widgetSelected(SelectionEvent evt) {
        expand(true);
      }   
    });

    factory.createStyleMenuItem(treeMenu, "itemCollapse", new SelectionAdapter(){
      @SuppressWarnings("unused")
      public void widgetSelected(SelectionEvent evt) {
        expand(false);
      }   
    });

    factory.createStyleMenuItem(treeMenu, SWT.SEPARATOR);

    factory.createStyleMenuItem(treeMenu, "itemExpandDataNode", new SelectionAdapter(){
      @SuppressWarnings("unused")
      public void widgetSelected(SelectionEvent evt) {
        expandDataNode();
      }   
    });

    factory.createStyleMenuItem(treeMenu, "itemCollapseTree", new SelectionAdapter(){
      @SuppressWarnings("unused")
      public void widgetSelected(SelectionEvent evt) {
        TreeItem [] items = tree.getItems();
        if(items == null) return;
        for(TreeItem item : items) {
          expand(item, false);
        }
      }   
    });

    factory.createStyleMenuItem(treeMenu, SWT.SEPARATOR);

    factory.createStyleMenuItem( treeMenu, "itemView", "view.gif", new SelectionAdapter(){
      @SuppressWarnings("unused")
      public void widgetSelected(SelectionEvent evt) {
        viewItem();
      }   
    });   

    sash0.setWeights( new int[]{500, 300});

    //  ############################################################# Button UI ######################    

    Composite bottom = new Composite(this, SWT.NONE);
    GridData gridData = new GridData(GridData.FILL_HORIZONTAL);
    gridData.heightHint = 200;
    bottom.setLayoutData(gridData);

    gridLayout = new GridLayout(2, false);
    gridLayout.marginHeight = 1;
    gridLayout.horizontalSpacing = 2;
    gridLayout.verticalSpacing = 2;
    gridLayout.marginWidth = 1;
    bottom.setLayout(gridLayout);

    Composite nameComposite = new Composite(bottom, SWT.NONE);
    gridData = new GridData(GridData.FILL_VERTICAL);
    nameComposite.setLayoutData(gridData);
    gridLayout = new GridLayout(2, false);
    nameComposite.setLayout(gridLayout);
    factory.setComposite(nameComposite);

    txtInputName = factory.createText(SWT.BORDER);
    gridData = new GridData(GridData.FILL_HORIZONTAL);
    txtInputName.setLayoutData(gridData);
    txtInputName.setFont(UIDATA.FONT_10B);
    txtInputName.addKeyListener(new KeyAdapter(){
      public void keyPressed(KeyEvent event) {
        if(event.keyCode == SWT.CR) addRegion();
      }
    });

    gridData = new GridData();
    gridData.heightHint = 26;
    factory.createIcon("butAddRegionName", new HyperlinkAdapter(){  
      @SuppressWarnings("unused")
      public void linkActivated(HyperlinkEvent evt) {
        addRegion();
      }

    }).setLayoutData(gridData);

    cboRegionName = factory.createList(SWT.MULTI | SWT.BORDER  | SWT.V_SCROLL | SWT.H_SCROLL | SWT.READ_ONLY, new String[0]);
    gridData = new GridData(GridData.FILL_VERTICAL);
    gridData.horizontalSpan = 2;
    gridData.widthHint = 150;
    cboRegionName.setLayoutData(gridData);
    cboRegionName.setFont(UIDATA.FONT_10B);
    cboRegionName.addFocusListener(new FocusAdapter() {
      @SuppressWarnings("unused")
      public void focusGained(FocusEvent arg0) {
        int selectedRegion = cboRegionName.getSelectionIndex();
        if(selectedRegion < 0) return;
        dataRegions.get(selectedRegion).setPaths(lstPath.getItems());
      }

    });
    cboRegionName.addSelectionListener(new SelectionAdapter(){
      @SuppressWarnings("unused")
      public void widgetSelected(SelectionEvent evt) {
        int idx = cboRegionName.getSelectionIndex();
        setSelectedPaths(idx);
      }      
    });

    Object nameMenu;
//    if(XPWidgetTheme.isPlatform()) {  
//      PopupMenu popupMenu = new PopupMenu(cboRegionName, XPWidgetTheme.THEME);
//      nameMenu = new CMenu();
//      popupMenu.setMenu((CMenu)nameMenu);
//    } else {
      nameMenu = new Menu(getShell(), SWT.POP_UP);
      cboRegionName.setMenu((Menu)nameMenu);
//    }
    
    factory.createStyleMenuItem(nameMenu, "menuRenameRegion", new SelectionAdapter(){
      @SuppressWarnings("unused")
      public void widgetSelected(SelectionEvent evt) {
        new RenameRegionDialog(getShell(), DataSelectorExplorer.this);
      }
    });
    
    factory.createStyleMenuItem(nameMenu, "menuUpRegion", new SelectionAdapter(){
      @SuppressWarnings("unused")
      public void widgetSelected(SelectionEvent evt) {
        int index = cboRegionName.getSelectionIndex();
        changePosition(index, index-1);
      }
    });
    
    factory.createStyleMenuItem(nameMenu, "menuDownRegion", new SelectionAdapter(){
      @SuppressWarnings("unused")
      public void widgetSelected(SelectionEvent evt) {
        int index = cboRegionName.getSelectionIndex();
        changePosition(index, index+1);
      }
    });

    factory.createStyleMenuItem(nameMenu, "menuRemoveRegion", new SelectionAdapter(){
      @SuppressWarnings("unused")
      public void widgetSelected(SelectionEvent evt) {
        removeRegion();
      }
    });
    
    cboType = factory.createCombo(SWT.BORDER);
    cboType.setItems(new String[]{"DEFAULT", "TEXT", "CDATA", "FILE"});
    gridData = new GridData();
    gridData.horizontalSpan = 2;
    gridData.widthHint = 150;
    cboType.setLayoutData(gridData);
    cboType.setFont(UIDATA.FONT_10B);
    cboType.addSelectionListener(new SelectionAdapter(){
      @SuppressWarnings("unused")
      public void widgetSelected(SelectionEvent evt) {
        int index = cboRegionName.getSelectionIndex();
        if(index < 0) return;
        Region region = dataRegions.get(index);
        region.setType(cboType.getSelectionIndex());
      }
    });
    cboType.select(0);

    Composite dataComposite = new Composite(bottom, SWT.NONE);
    gridData = new GridData(GridData.FILL_BOTH);
    dataComposite.setLayoutData(gridData);

    gridLayout = new GridLayout(1, false);
    gridLayout.marginHeight = 0;
    gridLayout.horizontalSpacing = 0;
    gridLayout.verticalSpacing = 0;
    gridLayout.marginWidth = 2;
    dataComposite.setLayout(gridLayout);

    factory.setComposite(dataComposite);

//    txtPath =  new NodeEditor2(dataComposite, this, factory);//factory.createText();
//    gridData = new GridData(GridData.FILL_HORIZONTAL);
//    gridData.heightHint = 70;
//    txtPath.setLayoutData(gridData);
//
//    //    lstPath = factory.createList(SWT.SINGLE | SWT.BORDER  | SWT.V_SCROLL| SWT.READ_ONLY, new String[0]);
//    lstPath = new StyledList(factory, factory.getComposite(), SWT.BORDER | SWT.SINGLE | SWT.V_SCROLL | SWT.H_SCROLL); 
//    lstPath.setFont(UIDATA.FONT_10B);
//    lstPath.addSelectionListener(new SelectionAdapter(){
//      @SuppressWarnings("unused")
//      public void widgetSelected(SelectionEvent e){
//        int selectedIndex = lstPath.getSelectionIndex();
//        if(selectedIndex < 0) return;
//        String path  = lstPath.getItem(selectedIndex);
//        txtPath.setText(path);
//        java.util.List<String> paths = traverseTree(TreeHandler.SELECT, new String[]{path});
//        for(String ele : paths) lstPath.remove(ele);
//        if(paths.size() > 0 && lstPath.getItemCount() > 0) lstPath.select(0);
//      }
//    });
//
//    lstPath.getHorizontalBar().addListener(SWT.Selection, new Listener() {
//      public void handleEvent(org.eclipse.swt.widgets.Event e) {
//        ScrollBar bar = lstPath.getHorizontalBar();
//        StyledText textViewer = txtPath.getTextViewer();
//        ScrollBar bar1 = textViewer.getHorizontalBar();
//        bar1.setSelection(bar.getSelection());
//        bar1.notifyListeners(SWT.Selection, e);
//      }
//    });
//
//    gridData = new GridData(GridData.FILL_BOTH);
//    gridData.horizontalSpan = 2;
//    lstPath.setLayoutData(gridData);
//
//    Object pathMenu;
////    if(XPWidgetTheme.isPlatform()) {  
////      PopupMenu popupMenu = new PopupMenu(lstPath, XPWidgetTheme.THEME);
////      pathMenu = new CMenu();
////      popupMenu.setMenu((CMenu)pathMenu);
////    } else {
//      pathMenu = new Menu(getShell(), SWT.POP_UP);
//      lstPath.setMenu((Menu)pathMenu);
////    }
//
//    factory.createStyleMenuItem(pathMenu, "menuClearSelected", new SelectionAdapter(){
//      @SuppressWarnings("unused")
//      public void widgetSelected(SelectionEvent evt) {
//        lstPath.clearSelection();
//      }
//    });
//
//    factory.createStyleMenuItem(pathMenu, SWT.SEPARATOR);
//
//    factory.createStyleMenuItem(pathMenu, "menuRemoveSelected", "-.gif", new SelectionAdapter(){
//      @SuppressWarnings("unused")
//      public void widgetSelected(SelectionEvent evt) {
//        int idx = lstPath.getSelectionIndex();
//        if(idx < 0) return;
//        lstPath.remove(idx);
//      }
//    });
//
//    factory.createStyleMenuItem(pathMenu, "menuRemove", new SelectionAdapter(){
//      @SuppressWarnings("unused")
//      public void widgetSelected(SelectionEvent evt) {
//        lstPath.removeAll();
//      }
//    });

    Composite buttonComponent = new Composite(bottom, SWT.NONE);
    gridData = new GridData(GridData.FILL_HORIZONTAL);
    gridData.horizontalSpan = 2;
    buttonComponent.setLayoutData(gridData);

    gridLayout = new GridLayout(3, false);
    gridLayout.marginHeight = 0;
    gridLayout.horizontalSpacing = 15;
    gridLayout.verticalSpacing = 0;
    gridLayout.marginWidth = 10;
    buttonComponent.setLayout(gridLayout);
    
    Composite removeComposite = new Composite(buttonComponent, SWT.NONE);
    removeComposite.setLayout(new GridLayout(2, false));
    gridData = new GridData(GridData.FILL_HORIZONTAL);
    removeComposite.setLayoutData(gridData);
    
    factory.setComposite(removeComposite);

    lblStatus = factory.createLabel(SWT.NONE);
    gridData = new GridData();
//    gridData.widthHint = 305;
    lblStatus.setLayoutData(gridData);
    lblStatus.setFont(UIDATA.FONT_10);
    lblStatus.setForeground(getDisplay().getSystemColor(SWT.COLOR_RED));
    
    ClientRM resource = new ClientRM("HTMLExplorer");
    butRemovePath = factory.createButton(SWT.PUSH);
    butRemovePath.setText(resource.getLabel("remove.path.yes"));
    butRemovePath.addSelectionListener(new SelectionAdapter(){
      @SuppressWarnings("unused")
      public void widgetSelected(SelectionEvent evt) {
        if(errorPath != null) lstPath.remove(errorPath);
        showErrorPath(null);
      }      
    });
    butRemovePath.setVisible(false);
    butRemovePath.setFont(UIDATA.FONT_9);
    
    factory.setComposite(buttonComponent);
    
    
    Button button = factory.createButton("butOk", new SelectionAdapter(){
      @SuppressWarnings("unused")
      public void widgetSelected(SelectionEvent evt) {       
        clickOk();          
      }   
    });
    button.setFont(UIDATA.FONT_9VB);
    gridData = new GridData(GridData.HORIZONTAL_ALIGN_END);
    button.setLayoutData(gridData);

    button = factory.createButton("butCancel", new SelectionAdapter(){
      @SuppressWarnings("unused")
      public void widgetSelected(SelectionEvent evt) {       
        clickCancel();          
      }   
    }); 
    gridData = new GridData(GridData.HORIZONTAL_ALIGN_END);
    button.setLayoutData(gridData);

    handler = new TreeHandler();    

    treeAddButton = new TreeAddButton(this);
  }  

  void selectTree(){
    TreeItem[] items = tree.getSelection();
    if( items == null || items.length  < 1) return;
    TreeItem item = items[0];
    String txt = handler.getConfig(item);
    txtPath.setText(txt);   
    HTMLExtractor extractor  = new HTMLExtractor();
    NodePathParser pathParser = new NodePathParser();
    try {
      if(txt.indexOf('[') < 0 || txt.indexOf(']') < 0) return;
      NodePath nodePath  = pathParser.toPath(txt);
      HTMLNode node = extractor.lookNode(document.getRoot(), nodePath);

      searchRenderer.viewDocument(null, node, null);

      treeAddButton.computeShowArea(item);
      //    StringBuilder builder = new StringBuilder();
      //    builder.append("<html>");
      //    builder.append("<body>");
      //    builder.append(node.getTextValue());
      //    builder.append("</body></html>");
      //    browser.setText(builder.toString());
    } catch(Exception exp) {
      ClientLog.getInstance().setException(tree.getShell(), exp);
    }    
  }  

  String editItem(){
    String path = txtPath.getText();
    int selectedIndex = lstPath.getSelectionIndex();
    if(selectedIndex < 0 || selectedIndex >= lstPath.getItemCount()) {
      lstPath.add(path);
    } else {
      lstPath.setItem(selectedIndex, path);
    }
    return path;
  }

  public String[] addItems() {
    if(cboRegionName.getSelectionIndex() == -1) {
      if(cboRegionName.getItemCount() > 0) cboRegionName.select(0);
    }
    TreeItem[] items = tree.getSelection();
    if( items == null || items.length  < 1) {
      lstPath.add(txtPath.getText());
    } else {
      for(TreeItem item : items) {
        lstPath.add(handler.getConfig(item));    
      }
    }
    return null;
  }

  void removeItem(){
    TreeItem[] items = tree.getSelection();
    if( items == null || items.length  < 1) return;
    for(TreeItem item : items) {
      String path = handler.getConfig(item);    
      for(int i=0; i<lstPath.getItemCount(); i++){
        if(lstPath.getItem(i).equals(path)){
          lstPath.remove(i);
          break;
        }
      }   
    }
  }

  void viewItem(){
    TreeItem[] items = tree.getSelection();
    if( items == null || items.length  < 1) return;
    int x = getShell().getLocation().x+120, y = getShell().getLocation().y +130;
    HTMLExtractor extractor  = new HTMLExtractor();
    NodePathParser pathParser = new NodePathParser();
    for(TreeItem item : items) {
      String pathIndex = handler.getConfig(item); 
      if(pathIndex.indexOf('[') < 0 || pathIndex.indexOf(']') < 0) continue;
      try {
        NodeInfoViewer viewer = new NodeInfoViewer(getShell(), x, y);
        NodePath nodePath  = pathParser.toPath(pathIndex);
        HTMLNode node = extractor.lookNode(document.getRoot(), nodePath);
        viewer.setNode(node);   
        x += 10;
        y += 10;
        nodeViewers.add(viewer);
      }catch(Exception exp){
        ClientLog.getInstance().setMessage(tree.getShell(), exp);
      }
    }
  }

  java.util.List<String> traverseTree(){ 
    return traverseTree(TreeHandler.SELECT, new String[]{txtPath.getText()}); 
  }

  public java.util.List<String> traverseTree(int style, String[] paths){ 
    java.util.List<String> removePaths = new ArrayList<String>();
    NodePathParser pathParser = new NodePathParser();
    for(String path : paths) {
      if(path.indexOf('[') < 0 || path.indexOf(']') < 0) continue;
      try {
        NodePath nodePath = pathParser.toPath(path);
        /*selectType = */handler.traverseTree(this, tree, nodePath, path, style);
//        if(selectType == PathConfirmDialog.YES 
//            || selectType == PathConfirmDialog.YES_TO_ALL) removePaths.add(path);
      } catch (Exception e) {
        ClientLog.getInstance().setMessage(tree.getShell(), e);
        return new ArrayList<String>();
      }
    }
    return removePaths;
  }

  public short setPath(String path, int style, short selectType){  
    if(path == null) return PathConfirmDialog.NO;
//    new Exception().printStackTrace();
    try {
      /*selectType = */handler.traverseTree(this, tree, path, style);
      lstPath.add(path);   
//      if(style == TreeHandler.SELECT) {
//        if(selectType == PathConfirmDialog.NO 
//            || selectType == PathConfirmDialog.NO_TO_ALL) lstPath.add(path);    
//      } else {
//        if(selectType == PathConfirmDialog.YES 
//            || selectType == PathConfirmDialog.YES_TO_ALL) {
//          lstPath.remove(lstPath.getSelectionIndex());
//        }
//      }
//      if(lstPath.getItemCount() > 0) lstPath.select(0);
    } catch (Exception e) {
      ClientLog.getInstance().setMessage(tree.getShell(), e);
    }
    return selectType;
  }

  public void setDocument(HTMLDocument doc){
    this.document = doc;
    tree.removeAll();
    handler.createTreeItem(tree, doc); 
  }

  public void clickOk(){
    Iterator<NodeInfoViewer> iterator = nodeViewers.iterator();
    while(iterator.hasNext()) {
      NodeInfoViewer viewer = iterator.next();
      if(viewer != null) viewer.close();
      viewer.close();
    }

    int selectedIndex = cboRegionName.getSelectionIndex();
    if(selectedIndex < 0) selectedIndex = 0;
    
    if(dataRegions.size() > 0 && selectedIndex < dataRegions.size()) {
      Region region = dataRegions.get(selectedIndex);
      region.setPaths(lstPath.getItems());
      region.setType(cboType.getSelectionIndex());
    }

    try {
      new Event().fire(this);
    } catch(Exception exp){
      ClientLog.getInstance().setException(tree.getShell(), exp);
    }

  }

  public void clickCancel(){
    Iterator<NodeInfoViewer> iterator = nodeViewers.iterator();
    while(iterator.hasNext()) {
      NodeInfoViewer viewer = iterator.next();
      if(viewer != null) viewer.close();
      viewer.close();
    }

    Event event = new Event();
    event.setEventType(Event.EVENT_CANCEL);
    try{
      event.fire(this);
    }catch(Exception exp){
      ClientLog.getInstance().setException(getShell(), exp);
    }
  }

  private void expand(boolean expand) {
    TreeItem [] items = tree.getSelection();
    for(TreeItem item : items) {
      expand(item, expand);
    }
  }

  private void expandDataNode() {
    java.util.List<TreeItem> items = handler.getSelectedItems();
    for(TreeItem item : items) {
      expandDataNode(item, false);
    }
  }

  private void expandDataNode(TreeItem item, boolean expand) {
    item.setExpanded(expand);
    TreeItem parent = item.getParentItem();
    if(parent == null || parent.isDisposed()) return;
    expandDataNode(parent, true);
  }


  private void expand(TreeItem item, boolean expand) {
    item.setExpanded(expand);
    TreeItem [] children = item.getItems();
    if(children == null) return;
    for(TreeItem child : children) {
      expand(child, expand);
    }
  }

  public void addEditItem() {
    String path  = editItem();
    java.util.List<String> removes = traverseTree(TreeHandler.SELECT, new String[]{path});
    for(String ele : removes) lstPath.remove(ele);
    if(removes.size() > 0 && lstPath.getItemCount() > 0) lstPath.select(0);
  }

  private void resetUI() {
    cboRegionName.setItems(RegionUtils.getNames(dataRegions));
    if(cboRegionName.getItemCount() < 1) return;
    //    cboRegionName.select(0);
  }

  public void reset() {
    browser.setText("<html></html>");
    lstPath.removeAll();
    txtPath.setText("");
    document = null;
    cboRegionName.removeAll();
    tree.removeAll();
    dataRegions = new ArrayList<Region>();
    resetUI();
  }

  private void addRegion() {
    String name = txtInputName.getText();
    if(name == null || (name = name.trim()).isEmpty()) return;
    name = name.replace(' ', '_');
    Region region = new Region(name);
    dataRegions.add(region);
    txtInputName.setText("");
    resetUI();
  }
  
  void renameRegion(String newName) {
    int index = cboRegionName.getSelectionIndex();
    if(index < 0) return;
    cboRegionName.setItem(index, newName);
    dataRegions.get(index).setName(newName);
  }

  private void removeRegion() {
    String[] names = cboRegionName.getSelection();
    Iterator<Region> iterator = dataRegions.iterator();
    while(iterator.hasNext()) {
      Region region = iterator.next();
      for(int i = 0; i < names.length; i++) {
        if(region.getName().equals(names[i])) {
          iterator.remove();
          break;
        }
      }
    }
    resetUI();
  }

  public void setWebClient(FastWebClient webClient) { this.webClient = webClient; }

  public java.util.List<Region> getDataRegions() { return dataRegions; }

  public void setDataRegions(java.util.List<Region> dataRegions) { 
    this.dataRegions = dataRegions;
    resetUI();
  }

  public boolean hasSelectedItem() { 
    return lstPath != null && lstPath.getSelectionIndex() > -1; 
  }
  
  public void showErrorPath(String path) {
    errorPath = path;
    butRemovePath.setVisible(false);
    lblStatus.setVisible(false);
    if(path == null) return;
    Runnable timer = new Runnable () {
      public void run () {
        if(lblStatus.isDisposed()) return;
        butRemovePath.setVisible(true);
        lblStatus.setVisible(true);
        lblStatus.setText(PathConfirmDialog.ERROR_PATH);
        lblStatus.getParent().pack();
      }
    };
    getDisplay().timerExec (500, timer);
  }
  
  String getSelectedRegion() {
    int index = cboRegionName.getSelectionIndex();
    if(index < 0) return "";
    return cboRegionName.getItem(index);
  }
  
  void changePosition(int oldIndex, int newIndex) {
    if(oldIndex < 0 || oldIndex >= cboRegionName.getItemCount())  return;
    if(newIndex < 0 || newIndex >= cboRegionName.getItemCount())  return;
    
    String temp = cboRegionName.getItem(oldIndex);
    cboRegionName.setItem(oldIndex, cboRegionName.getItem(newIndex));
    cboRegionName.setItem(newIndex, temp);
    
    Region region = dataRegions.get(oldIndex);
    dataRegions.set(oldIndex, dataRegions.get(newIndex));
    dataRegions.set(newIndex, region);
    
    setSelectedPaths(oldIndex);
  }
  
  void setSelectedPaths(int index) {
    lstPath.removeAll();
    if(index < 0 || index >= dataRegions.size()) return;

    Region region = dataRegions.get(index);
    if(region.getPaths() == null) return;

    String [] elements = region.getPaths();
    lstPath.setItems(elements);
//    if(lstPath.getItemCount() > 0) lstPath.select(0);
    handler.resetTree(tree);
    short  selectType = PathConfirmDialog.NO;
//    System.out.println("da vao day roi "+ selectType);
    for(String ele : elements) {
      if(ele.indexOf('[') < 0 || ele.indexOf(']') < 0) continue;
      selectType = setPath(ele, TreeHandler.MARK, selectType);
      if(selectType == PathConfirmDialog.YES_TO_ALL) {
        lstPath.removeAll();
        break;
      } 
      if(selectType == PathConfirmDialog.YES) lstPath.remove(ele);
      
//      if(selectType == PathConfirmDialog.NO_TO_ALL) break;
    }

    cboType.select(region.getType());
  }

}
