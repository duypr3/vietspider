package org.headvances.vietspider.log.user;

import java.io.File;
import java.util.Comparator;
import java.util.List;

import org.headvances.storage.v3.MD5Hash;
import org.headvances.storage.v3.db.Database;
import org.headvances.storage.v3.db.DatabaseConfig;
import org.headvances.storage.v3.db.DatabasePlugin;
import org.headvances.vietspider.storage.v1.AutoCommitDB;
import org.vietspider.bean.Article;
import org.vietspider.common.io.LogService;
import org.vietspider.serialize.Bean2XML;
import org.vietspider.serialize.XML2Bean;

public class UserLogDB extends AutoCommitDB<UserLogStorable, MD5Hash> {
  
  public UserLogDB(String name, String dbdir) throws Exception {
    super(name, dbdir);
  }
  
  @Override
  protected Database<UserLogStorable, MD5Hash> createDatabase(String dbdir) throws Exception {
    DatabaseConfig dbconfig = new DatabaseConfig(dbdir) ;
    File dbdirFile = new File(dbconfig.getDatabaseDir()) ;
    if(!dbdirFile.exists()) dbdirFile.mkdirs() ;
    dbconfig.setAllocatedExtra(64) ;
    dbconfig.setCompress(true) ;

    DatabasePlugin<UserLogStorable, MD5Hash> dbplugin = new DatabasePlugin<UserLogStorable, MD5Hash>() {
      public UserLogStorable createStorable() { return new UserLogStorable() ; }
      public UserLogStorable[] createStorable(int size) { return new UserLogStorable[size] ; }
      public MD5Hash createKey() { return new MD5Hash(); }
      public Comparator<MD5Hash> createKeyComparator() { return MD5Hash.COMPARATOR ; }
      public int getKeySize() { return MD5Hash.DATA_LENGTH; }
    } ;
    return new Database<UserLogStorable, MD5Hash>(dbconfig, dbplugin) ;
  }

  public MD5Hash getMD5HashId(UserLogStorable userLog) { 
    return MD5Hash.digest(userLog.id) ; 
  }

  public void update(UserLogStorable from, UserLogStorable to) {
    to.update(from);
  }

  public synchronized UserLogs read(String articleId) {
    UserLogStorable storable = null;
    try { 
      storable = find(MD5Hash.digest(articleId));
    } catch (Exception e) {
      LogService.getInstance().setThrowable(e);
    }
    if(storable == null)  return null;

    UserLogs userLogs = null;
    try {
      userLogs = XML2Bean.getInstance().toBean(UserLogs.class, storable.getXML().toString());
    } catch (Exception e) {
      LogService.getInstance().setThrowable(e);
    }
    return userLogs;
  }

  public synchronized UserLog readTopAction(String articleId) {
    UserLogs userLogs = read(articleId);
    if(userLogs == null) return null;
    List<UserLog> list = userLogs.getActions();

    for(int i = list.size()-1;  i > -1; i--) {
      UserLog userLog = list.get(i);
      if(userLog.getAction() == Article.SYNCHRONIZED) return userLog;
    }

    for(int i = list.size()-1;  i > -1; i--) {
      UserLog userLog = list.get(i);
      if(userLog.getAction() == Article.EDITED) return userLog;
    }

    for(int i = list.size()-1;  i > -1; i--) {
      UserLog userLog = list.get(i);
      if(userLog.getAction() == Article.READ) return userLog;
    }
    return null;
  }
  
  public synchronized void write(String articleId, String user, int action) {
    try {
      UserLogs userLogs = read(articleId);
      if(userLogs == null) {
        userLogs = new UserLogs(articleId);
        userLogs.addAction(user, action);
        Bean2XML bean2XML = Bean2XML.getInstance();
        String xml = bean2XML.toXMLDocument(userLogs).getTextValue();
        insert(new UserLogStorable(articleId, xml));
        return;
      }
      
      userLogs.addAction(user, action);
      Bean2XML bean2XML = Bean2XML.getInstance();
      String xml = bean2XML.toXMLDocument(userLogs).getTextValue();
      UserLogStorable storable = find(MD5Hash.digest(articleId));
      storable.setXml(xml);
      insert(storable);
    } catch (Throwable e) {
      LogService.getInstance().setThrowable(e);
    }
  }
  
}