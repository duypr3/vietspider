/***************************************************************************
 * Copyright 2001-2009 The VietSpider         All rights reserved.  		 *
 **************************************************************************/
package org.headvances.vietspider;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Comparator;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import java.util.SortedMap;
import java.util.TreeSet;

import org.headvances.vietspider.paging.PageIO;
import org.headvances.vietspider.paging.PageIOs;
import org.vietspider.common.io.LogService;

import com.sleepycat.bind.ByteArrayBinding;
import com.sleepycat.bind.tuple.IntegerBinding;
import com.sleepycat.collections.StoredSortedMap;
import com.sleepycat.je.DatabaseConfig;
import com.sleepycat.je.Environment;
import com.sleepycat.je.EnvironmentConfig;

/** 
 * Author : Nhu Dinh Thuan
 *          nhudinhthuan@yahoo.com
 * Oct 7, 2009  
 */
public class QueryDatabase extends JeDatabase {

  private final static long TIMEOUT = 30*24*60*60*1000l; 

  protected SortedMap<Integer, byte[]> map;
  
//  protected TreeSet<Query> topQueries;
//  protected int totalQueries = 0;

  protected File fileIndex;
  private int date;

  public QueryDatabase(File folder) throws Exception {
    EnvironmentConfig envConfig = new EnvironmentConfig();
    envConfig.setTransactional(false);
    envConfig.setAllowCreate(true);
    envConfig.setCacheSize(10*1024*1024l); 

    this.env = new Environment(folder, envConfig);
    DatabaseConfig dbConfig = new DatabaseConfig();
    dbConfig.setTransactional(false);
    dbConfig.setAllowCreate(true);
    dbConfig.setDeferredWrite(true);
    this.db = env.openDatabase(null, "query_database", dbConfig);
    ByteArrayBinding dataBinding = new ByteArrayBinding();
    IntegerBinding keyBinding = new IntegerBinding();
    this.map = new StoredSortedMap<Integer, byte[]> (db, keyBinding, dataBinding, true);

    date = Calendar.getInstance().get(Calendar.DAY_OF_MONTH);
    fileIndex = new File(folder, folder.getName() + ".query_database.idx");
  }

  public void save(Query query) throws Exception {
//    if(topQueries != null) {
//      /*totalQueries = */addQuery2Top(query);
//    }
    
    String pattern = query.getPattern();
    if(pattern == null || pattern.length() > 30 
        || query.getTotal() < 10) return;
//    System.out.println(" chuan bi save "+ query.getPattern()+ " / "+ query.getTotal());
    if(isClose) return;
    int key = pattern.hashCode();
    Query query2 = read(key);
    if(query2 != null) {
      query2.setLastAccess(System.currentTimeMillis());
      map.put(key, toBytes(query2));
      return;
    }
    byte [] bytes = toBytes(query);
    PageIOs.getInstance().write(fileIndex, new IntegerEntry(key));
    map.put(key, bytes);
  }
  
  public void update(Query query) throws Exception {
//    if(topQueries != null) addQuery2Top(query);
    
//    System.out.println(" last save "+ query.getLastTest());
    int key = query.getPattern().hashCode();
    if(query.getTotal() < 10) {
      map.remove(key);
      return;
    }
    
    byte [] bytes = toBytes(query);
    map.put(key, bytes);  
    return;
  }

  private byte[] toBytes(Query query) {
    ByteArrayOutputStream byteOutput = new ByteArrayOutputStream();
    DataOutputStream outputStream = new DataOutputStream(byteOutput);
    byte [] bytes = null;
    try {
      outputStream.writeUTF(query.getPattern());
      outputStream.writeLong(query.getLastAccess());
      outputStream.writeLong(query.getLastTest());
      outputStream.writeInt(query.getTotal());
      outputStream.flush();
      bytes = byteOutput.toByteArray();
    } catch (Exception e) {
      LogService.getInstance().setThrowable(e);
      return null;
    }
    return bytes;
  }

  private Query read(int id, byte[] bytes) throws Exception {
    if(bytes == null) {
      map.remove(id);
      IntegerEntry entry = new IntegerEntry(id);
      entry.setStatus(-1);
      PageIOs.getInstance().write(fileIndex, entry);
      return null;
    }
    
    ByteArrayInputStream byteInput = new ByteArrayInputStream(bytes);
    DataInputStream inputStream = new DataInputStream(byteInput);
    String pattern  = inputStream.readUTF();
    long lastAccess = inputStream.readLong();
    long lastTest = inputStream.readLong();
    int total  =  0;
    try {
      total  = inputStream.readInt();
    } catch (Exception e) {
      LogService.getInstance().setThrowable(e);
    }
    
    if(System.currentTimeMillis() - lastAccess >= TIMEOUT) {
      System.out.println("remove bo time out "+ pattern);
      map.remove(id);
      IntegerEntry entry = new IntegerEntry(id);
      entry.setStatus(-1);
      PageIOs.getInstance().write(fileIndex, entry);
      return null;
    }
    
    System.out.println(" buoc 3 "+ pattern);
    
    return new Query(pattern, lastAccess, lastTest, total);
  }

  public Query read(int id)  {
    byte [] bytes = map.get(id);
    try {
      System.out.println(" === > id "+ id + " : "+ bytes);
      return read(id, bytes);
    } catch (Exception e) {
      LogService.getInstance().setThrowable(e);
      return null;
    }
  }

  public List<Query> loadPattern(int page, int pageSize) throws Throwable {
    PageIO<IntegerEntry> pageIO = getPageIO();
    List<IntegerEntry> ids = pageIO.loadPageByAsc(page, pageSize, null);

    List<Query> list = new ArrayList<Query>();
    for(int i = 0; i < ids.size(); i++) {
      IntegerEntry entry = ids.get(i);
      if(entry.getStatus() == -1) continue;

      System.out.println(" chuan bi vao "+ entry.getId());
      Query query = read(entry.getId());
      System.out.println(" va ket qua la "+ entry.getId() + " : "+ query);
      if(query != null) list.add(query);
    }
    return list;
  }

  public int getTotalPage(int pageSize) {
    PageIO<IntegerEntry> pageIO = getPageIO();
    return pageIO.getTotalPage(pageSize);
  }

  @SuppressWarnings("unchecked")
  protected PageIO<IntegerEntry>  getPageIO() {
    PageIO<IntegerEntry> io = (PageIO<IntegerEntry>)PageIOs.getInstance().getPageIO(fileIndex);
    if(io != null) return io;
    io = new PageIO<IntegerEntry>() {
      public IntegerEntry createEntry() {
        return new IntegerEntry();
      }
    };
    io.setData(fileIndex, 4);
    PageIOs.getInstance().putPageIO(fileIndex, io);
    return io;
  }
  
  public void optimize() throws Exception {
    int currentDate = Calendar.getInstance().get(Calendar.DAY_OF_MONTH);
    if(date == currentDate && fileIndex.exists()) return;
    date = currentDate;
    if(fileIndex.exists()) {
      if(!fileIndex.delete()) return;
    }
    
    Iterator<Integer> iterator = map.keySet().iterator();
    long current  = System.currentTimeMillis();
    long expire = 10*24*60*60*1000l;
    int size = map.size();
    int minTotal = 10;
    if(size < 10) {
      expire = 100*24*60*60*1000l;
      minTotal = 10;
    } else if (size >= 10 && size < 50) {
      expire = 50*24*60*60*1000l;
      minTotal = 50;
    } else if (size >= 50 && size < 100) {
      expire = 20*24*60*60*1000l;
      minTotal = 70;
    } else  {
      expire = 10*24*60*60*1000l;
      minTotal = 100;
    }
//    System.out.println(" bat dau co "+ map.size());
    int counter = 0;
    while(iterator.hasNext()) {
      if(counter > 1000) {
        iterator.remove();
        continue;
      }
      int value = iterator.next();
      Query query =  read(value);
      if(query == null) {
        iterator.remove();
        continue;
      }
      
      if(query.getTotal() < minTotal 
          || current - query.getLastAccess() > expire) {
//        System.out.println("chuna bin remove "+ query.getPattern());
        iterator.remove();
      }
      
      counter++;
      
      IntegerEntry entry = new IntegerEntry(value);
      entry.setStatus(0);
      PageIOs.getInstance().write(fileIndex, entry);
    }
//    System.out.println(" ket thuc con "+ map.size());
  }
  
  public Set<Query> getTopQuery() throws Exception {
    TreeSet<Query> topQueries = new TreeSet<Query>();
    if(topQueries != null && topQueries.size() > 0) return topQueries;
    topQueries = new TreeSet<Query>(new Comparator<Query>() {
      public int compare(Query q0, Query q1) {
        return q1.getTotal() - q0.getTotal();
      }
    });
    int counter = 0;
//    System.out.println(" ==== > vao toi day "+ counter+ "  : "+ map.size());
    Iterator<Integer> iterator = map.keySet().iterator();
    while(iterator.hasNext()) {
      if(counter > 1000) break;
      
      int value = iterator.next();
      Query query =  read(value);
      if(query == null) {
        iterator.remove();
        continue;
      }
      
      addQuery2Top(topQueries, query);
      counter++;
    }
    
    return topQueries;
  }
  
  private void addQuery2Top(TreeSet<Query> topQueries, Query query/*, int size*/)  throws Exception {
    Iterator<Query> iterator = topQueries.iterator();
    while(iterator.hasNext()) {
      Query temp  = iterator.next();
      if(temp.getPattern().equalsIgnoreCase(query.getPattern())) {
        topQueries.remove(temp);
        topQueries.add(query);
        return ;
      }
    
    }
//    System.out.println(" chuan bi add query "+ query.getTotal());
    if(topQueries.size() < 30) {
      topQueries.add(query);
      return ;
    } 
    
    Query temp  = topQueries.last();
//    System.out.println(" thay co temp "+temp.getTotal() );
    if(temp.getTotal() >= query.getTotal()) return ;
    topQueries.remove(temp);
    topQueries.add(query);
//    return size;
  }
  
  public static class Query {

    private String pattern;
    private long lastAccess = System.currentTimeMillis();
    private long lastTest = -1;
    private int total = 0;

    public Query() {

    }

    public Query(String pattern, int total) {
      this.pattern = pattern;
      this.total = total;
    }

    public Query(String pattern, long access, long test, int total) {
      this.pattern = pattern;
      this.lastAccess = access;
      this.lastTest = test;
      this.total = total;
    }

    public String getPattern() { return pattern; }
    public void setPattern(String pattern) { this.pattern = pattern; }

    public long getLastAccess() { return lastAccess; }
    public void setLastAccess(long lastAccess) { this.lastAccess = lastAccess; }

    public long getLastTest() { return lastTest; }
    public void setLastTest(long lastTest) { this.lastTest = lastTest; }
    
    public int getTotal() { return total; }
    public void setTotal(int total) { this.total = total; }
  }

}
