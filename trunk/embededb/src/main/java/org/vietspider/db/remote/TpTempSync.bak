/***************************************************************************
 * Copyright 2001-2009 The VietSpider         All rights reserved.       *
 **************************************************************************/
package org.headvances.vietspider.remote;

/***************************************************************************
 * Copyright 2001-2009 The VietSpider         All rights reserved.       *
 **************************************************************************/

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FileFilter;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.List;
import java.util.concurrent.ConcurrentLinkedQueue;

import org.vietspider.bean.Article;
import org.vietspider.common.Application;
import org.vietspider.common.io.DataReader;
import org.vietspider.common.io.DataWriter;
import org.vietspider.common.io.LogService;
import org.vietspider.common.io.UtilFile;
/** 
 * Author : Nhu Dinh Thuan
 *          nhudinhthuan@yahoo.com
 * Mar 30, 2009  
 */

class TpTempSync  {

  protected volatile int storeCounter = 0;
  protected volatile int syncCounter = 0;

  protected volatile boolean isPauseCrawler = false;

  protected volatile java.util.Queue<Article> temp = new ConcurrentLinkedQueue<Article>();

  TpTempSync() {
    File folder = UtilFile.getFolder("content/sync/");
    File [] files = folder.listFiles();
    if(files != null) syncCounter = files.length * 100;
  }
  
  int getSyncCounter() { return syncCounter; }

  void save(Article article)  {
    //    System.out.println("luc save "+ data.getContentIndex());
    if(storeCounter >= 100){
      store();
      storeCounter = 0;
    }
    temp.add(article);
    storeCounter++;
    syncCounter++;
  }

  /*RemoteDatabase remote,*/ /*RemoteDatabase2 remote2*/
  public void load(List<Article> articles) throws Throwable { 
    File folder = UtilFile.getFolder("content/sync/");
    File [] files = UtilFile.listModifiedFiles(folder, new FileFilter() {
      public boolean accept(File f) {
        return f.isFile();
      }
    });
    
    if(files == null || files.length < 1) {
      int idx = 0;
      while(!temp.isEmpty()) {
        Article article = temp.poll();
//        remote.add(article.getDomain(), article.getMeta(), article.getContent());
//        remote2.add(article.getDomain(), article.getMeta(), article.getContent());
        articles.add(article);
        if(syncCounter > 0) syncCounter--;
        idx++;
        if(idx >= 300) break;
      }
      return;
    }
    
    if(files.length > 1000) {
      if(!isPauseCrawler) {
        Application.addError(this);
        isPauseCrawler = true;
      }
    } else if(files.length < 500) {
      if(isPauseCrawler) {
        Application.removeError(this);
        isPauseCrawler = false;
      }
    }
    
    File file  = files[files.length-1];
    byte []  bytes = new DataReader().load(file);
    file.delete();
    
    ByteArrayInputStream byteInput = new ByteArrayInputStream(bytes);
    DataInputStream buffered = new DataInputStream(byteInput);

    try {
      int idx = 0;
      while(idx < 300) {
        try {
          int length = buffered.readInt();
          bytes = new byte[length];
          buffered.read(bytes, 0, length); 
          Article article = toData(bytes);
//          remote.add(article.getDomain(), article.getMeta(), article.getContent());
//          remote2.add(article.getDomain(), article.getMeta(), article.getContent());
          if(article == null) continue ;
          articles.add(article);
          if(syncCounter > 0) syncCounter--;
//          System.out.println(" === > "+ data.getContentIndex().getId());
        } catch (EOFException e) {
          break;
        }
        idx++;
      }
//      System.out.println(" doc xong duoc "+ idx);
    } finally {
      buffered.close();
    }
  }

  void store() {
    ByteArrayOutputStream bytesOutput =  new ByteArrayOutputStream(10*1024*1024);
    DataOutputStream buffered = new DataOutputStream(bytesOutput);
    while(!temp.isEmpty()) {
      Article article = temp.poll();
      writeBuffer(buffered, article);
    }
    
    byte [] bytes = bytesOutput.toByteArray();
    if(bytes.length < 10) return;

    File file = searchNewFile();
    try {
      new DataWriter().save(file, bytes);
    } catch (Exception e) {
      LogService.getInstance().setThrowable(e);
    }
  }

  private void writeBuffer(DataOutputStream buffered, Article article) {
    //  System.out.println("luc save "+ data.getContentIndex());
    ByteArrayOutputStream bytesObject = new ByteArrayOutputStream();
    ObjectOutputStream out = null;
    try {
      out = new ObjectOutputStream(bytesObject);
      out.writeObject(article);
      out.flush();
    } catch (Exception e) {
      LogService.getInstance().setThrowable(e);
      return;
    } finally {
      try {
        if(bytesObject != null) bytesObject.close();
      } catch (Exception e) {
      }
      try {
        if(out != null) out.close();
      } catch (Exception e) {
      }
    }

    byte [] bytes = bytesObject.toByteArray();
    try {
      buffered.writeInt(bytes.length);
    } catch (Exception e) {
      LogService.getInstance().setThrowable(e);
      return;
    }

    try {
      buffered.write(bytes, 0, bytes.length);
      buffered.flush();
    } catch (Exception e) {
      LogService.getInstance().setThrowable(e);
    }
  }

  private Article toData(byte[] bytes) throws Throwable {
    ByteArrayInputStream byteInputStream = new ByteArrayInputStream(bytes);
    ObjectInputStream objectInputStream = null;
    try {
      objectInputStream = new ObjectInputStream(byteInputStream);
      return (Article)objectInputStream.readObject();
    } catch (StackOverflowError e) {
      LogService.getInstance().setMessage("SyncDatabase - LOAD", new Exception(e), e.toString() );
      return null;
    } catch (Throwable e) {
      LogService.getInstance().setThrowable(e);
      return null;
    } finally {
      try {
        if(byteInputStream != null) byteInputStream.close();
      } catch (Exception e) {
      }
      try {
        if(objectInputStream != null)  objectInputStream.close();
      } catch (Exception e) {
      }
    } 
  }

  private File searchNewFile() {
    File folder = UtilFile.getFolder("content/sync/");
    int name = 0;
    File file = new File(folder, String.valueOf(name));
    while(file.exists()) {
      name++;
      file = new File(folder, String.valueOf(name));
    }
    return file;
  }


}