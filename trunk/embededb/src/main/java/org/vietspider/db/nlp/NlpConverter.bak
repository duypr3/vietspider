/***************************************************************************
 * Copyright 2001-2009 The VietSpider         All rights reserved.  		 *
 **************************************************************************/
package org.vietspider.db.nlp;

import java.io.File;
import java.io.RandomAccessFile;
import java.text.SimpleDateFormat;
import java.util.Date;

import org.vietspider.bean.Article;
import org.vietspider.bean.Meta;
import org.vietspider.bean.NLPData;
import org.vietspider.bean.NLPRecord;
import org.vietspider.common.io.DataReader;
import org.vietspider.common.io.LogService;
import org.vietspider.common.io.UtilFile;
import org.vietspider.common.text.CalendarUtils;
import org.vietspider.db.SystemProperties;
import org.vietspider.db.content.IDatabases;

/** 
 * Author : Nhu Dinh Thuan
 *          nhudinhthuan@yahoo.com
 * Sep 23, 2009  
 */
public class NlpConverter {
  
  public void extract() {
    try {
      File file  = UtilFile.getFile("system", "nlpconverter.txt");
      byte [] bytes = new DataReader().load(file);
      String text = new String(bytes, "utf-8");
      String [] dates = text.split("\n");
      for(int i = 0; i < dates.length; i++) {
        dates[i] = dates[i].trim();
        if(dates[i].isEmpty()) continue;
        extract(dates[i]);
      }
    } catch (Exception e) {
      LogService.getInstance().setThrowable(e);
    }
  }
  
  public void extract(String date) {
    SimpleDateFormat dateFormat = CalendarUtils.getDateFormat();
    Date dateInst = null;
    try {
      dateInst = dateFormat.parse(date);
    } catch (Exception e) {
      LogService.getInstance().setThrowable(e);
      return;
    }
    SimpleDateFormat folderFormat = CalendarUtils.getFolderFormat();
    String folderName = folderFormat.format(dateInst);
    File file = UtilFile.getFile("content/summary/eid/"+folderName+"/", folderName+".eid");
    
//    IDatabases databases = IDatabases.getInstance();
//    ArticleDatabase database = (ArticleDatabase)databases.getDatabase(dateInst, true);
//    if(database == null)  return;
    NLPMapper nlpMapper = new NLPMapper();
//    ContentMapper mapper = new ContentMapper();
    
    SystemProperties system = SystemProperties.getInstance();
    boolean nlp = "true".equalsIgnoreCase(system.getValue("nlp"));
    
    RandomAccessFile random = null;
    try {
      random = new RandomAccessFile(file, "r");
      long length  = random.length();

      LogService.getInstance().setMessage(null, "Start nlp extractor " +  date+"...");
      while(random.getFilePointer() < length) {
        long id = random.readLong();
        String metaId = String.valueOf(id);
        int status  = random.readInt();
        if(status == -1) continue;
        try {
          Article article = IDatabases.getInstance().loadArticle(metaId);
          if(article == null) continue;
          NLPRecord nlpRecord = null;
          Meta meta = article.getMeta();
          if(nlp) {
            nlpRecord = NLPExtractor.getInstance().extract(
                meta, article.getDomain(), article.getContent());
          }
          
          if(nlpRecord != null) {
            String nlpProduct = nlpMapper.buildProduct(nlpRecord);
            if(nlpProduct.length() > 0)  meta.putProperty("nlp.product", nlpProduct);

            String nlpPhone = nlpMapper.buildPhone(nlpRecord);
            if(nlpPhone.length() > 0)  meta.putProperty("nlp.phone", nlpPhone);

            String nlpAddress = nlpMapper.buildAddress(nlpRecord);
            if(nlpAddress.length() > 0)  meta.putProperty("nlp.address", nlpAddress);
            
            String nlpArea = nlpRecord.getOneData(NLPData.AREA_SHORT);
            if(nlpArea != null && nlpArea.length() > 0) meta.putProperty("nlp.area", nlpArea);
          }
          
          IDatabases.getInstance().save(article);
          
//          database.getMetaDb().save(id, mapper.meta2Text(meta).getBytes(Application.CHARSET));
//          database.getNlpDb().save(id, nlpMapper.record2Text(nlpRecord).getBytes(Application.CHARSET));
        } catch (Exception e) {
          LogService.getInstance().setMessage(e, e.toString());
        }
      }
      LogService.getInstance().setMessage(null, "Finish nlp extractor " +  date+"...");
    } catch (Throwable e) {
      LogService.getInstance().setThrowable(e);
      LogService.getInstance().setMessage(null, "nlp extractor " +  date + " is failed!");
    } finally {
      try {
        if(random != null) random.close();
      } catch (Exception e) {
        LogService.getInstance().setThrowable(e);
      }
    }
  }
}
