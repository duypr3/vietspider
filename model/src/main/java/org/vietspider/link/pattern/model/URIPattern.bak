/***************************************************************************
 * Copyright 2001-2008 The VietSpider         All rights reserved.  		 *
 **************************************************************************/
package org.vietspider.link.pattern.model;

import java.util.ArrayList;
import java.util.List;

import org.vietspider.chars.URLUtils;
import org.vietspider.common.text.SWProtocol;


/** 
 * Author : Nhu Dinh Thuan
 *          nhudinhthuan@yahoo.com
 * Jul 22, 2008  
 */
public class URIPattern implements IPattern {

  protected Component [] components ;
  
  protected List<URIPattern> nPatterns = new ArrayList<URIPattern>();

  public URIPattern() {
  }

  public URIPattern(String pattern) {
    URLUtils urlUtils = new URLUtils();
    String nPattern = urlUtils.getCanonical(pattern);
    if(nPattern.length() != pattern.length()) {
      nPatterns.add(new URIPattern(nPattern));
    }
    
    split2Pattern(pattern.toLowerCase());
  }

  public void setValue(String...values) {
    if(values.length < 1) return;
    split2Pattern(values[0].toLowerCase());

    URLUtils urlUtils = new URLUtils();
    String nPattern = urlUtils.getCanonical(values[0]);
    if(nPattern.length() != values[0].length()) {
      nPatterns.add(new URIPattern(nPattern));
    }
  }

  public boolean match(String value) {
    if(components.length < 1) return true;
    value = value.toLowerCase();
    if(internalMatch(value)) return true;
    for(int i = 0; i < nPatterns.size(); i++) {
      if(nPatterns.get(i).match(value)) return true; 
    }
    return false;
  }

  private boolean internalMatch(String value) {
    int lastHttpIndex = SWProtocol.lastIndexOf(value);
    
    boolean isFunction = false;
    if(lastHttpIndex > 0) {
      value = value.substring(lastHttpIndex);
    } else {
      isFunction = value.indexOf('(') > -1 && value.indexOf(')') >-1;
    }
    
    if(components[0].text != null) {
      int lastWWWIndex = SWProtocol.lastIndexOfWWW(value, 0);
      if(lastWWWIndex > 0) {
        int idx = value.indexOf('.', 0);
        if(idx > 0) value = value.substring(idx+1);
      }
    }
    
    List<String> values = splitValue(value);
    
//    System.out.println(" bat dau "+ values.size()+ " : "+components.length);
    
    if(values.size() != components.length) return false;
    
    for(int i = 0; i < components.length; i++) {
//      System.out.println(values.get(i));
//      System.out.println(components[i].text + "+++"+ components[i].type+ "\n");
      
      if(components[i].text != null) {
        if(!components[i].text.equals(values.get(i))) return false;
      } else {
        if(components[i].type != '*' && !checkType(values.get(i), components[i].type)) return false;
        if(!isFunction && hasSpecChar(values.get(i)))  return false;
      }
  
    }

    return true;
  }
  
  private boolean hasSpecChar(String text) {
    int i = 0;
    while(i < text.length()-1) {
      char c = text.charAt(i);
      if(c == '/'
        || c == '?'
          || c == '&'
            || c == '#') return true;
      i++;
    }
    return false;
  }
  
  protected int match(String value, String pattern, int start) {
    if(start + pattern.length() > value.length()) return -1;
    //    System.err.println(value.substring(start) + " : "+ pattern);
    int i = 0; 

    while(i < pattern.length()) {
      char c1 =  pattern.charAt(i);
      char c2 = value.charAt(start+i);
      if(c1 != c2  
          && Character.toLowerCase(c1) != Character.toLowerCase(c2)) return -1;
      i++;
    }

    return start+i;
    //  return i > 0 ? start+i : -2;
  }

  private boolean checkType(String text, char type) {
    int index = 0;
    while(index < text.length()) {
      char c = text.charAt(index);
      if(type == '$' && Character.isLetter(c)) return false;
      else if(type == '@' && Character.isDigit(c)) return false;
      index++;
    }
    return true;
  }

  public String[] getPattern() {
    String [] elements = new String[components.length];
    for(int i = 0; i < elements.length; i++) {
      elements[i] = components[i].text;
    }
    return elements; 
  }

  public String toString() {
    StringBuilder builder = new StringBuilder();
    for(int i = 0; i < components.length; i++) {
      if(i > 0) builder.append('*');
      builder.append(components[i]);
    }
    return builder.toString();
  }

  private void split2Pattern(String value) {
    int lastHttpIndex = SWProtocol.lastIndexOf(value);
    if(lastHttpIndex > 0) value = value.substring(lastHttpIndex);
    
    int lastWWWIndex = SWProtocol.lastIndexOfWWW(value, 0);
    if(lastWWWIndex > 0) {
      int idx = value.indexOf('.', 0);
      if(idx > 0) value = value.substring(idx+1);
    }
    
    List<Component> list = new ArrayList<Component>();
    
    int start  = 0;
    int index  = 0;
    while(index < value.length()) {
      char c = value.charAt(index);
      if(c == '*' || c == '@' || c == '$') {
        String text = value.substring(start, index);
        if(text.trim().length() > 0) {
          list.add(new Component(text, null));
        }
        list.add(new Component(null, c));
        start = index+1;
      }
      index++;
    }
    
    if(start < value.length()) {
      String text = value.substring(start, value.length());
      if(text.trim().length() > 0) list.add(new Component(text, null));
    }
//    else {
//      char c = value.charAt(value.length() - 1);
//      if(c == '*' || c == '@' || c == '$') 
//    }
    
    components = list.toArray(new Component[list.size()]);
  }
  
  private List<String> splitValue(String value) {
    List<String> values = new ArrayList<String>();
    for(int i = 0; i < components.length; i++) {
      Component comp = components[i];
      if(comp.text == null) continue;
      int idx = value.indexOf(comp.text);
      
      if(idx < 0) {
        value = value.trim();
        if(value.length() > 0) values.add(value);
        return values;
      }
      
      if(idx > 0) {
        String temp = value.substring(0, idx).trim();
        if(temp.length() > 0) values.add(temp);
      }
      
      if(comp.text.length() > 0) values.add(comp.text);
      
      value = value.substring(idx + comp.text.length());
    }
    
    if(value.length() > 0) {
      value = value.trim();
      if(value.length() > 0) values.add(value);
    }
    
    return values;
  }
  
  
  protected class Component {
    
    protected String text;
    protected Character type = '*';
    
    protected Component(String txt, Character c) {
      this.text = txt;
      this.type = c;
    }
    
  }
}
