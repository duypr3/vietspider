/***************************************************************************
 * Copyright 2001-2010 The VietSpider         All rights reserved.  		 *
 **************************************************************************/
package org.vietspider.db.link.track;

import java.io.File;
import java.util.Calendar;
import java.util.Iterator;
import java.util.Map;
import java.util.Queue;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentLinkedQueue;

import org.vietspider.common.Application;
import org.vietspider.common.Install;
import org.vietspider.common.io.LogService;
import org.vietspider.common.io.UtilFile;
import org.vietspider.common.text.CalendarUtils;
import org.vietspider.model.Source;

/** 
 * Author : Nhu Dinh Thuan
 *          nhudinhthuan@yahoo.com
 * Oct 28, 2010  
 */
public class LinkLogStoragesBak extends Thread {

  private static LinkLogStoragesBak INSTANCE;

  public synchronized final static LinkLogStoragesBak getInstance() {
    if(INSTANCE != null) return INSTANCE;
    INSTANCE = new LinkLogStoragesBak();
    return INSTANCE;
  }

  private Map<String, LinkLogStorage> holder = new ConcurrentHashMap<String, LinkLogStorage>();

  protected volatile Queue<LinkLog> waitData = new ConcurrentLinkedQueue<LinkLog>();

  private String current;
  private int date;

  public LinkLogStoragesBak() {
    Application.addShutdown(new Application.IShutdown() {

      public String getMessage() { return "Close Link Log Database";}

      public void execute() { closes(); }
    });

    Calendar calendar = Calendar.getInstance();
    current  = CalendarUtils.getFolderFormat().format(calendar.getTime());
    date = calendar.get(Calendar.DATE);

    this.start();
  }

  public void sourceNull(String group, String category, String name) {
    LinkLog linkLog = new LinkLog(group+"."+category+"."+name, "");
    linkLog.setMessage("{source.not.found}");
    save(linkLog);
  }

  public void sourceNull(String fullName) {
    LinkLog linkLog = new LinkLog(fullName, "");
    linkLog.setMessage("{source.not.found}");
    save(linkLog);
  }
  
  public void entryNull(String fullName) {
    LinkLog linkLog = new LinkLog(fullName, "");
    linkLog.setMessage("{entry.not.found}");
    save(linkLog);
  }

  public void save(LinkLog log) {
    if(Application.LICENSE != Install.SEARCH_SYSTEM) return;
    waitData.add(log);
  }

  public void save(Source source, String message) {
    if(Application.LICENSE != Install.SEARCH_SYSTEM) return;
    String [] homepages = source.getHome();
    for(int i = 0; i < homepages.length; i++) {
      LinkLog log = new LinkLog(source.getFullName(), homepages[i]);
      log.setMessage(message);
      log.setLevel(0);
      log.setType(LinkLog.TYPE_HOME);
      log.setPhase(LinkLog.PHASE_SOURCE);
      waitData.add(log);
    }
  }

  public void run() {
    while(true) {
      //            System.out.println("  ==== truoc >"+ waitData.size());
      while(!waitData.isEmpty()) {
        LinkLog dataLog = waitData.poll();
        LinkLogStorage storage =  LinkLogStoragesBak.getInstance().getCurrent();
        try {
          if(storage != null) storage.save(dataLog);
        } catch (Exception e) {
          LogService.getInstance().setMessage(e, e.toString());
        }
      }
      //            System.out.println("  ==== sau >"+ waitData.size());

      closeExpires();

      Calendar calendar = Calendar.getInstance();
      if(calendar.get(Calendar.DATE) != date) {
        //export yesterday data
        processYesterdayData();
        current  = CalendarUtils.getFolderFormat().format(calendar.getTime());
        date = calendar.get(Calendar.DATE);
      }

      try {
        Thread.sleep(5*1000l);
      } catch (Exception e) {
      }
    }
  }

  public synchronized void export(String dateFolder) {
    if(dateFolder == null || dateFolder.trim().isEmpty()) return;
    if(dateFolder.charAt(dateFolder.length() - 1) == '/') {
      dateFolder = dateFolder.substring(0, dateFolder.length() - 1);
    }
    if(!isExport(dateFolder)) {
      LogService.getInstance().setMessage(null, " No export!");
      return;
    }
    LinkLogStorage storage = getStorage(dateFolder);
    if(storage == null) {
      LogService.getInstance().setMessage(null, " Log storage is null!");
      return;
    }

    LogExporter exporter = new LogExporter(storage);
    exporter.exportChannel(UtilFile.getFolder("track/logs/sources/" + dateFolder + "/"));
  }

  private boolean isExport(String dateFolder) {
    File folder = UtilFile.getFolder("track/logs/sources/" + dateFolder + "/");
    File [] files = folder.listFiles();
    if(files == null || files.length < 1) return true;

    if(dateFolder.equals(current)) {
      long lastModified = -1;
      for(int i = 0; i < files.length; i++) {
        if(lastModified >= files[i].lastModified()) continue;
        lastModified = files[i].lastModified();
      }
      Calendar calendar = Calendar.getInstance();
      calendar.setTimeInMillis(lastModified);
      return System.currentTimeMillis() - lastModified > 15*60*1000l;
    }

    return false;

  }

  private void processYesterdayData() {
    if(current  == null)  return;
    LinkLogStorage storage =  LinkLogStoragesBak.getInstance().getCurrent();
    if(storage == null) return;
    LogExporter exporter = new LogExporter(storage);
    exporter.exportChannel(UtilFile.getFolder("track/logs/sources/" + current + "/"));
    exporter = null;
  }

  public synchronized LinkLogStorage getCurrent()  {
    if(Application.LICENSE != Install.SEARCH_SYSTEM) return null;
    synchronized (current) {
      LinkLogStorage storage = holder.get(current);
      if(storage != null && ! storage.isTimeout()) return storage; 
      try {
        storage = new LinkLogStorage(current);
        holder.put(current, storage);
        return storage;
      } catch (Exception e) {
        LogService.getInstance().setMessage(e, e.toString());
      }  
    }
    return null;
  }

  public synchronized LinkLogStorage getStorage(String dateFolder)  {
    if(Application.LICENSE != Install.SEARCH_SYSTEM) return null;
    LinkLogStorage storage = holder.get(dateFolder);
    if(storage != null && ! storage.isTimeout()) return storage; 
    try {
      storage = new LinkLogStorage(dateFolder);
      holder.put(dateFolder, storage);
      return storage;
    } catch (Exception e) {
      LogService.getInstance().setMessage(e, e.toString());
    }  
    return null;
  }

  public void closeExpires()  {
    Iterator<Map.Entry<String, LinkLogStorage>> iterator = holder.entrySet().iterator();
    while(iterator.hasNext()) {
      LinkLogStorage tracker = iterator.next().getValue();
      if(tracker.isTimeout()) {
        tracker.close();
        iterator.remove();
      } 
    }
  }

  void closes() {
    while(!waitData.isEmpty()) {
      //      System.out.println(" chay vao day roi "+ waitData.size());
      LinkLog dataLog = waitData.poll();
      LinkLogStorage storage = LinkLogStoragesBak.getInstance().getCurrent();
      try {
        if(storage != null) storage.save(dataLog);
      } catch (Exception e) {
        LogService.getInstance().setMessage(e, e.toString());
      }
    }

    Iterator<Map.Entry<String, LinkLogStorage>> iterator = holder.entrySet().iterator();
    while(iterator.hasNext()) {
      LinkLogStorage tracker = iterator.next().getValue();
      tracker.close();
      iterator.remove();
    }
  }
}
