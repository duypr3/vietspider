/***************************************************************************
 * Copyright 2001-2009 The VietSpider         All rights reserved.  		 *
 **************************************************************************/
package org.vietspider.db.nlp;

import java.io.File;
import java.util.List;

import org.headvances.nlp.Document;
import org.headvances.nlp.NLPDictionary;
import org.headvances.nlp.NLPRecordDB;
import org.headvances.nlp.SemanticDictionary;
import org.headvances.nlp.TokenAnalyzer;
import org.headvances.nlp.model.ExtractData;
import org.headvances.nlp.query.Queries;
import org.headvances.nlp.query.Query;
import org.headvances.nlp.query.QueryContext;
import org.headvances.nlp.tokentype.Email;
import org.headvances.nlp.tokentype.time.Date;
import org.headvances.nlp.tokentype.us.USD;
import org.headvances.nlp.tokentype.vn.VND;
import org.headvances.nlp.tokentype.vn.VNPhone;
import org.headvances.storage.StorageConfig;
import org.vietspider.bean.Article;
import org.vietspider.bean.Content;
import org.vietspider.bean.Domain;
import org.vietspider.bean.Meta;
import org.vietspider.bean.NLPRecord;
import org.vietspider.bean.NLPRecordItem;
import org.vietspider.common.io.LogService;
import org.vietspider.common.io.UtilFile;

/** 
 * Author : Nhu Dinh Thuan
 *          nhudinhthuan@yahoo.com
 * Sep 20, 2009  
 */
class NLPExtractor {
  
  private static volatile NLPExtractor instance;
  
  private final static synchronized  NLPExtractor getInstance() {
    if(instance == null) instance = new NLPExtractor();
    return instance;
  }
  
  private NLPDictionary nlp;
  
  public NLPExtractor() {
    try {
      File file = UtilFile.getFile("system/dictionary/nlp/", "nlpdb.db");
      NLPRecordDB.configureStorageConfig(StorageConfig.getInstance()) ;
      nlp = new NLPDictionary() ;
      nlp.load(file.getAbsolutePath()) ;
      nlp.optimize() ;
//      System.out.println("Load " + count + " records into the NLPDictionary.");
    } catch (Exception e) {
      LogService.getInstance().setThrowable(e);
    }
  }
  
  public NLPRecord extract(Article article) {
    return extract(article.getMeta(), article.getDomain(), article.getContent());
  }
  
  public NLPRecord extract(Meta meta, Domain domain, Content content) {
    Document document = toDocument(nlp.getSemanticDictionary(), meta, domain, content);
    Queries queries = nlp.getQueries() ;
    Query[] squeries = queries.find(document) ;
    org.vietspider.common.util.Arrays.sort(squeries, Query.ID_COMPARATOR) ;
    if(squeries == null || squeries.length < 1) return null;
    NLPRecord record = new NLPRecord(meta.getId());
    List<NLPRecordItem> items = record.getItems();
    QueryContext qcontext = new QueryContext() ;
    for(int i = 0 ; i < squeries.length; i++) {
      Query query = squeries[i] ;
      query.query(qcontext, document) ;
      ExtractData [] extracts = qcontext.getExtractData() ;
      for(int j = 0; j < extracts.length; j++) {
        NLPRecordItem item = new NLPRecordItem();
        item.setType(extracts[j].getType());
        item.setName(extracts[j].getName());
        item.setValues(extracts[j].toMapProperties());
        items.add(item);
      }
      //ExtractData extractData = query.query(document);
    }
    
    return record;
  }
  
  protected Document toDocument(SemanticDictionary dictionary, Article article) {
//    WebPage wdata = record.getEntities().getEntity(WebPage.NAME, WebPage.class) ;
    Domain domain = article.getDomain();
    Meta meta = article.getMeta();
    Content content = article.getContent();
    return toDocument(dictionary, meta, domain, content);
    
  }
  
  protected Document toDocument(SemanticDictionary dictionary, 
      Meta meta, Domain domain, Content content) {
    
    Document doc = new Document() ;
    doc.addField("type", domain.getGroup().toLowerCase() + "/html") ;
    doc.addField("source" , meta.getSource()) ;
    doc.addField("title"  ,  meta.getTitle()) ;
    doc.addField("description" ,  meta.getDesc()) ;
    doc.addField("content", content.getContent()) ;

    doc.analyze(dictionary.getWordTree()) ;
   
    TokenAnalyzer[] analyzers = { 
      Date.ANALYZER, VNPhone.ANALYZER, VND.ANALYZER, USD.ANALYZER, Email.ANALYZER
    } ;
    doc.analyze(analyzers, dictionary.getWordTree()) ;
    return doc ;
  }
}
