/***************************************************************************
 * Copyright 2001-2008 The VietSpider         All rights reserved.  		 *
 **************************************************************************/
package org.vietspider.crawl.link.queue;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.zip.GZIPInputStream;
import java.util.zip.GZIPOutputStream;

import org.vietspider.common.io.LogService;
import org.vietspider.crawl.link.Link;
import org.vietspider.model.Source;

/** 
 * Author : Nhu Dinh Thuan
 *          nhudinhthuan@yahoo.com
 * Jul 19, 2008  
 */
class LinkQueueBak {

  protected volatile int size = 0;

  protected Node current = null;
  protected Node first = null;
  protected Source source;
  
  LinkQueueBak(Source s) {
    source = s;
  }

  public void appendFirst(LinkQueueBak queue) {
    queue.current.next = first;
    first = queue.first;  
    size += queue.size;
  }

  public synchronized Link pop() {   
    if(first == null) return null;
    Link link = first.getValue();
    first = first.next;
    if(first == null) current = null;
    if(size > 0) size--;
    if(link == null) return null;
    link.setSource(source);
    return link;
  }

  public boolean hasNext() { 
    return first != null; 
  }

  public void clear(){
    size = 0;
    first = null;
    current = null;
  }

  public void push(Link v) {
    if(v.getSource() != source) return;
    Node newNode = new Node(v);    
    this.size++;
    if(current != null){
      current.next = newNode;
      current = newNode;
      return;
    }
    current = newNode;
    first = current;
  }

  public int size() { return size; }

  public LinkQueueBak clone() {
    LinkQueueBak cqueue = new LinkQueueBak(source);
    Node temp = first;
    while(temp != null){
      cqueue.push(temp.getValue());
      temp = temp.next;
    }
    cqueue.size = size;
    return cqueue;
  }

  class Node {

    byte[] value;
//    Link value;

    Node next;

    Node(Link v) {
      value = zip(v);
//      value = v;
    }
    
//    Link getValue() { return value; }

    Link getValue() {
      try {
        ByteArrayInputStream input = new ByteArrayInputStream(value);
        GZIPInputStream gzip = new GZIPInputStream(input);
        
        ByteArrayOutputStream unzipOutput = new ByteArrayOutputStream(value.length*3);
        
        byte[] tmp = new byte[2048];
        int read;
        while ((read = gzip.read(tmp)) != -1) {
          unzipOutput.write(tmp, 0, read);
        }
        gzip.close();
        
        byte [] bytes = unzipOutput.toByteArray();
        ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(bytes);
        ObjectInputStream objectInputStream = new ObjectInputStream(byteArrayInputStream);
        return (Link)objectInputStream.readObject();
      } catch (OutOfMemoryError e) {
        System.gc();
        LogService.getInstance().setThrowable(e);
      } catch (Throwable e) {
        LogService.getInstance().setThrowable(e);
      }
      return null;
    }

    private byte[] zip(Link link) {
      try {
        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
        ObjectOutputStream objectOutputStream = new ObjectOutputStream(byteArrayOutputStream);
        objectOutputStream.writeObject(link);
        objectOutputStream.close();
        
        ByteArrayOutputStream zipOutput = new ByteArrayOutputStream();
        GZIPOutputStream gzip = new GZIPOutputStream(zipOutput);
        byteArrayOutputStream.writeTo(gzip);
        gzip.close();
        
        return zipOutput.toByteArray();
      } catch (OutOfMemoryError e) {
        System.gc();
        LogService.getInstance().setThrowable(e);
      } catch (Throwable e) {
        LogService.getInstance().setThrowable(e);
      }
      return new byte[0];
    }
    
  }

  public Source getSource() { return source; }
}
