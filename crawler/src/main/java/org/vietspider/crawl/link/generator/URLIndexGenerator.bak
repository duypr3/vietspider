/***************************************************************************
 * Copyright 2001-2008 The VietSpider         All rights reserved.  		 *
 **************************************************************************/
package org.vietspider.crawl.link.generator;

import java.security.InvalidParameterException;
import java.util.ArrayList;
import java.util.List;

import org.vietspider.link.generator.Generator;
import org.vietspider.model.Source;
import org.vietspider.model.SourceIO;

/** 
 * Author : Nhu Dinh Thuan
 *          nhudinhthuan@yahoo.com
 * Jun 11, 2008  
 */
public final class URLIndexGeneratorBak extends URLGenerator {
  
  private long min = 0;
  private long max = 0;
  private int step = 1;
//  private int time = 0;
  
  protected volatile long index;
  
  private boolean increase = true;
  private int indexLength = -1;
  
  public URLIndexGeneratorBak(Source source, String... values) throws Exception {
    super(source, values);
    List<String> newTemplates = new ArrayList<String>();
    
    try {
      index = Long.parseLong(source.getProperties().getProperty(key));
    } catch (Exception e) {
    }
    
    for(int i = 0;  i < templates.length; i++) {
      if(templates[i].indexOf("[index]") > -1) {
        newTemplates.add(templates[i]);
      } else if(templates[i].indexOf('-') > -1 
          || templates[i].indexOf('>') > -1 ) {
        String [] range = templates[i].split("->");
        if(range.length < 2) range = templates[i].split("-");
        if(range.length < 2) range = templates[i].split(">");
        if(range.length < 2) {
          throw new InvalidParameterException("Bad parameter: " + templates[i]);
        }
        
        try {
          min = Long.parseLong(range[0]);
        } catch (Exception e) {
          throw new InvalidParameterException("Min isn't a number: " + range[0]);
        }
        
        try {
          max = Long.parseLong(range[1]);
        } catch (Exception e) {
          throw new InvalidParameterException("Max isn't a number: " + range[1]);
        }
        
        if(range.length > 2) {
          try {
            step = Integer.parseInt(range[2]);
          } catch (Exception e) {
          }  
        }
        
        if(max == min)  throw new InvalidParameterException("Max min is equals: " + templates[i]);
        
        if(range[0].length() == range[1].length() 
            && (range[0].charAt(0) ==  '0' || range[1].charAt(0) ==  '0')) {
          indexLength = range[0].length();
        }
      }
    }
    templates = newTemplates.toArray(new String[newTemplates.size()]);
    increase = min  < max;
    try {
      String value = source.getProperties().getProperty(key+".time.working");
      if(value != null && !(value = value.trim()).isEmpty()) {
//      time = Integer.parseInt(value);
        source.getProperties().remove(key+".time.working");
      }
    } catch (Exception e) {
    }
//    
//    if(time > 3) {
//      saveSource(String.valueOf(index));
//      return;
//    }
    
    if(increase) {
      if(index < min || index >=  max) {
//        time++;
        index = min;  
      }
    } else {
      if(index > min || index <=  max) {
//        time++;
        index = min;
      }
    }
  }
 
  public void generate(List<String> list) {
//    System.out.println(" vao day generaate "+ list.size() + " : "+ index);
    int size = 50;
    if(increase) {
      while(index < max) {
        String valueIndex = String.valueOf(index);
        if(indexLength > -1) {
          while(valueIndex.length() < indexLength) {
            valueIndex = "0" + valueIndex;
          }
        }
        for(int i = 0;  i < templates.length; i++) {
          list.add(templates[i].replaceAll("\\[index\\]", valueIndex));  
        }
        index += step;  
        if(list.size() >= size) break;
      }
    } else {
      while(index > max) {
        String valueIndex = String.valueOf(index);
        if(indexLength > -1) {
          while(valueIndex.length() < indexLength) {
            valueIndex = "0" + valueIndex;
          }
        }
        for(int i = 0;  i < templates.length; i++) {
          list.add(templates[i].replaceAll("\\[index\\]", valueIndex));  
        }
        index -= step;  
        if(list.size() >= size) break;
      }
    }
//    System.out.println(" sau do sinh ra generaate "+ list.size() + " : "+ index);
//    System.out.println(" va luc ra generaate "+ list.size());
    saveSource(String.valueOf(index));
  }
  
  @Override()
  protected void saveSource(String value) {
//    if(time > 3) source.setPriority(-1);
//  if(setPriority) saveSource.setPriority(-1);
//    Source tempSource = SourceIO.getInstance().saveProperty(source, key+".time.working", String.valueOf(time));
    SourceIO.getInstance().saveProperty(source, key, value);
//    source.getProperties().setProperty(key+".time.working", String.valueOf(time));
//    System.out.println(" chuan bi save index " + index);
//    tempSource.getProperties().put(key, value);
  }
  
  public short getType() { return Generator.HOMEPAGE_GENERATOR; }
  
  public Source getSource() { return source; }
  
}
