/***************************************************************************
 * Copyright 2001-2009 The VietSpider         All rights reserved.  		 *
 **************************************************************************/
package org.vietspider.content.db.tp;

import java.io.File;
import java.util.List;

import org.apache.lucene.document.Document;
import org.apache.lucene.document.Field;
import org.apache.lucene.search.IndexSearcher;
import org.apache.lucene.search.Query;
import org.apache.lucene.search.ScoreDoc;
import org.apache.lucene.search.TopDocs;
import org.vietspider.common.io.LogService;
import org.vietspider.content.tp.vn.TpDocument;
import org.vietspider.db.ContentIndexers;
import org.vietspider.index.CoreDbIndexers;
import org.vietspider.index.IIndexEntry;
import org.vietspider.index.IndexSearchers;

/** 
 * Author : Nhu Dinh Thuan
 *          nhudinhthuan@yahoo.com
 * Aug 30, 2009  
 */
public class TpIndexingSearcher {

  private IndexSearcher indexSearcher = null;
  
  private TpDatabase tpDatabase;
  private int minScore = 20;

  public TpIndexingSearcher(TpDatabase tpDatabase, File folder, int minScore) throws Exception {
    this.tpDatabase = tpDatabase;
    CoreDbIndexers dbIndexers = ContentIndexers.getInstance().getDbIndexers();
    
//    System.out.println("chuan bi cai ni "+ folder.getName());
    indexSearcher = IndexSearchers.getInstance().getSearcher(dbIndexers, folder, false);
    this.minScore = minScore;
  }
  
  public void setMinScore(int minScore) { this.minScore = minScore;  }
  
  void search(List<TpDocument> documents, Query query) throws Exception {
//        System.out.println("search "+ file.getName() + "  from "+ indexSearcher +" -> "+ to + " max " + max);
    //      System.out.println("max doc "+indexSearcher.maxDoc());
//    System.out.println(" chuan bi search voi min score la "+ minScore);
    
    TopDocs topDocs = indexSearcher.search(query, null, 100);
    ScoreDoc [] docs = topDocs.scoreDocs;
    
//    HitDocCollector collector = new HitDocCollector(100) ;
//    indexSearcher.search(query, null, collector) ;
//    final HitDoc[] hitDocs = collector.getHitDoc();
    int maxDoc = Math.min(docs.length, 100);
    for(int i = 0; i < maxDoc; i++) {
      int score = (int)(docs[i].score*100);
      if(score < minScore) continue;
      int docId = docs[i].doc;
      Document doc = indexSearcher.doc(docId);
      if(doc == null) continue;
      Field field = doc.getField(IIndexEntry.FIELD_ID);
      if(field == null) continue;
      try {
        long longId = Long.valueOf(field.stringValue());
        if(tpDatabase == null) break;
//        System.out.println("duoc document " + tpDatabase.loadDocument(longId));
        documents.add(tpDatabase.loadDocument(longId));
      } catch (StackOverflowError e) {
        LogService.getInstance().setMessage("TPDATABASE - LOAD", 
            new Exception(e), e.toString() + "  "  + field.stringValue());
      } catch (Throwable e) {
        LogService.getInstance().setThrowable(e);
      }
    }
//    System.out.println(" thay co ket qua  : "+ documents.size());
  }

}
