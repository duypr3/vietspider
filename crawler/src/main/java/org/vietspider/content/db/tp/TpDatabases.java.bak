/***************************************************************************
 * Copyright 2001-2009 The VietSpider         All rights reserved.  		 *
 **************************************************************************/
package org.vietspider.content.db.tp;

import java.io.File;
import java.util.Iterator;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

import org.vietspider.common.io.LogService;
import org.vietspider.common.io.UtilFile;
import org.vietspider.common.util.Queue;
import org.vietspider.content.tp.vn.TpDocument;
import org.vietspider.db.BytesDatabase;
import org.vietspider.db.CrawlerConfig;
import org.vietspider.db.SystemProperties;

/** 
 * Author : Nhu Dinh Thuan
 *          nhudinhthuan@yahoo.com
 * Oct 22, 2009  
 */
public class TpDatabases {
  
  private Map<String, TpDatabase> holder = new ConcurrentHashMap<String, TpDatabase>();
  
  public Map<String, TpDatabase> getHolder() { return holder; }

  public synchronized TpDatabase getDatabase(String group, String dateFolder, boolean create){
    String key = new StringBuilder().append(group).append('.').append(dateFolder).toString();
    if(dateFolder.charAt(dateFolder.length() - 1) !='/') dateFolder += File.separator;
    
    File dbFolder = UtilFile.getFolder("content/tp/" + group + "/database3/");
    File dbFile = new File(dbFolder, dateFolder);
    if(dbFile.exists() && dbFile.isFile()) dbFile.delete();
    if(dbFile.exists()) return getDatabase(key, dbFile);
    
   /* 
    dbFolder = UtilFile.getFolder("content/tp/" + group + "/database4/");
    dbFile = new File(dbFolder, dateFolder);
    if(dbFile.exists() && dbFile.isFile()) dbFile.delete();
    if(dbFile.exists()) return getDatabase(key, dbFile, 2);*/
    
    if(!create) return null;
    
    try {
      dbFile.mkdirs();
    } catch (Exception e) {
      LogService.getInstance().setThrowable("TPDATABASE", e);
    }
    return getDatabase(key, dbFile);
  }
  
  private synchronized TpDatabase getDatabase(String key, File folder/*, int type*/) {
    TpDatabase tracker = holder.get(key);
    if(tracker != null && !tracker.isClose()) return tracker;
    return createDatabase1(key, folder);
//    return createDatabase2(key, folder);
  }

  private synchronized TpDatabase createDatabase1(String key, File folder){
    TpDatabase tracker = null;
    try {
      long cached = SystemProperties.getInstance().getLong("tp.database.cached", -1);
      
      if(cached < 1024*1024) {
        if(CrawlerConfig.EXCUTOR_SIZE <= 5) {
          cached = 5*1024*1024l;
        } else if(CrawlerConfig.EXCUTOR_SIZE > 5 && CrawlerConfig.EXCUTOR_SIZE <= 15) {
          cached = 50*1024*1024l;
        } else if(CrawlerConfig.EXCUTOR_SIZE > 15 && CrawlerConfig.EXCUTOR_SIZE <= 20) {
          cached = 100*1024*1024l;
        } else if(CrawlerConfig.EXCUTOR_SIZE > 20 && CrawlerConfig.EXCUTOR_SIZE <= 25) {
          cached = 120*1024*1024l;
        } else if(CrawlerConfig.EXCUTOR_SIZE > 25 && CrawlerConfig.EXCUTOR_SIZE <= 30) {
          cached = 150*1024*1024l;
        } else {
          cached = 200*1024*1024l;
        }
      }
      
      tracker = new TpDatabaseImpl(folder, cached);
     
//    } catch (RecoveryException e) {
//      String path = folder.getAbsolutePath();
//      LogService.getInstance().setThrowable(path, e.getCause());
//      LogService.getInstance().setThrowable(path, e);
    } catch (Exception e) {
      String path = folder.getAbsolutePath();
      LogService.getInstance().setThrowable(path, e);
    }
    if(tracker != null) holder.put(key, tracker);
    return tracker;
  }

  public void closeExpires()  {
    Iterator<String> iterator = holder.keySet().iterator();
    Queue<String> queue = new Queue<String>();

    while(iterator.hasNext()) {
      String key = iterator.next();
      TpDatabase tracker = holder.get(key);
      if(System.currentTimeMillis() - tracker.getLastAccess() >= 30*60*1000l) {
        queue.push(key);
      } else if(tracker.isClose()) {
        queue.push(key);
      } 
    }

    while(queue.hasNext()) {
      String key = queue.pop();
      TpDatabase tracker = holder.get(key);
      holder.remove(key);
      if(tracker == null) continue;
      tracker.close();
    }
  }

  public void closes() {
//    tpTempDatabase.store();
    Iterator<String> iterator = holder.keySet().iterator();

    while(iterator.hasNext()) {
      String key = iterator.next();
      TpDatabase tracker = holder.get(key);
      if(tracker != null) tracker.close();
    }
  }
  
  public static class TpDatabaseImpl extends BytesDatabase implements TpDatabase {

    protected volatile long lastAccess = System.currentTimeMillis();

    public TpDatabaseImpl(File folder, long cachedSize) throws Exception {
      super(folder, "tpdatabase3", cachedSize, false);
    }

    public void save(TpDocument document) throws Throwable {
      if(isClose) return;
      save(document.getLongId(), document.toBytes());
    }
    
    public void save(long id, byte[] bytes) throws Throwable {
      lastAccess = System.currentTimeMillis();
      map.put(id, bytes);
    }
    
    public TpDocument loadDocument(long id) throws Throwable {
      if(isClose) return null;
      byte [] bytes = map.get(id);
      if(bytes == null) return null;
      return TpDocument.read(bytes);
    }
    
    public long getLastAccess() { return lastAccess; }
  }
    
}
